
build/Quadrotor.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4834      	ldr	r0, [pc, #208]	; (8000294 <endfiniloop+0x4>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	f240 0000 	movw	r0, #0
 80001cc:	f2cc 0000 	movt	r0, #49152	; 0xc000
 80001d0:	f64e 7134 	movw	r1, #61236	; 0xef34
 80001d4:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d8:	6008      	str	r0, [r1, #0]
 80001da:	f3bf 8f4f 	dsb	sy
 80001de:	f3bf 8f6f 	isb	sy
 80001e2:	f240 0000 	movw	r0, #0
 80001e6:	f2c0 00f0 	movt	r0, #240	; 0xf0
 80001ea:	f64e 5188 	movw	r1, #60808	; 0xed88
 80001ee:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001f2:	6008      	str	r0, [r1, #0]
 80001f4:	f3bf 8f4f 	dsb	sy
 80001f8:	f3bf 8f6f 	isb	sy
 80001fc:	f04f 0000 	mov.w	r0, #0
 8000200:	eee1 0a10 	vmsr	fpscr, r0
 8000204:	f64e 713c 	movw	r1, #61244	; 0xef3c
 8000208:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800020c:	6008      	str	r0, [r1, #0]
 800020e:	2006      	movs	r0, #6
 8000210:	f380 8814 	msr	CONTROL, r0
 8000214:	f3bf 8f6f 	isb	sy
 8000218:	f000 fe02 	bl	8000e20 <__core_init>
 800021c:	f004 fe18 	bl	8004e50 <__early_init>
 8000220:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 8000224:	491c      	ldr	r1, [pc, #112]	; (8000298 <endfiniloop+0x8>)
 8000226:	4a1d      	ldr	r2, [pc, #116]	; (800029c <endfiniloop+0xc>)

08000228 <msloop>:
 8000228:	4291      	cmp	r1, r2
 800022a:	bf3c      	itt	cc
 800022c:	f841 0b04 	strcc.w	r0, [r1], #4
 8000230:	e7fa      	bcc.n	8000228 <msloop>
 8000232:	491b      	ldr	r1, [pc, #108]	; (80002a0 <endfiniloop+0x10>)
 8000234:	4a17      	ldr	r2, [pc, #92]	; (8000294 <endfiniloop+0x4>)

08000236 <psloop>:
 8000236:	4291      	cmp	r1, r2
 8000238:	bf3c      	itt	cc
 800023a:	f841 0b04 	strcc.w	r0, [r1], #4
 800023e:	e7fa      	bcc.n	8000236 <psloop>
 8000240:	4918      	ldr	r1, [pc, #96]	; (80002a4 <endfiniloop+0x14>)
 8000242:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <endfiniloop+0x18>)
 8000244:	4b19      	ldr	r3, [pc, #100]	; (80002ac <endfiniloop+0x1c>)

08000246 <dloop>:
 8000246:	429a      	cmp	r2, r3
 8000248:	bf3e      	ittt	cc
 800024a:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800024e:	f842 0b04 	strcc.w	r0, [r2], #4
 8000252:	e7f8      	bcc.n	8000246 <dloop>
 8000254:	2000      	movs	r0, #0
 8000256:	4916      	ldr	r1, [pc, #88]	; (80002b0 <endfiniloop+0x20>)
 8000258:	4a16      	ldr	r2, [pc, #88]	; (80002b4 <endfiniloop+0x24>)

0800025a <bloop>:
 800025a:	4291      	cmp	r1, r2
 800025c:	bf3c      	itt	cc
 800025e:	f841 0b04 	strcc.w	r0, [r1], #4
 8000262:	e7fa      	bcc.n	800025a <bloop>
 8000264:	f000 fdf4 	bl	8000e50 <__init_ram_areas>
 8000268:	f000 fde2 	bl	8000e30 <__late_init>
 800026c:	4c12      	ldr	r4, [pc, #72]	; (80002b8 <endfiniloop+0x28>)
 800026e:	4d13      	ldr	r5, [pc, #76]	; (80002bc <endfiniloop+0x2c>)

08000270 <initloop>:
 8000270:	42ac      	cmp	r4, r5
 8000272:	da03      	bge.n	800027c <endinitloop>
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
 8000278:	4788      	blx	r1
 800027a:	e7f9      	b.n	8000270 <initloop>

0800027c <endinitloop>:
 800027c:	f005 fa70 	bl	8005760 <main>
 8000280:	4c0f      	ldr	r4, [pc, #60]	; (80002c0 <endfiniloop+0x30>)
 8000282:	4d10      	ldr	r5, [pc, #64]	; (80002c4 <endfiniloop+0x34>)

08000284 <finiloop>:
 8000284:	42ac      	cmp	r4, r5
 8000286:	da03      	bge.n	8000290 <endfiniloop>
 8000288:	f854 1b04 	ldr.w	r1, [r4], #4
 800028c:	4788      	blx	r1
 800028e:	e7f9      	b.n	8000284 <finiloop>

08000290 <endfiniloop>:
 8000290:	f000 bdd6 	b.w	8000e40 <__default_exit>
 8000294:	20000800 	.word	0x20000800
 8000298:	20000000 	.word	0x20000000
 800029c:	20000400 	.word	0x20000400
 80002a0:	20000400 	.word	0x20000400
 80002a4:	08007f78 	.word	0x08007f78
 80002a8:	20000800 	.word	0x20000800
 80002ac:	20000c6c 	.word	0x20000c6c
 80002b0:	20000c70 	.word	0x20000c70
 80002b4:	20001c48 	.word	0x20001c48
 80002b8:	080001c0 	.word	0x080001c0
 80002bc:	080001c0 	.word	0x080001c0
 80002c0:	080001c0 	.word	0x080001c0
 80002c4:	080001c0 	.word	0x080001c0
	...

080002d0 <_port_switch>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	ed2d 8a10 	vpush	{s16-s31}
 80002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002dc:	68c3      	ldr	r3, [r0, #12]
 80002de:	469d      	mov	sp, r3
 80002e0:	ecbd 8a10 	vpop	{s16-s31}
 80002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002e8 <_port_thread_start>:
 80002e8:	2300      	movs	r3, #0
 80002ea:	f383 8811 	msr	BASEPRI, r3
 80002ee:	4628      	mov	r0, r5
 80002f0:	47a0      	blx	r4
 80002f2:	2000      	movs	r0, #0
 80002f4:	f001 f8e4 	bl	80014c0 <chThdExit>

080002f8 <_port_switch_from_isr>:
 80002f8:	f001 f812 	bl	8001320 <chSchDoReschedule>

080002fc <_port_exit_from_isr>:
 80002fc:	df00      	svc	0
 80002fe:	e7fe      	b.n	80002fe <_port_exit_from_isr+0x2>

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800043e:	f1a4 0401 	sub.w	r4, r4, #1
 8000442:	d1e9      	bne.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f092 0f00 	teq	r2, #0
 80005ea:	bf14      	ite	ne
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	4770      	bxeq	lr
 80005f2:	b530      	push	{r4, r5, lr}
 80005f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	e720      	b.n	8000444 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_ul2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	e00a      	b.n	800062a <__aeabi_l2d+0x16>

08000614 <__aeabi_l2d>:
 8000614:	ea50 0201 	orrs.w	r2, r0, r1
 8000618:	bf08      	it	eq
 800061a:	4770      	bxeq	lr
 800061c:	b530      	push	{r4, r5, lr}
 800061e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000622:	d502      	bpl.n	800062a <__aeabi_l2d+0x16>
 8000624:	4240      	negs	r0, r0
 8000626:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800062a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800062e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000632:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000636:	f43f aedc 	beq.w	80003f2 <__adddf3+0xe6>
 800063a:	f04f 0203 	mov.w	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000652:	f1c2 0320 	rsb	r3, r2, #32
 8000656:	fa00 fc03 	lsl.w	ip, r0, r3
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000662:	ea40 000e 	orr.w	r0, r0, lr
 8000666:	fa21 f102 	lsr.w	r1, r1, r2
 800066a:	4414      	add	r4, r2
 800066c:	e6c1      	b.n	80003f2 <__adddf3+0xe6>
 800066e:	bf00      	nop

08000670 <__aeabi_dmul>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000676:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800067a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800067e:	bf1d      	ittte	ne
 8000680:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000684:	ea94 0f0c 	teqne	r4, ip
 8000688:	ea95 0f0c 	teqne	r5, ip
 800068c:	f000 f8de 	bleq	800084c <__aeabi_dmul+0x1dc>
 8000690:	442c      	add	r4, r5
 8000692:	ea81 0603 	eor.w	r6, r1, r3
 8000696:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800069a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800069e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006a2:	bf18      	it	ne
 80006a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b0:	d038      	beq.n	8000724 <__aeabi_dmul+0xb4>
 80006b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006c6:	f04f 0600 	mov.w	r6, #0
 80006ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ce:	f09c 0f00 	teq	ip, #0
 80006d2:	bf18      	it	ne
 80006d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006e4:	d204      	bcs.n	80006f0 <__aeabi_dmul+0x80>
 80006e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ea:	416d      	adcs	r5, r5
 80006ec:	eb46 0606 	adc.w	r6, r6, r6
 80006f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000700:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000704:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000708:	bf88      	it	hi
 800070a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800070e:	d81e      	bhi.n	800074e <__aeabi_dmul+0xde>
 8000710:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000714:	bf08      	it	eq
 8000716:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800071a:	f150 0000 	adcs.w	r0, r0, #0
 800071e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000728:	ea46 0101 	orr.w	r1, r6, r1
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000738:	bfc2      	ittt	gt
 800073a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800073e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000742:	bd70      	popgt	{r4, r5, r6, pc}
 8000744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000748:	f04f 0e00 	mov.w	lr, #0
 800074c:	3c01      	subs	r4, #1
 800074e:	f300 80ab 	bgt.w	80008a8 <__aeabi_dmul+0x238>
 8000752:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000756:	bfde      	ittt	le
 8000758:	2000      	movle	r0, #0
 800075a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800075e:	bd70      	pople	{r4, r5, r6, pc}
 8000760:	f1c4 0400 	rsb	r4, r4, #0
 8000764:	3c20      	subs	r4, #32
 8000766:	da35      	bge.n	80007d4 <__aeabi_dmul+0x164>
 8000768:	340c      	adds	r4, #12
 800076a:	dc1b      	bgt.n	80007a4 <__aeabi_dmul+0x134>
 800076c:	f104 0414 	add.w	r4, r4, #20
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f305 	lsl.w	r3, r0, r5
 8000778:	fa20 f004 	lsr.w	r0, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	fa21 f604 	lsr.w	r6, r1, r4
 8000794:	eb42 0106 	adc.w	r1, r2, r6
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 040c 	rsb	r4, r4, #12
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f304 	lsl.w	r3, r0, r4
 80007b0:	fa20 f005 	lsr.w	r0, r0, r5
 80007b4:	fa01 f204 	lsl.w	r2, r1, r4
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c4:	f141 0100 	adc.w	r1, r1, #0
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f1c4 0520 	rsb	r5, r4, #32
 80007d8:	fa00 f205 	lsl.w	r2, r0, r5
 80007dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e0:	fa20 f304 	lsr.w	r3, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea43 0302 	orr.w	r3, r3, r2
 80007ec:	fa21 f004 	lsr.w	r0, r1, r4
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	fa21 f204 	lsr.w	r2, r1, r4
 80007f8:	ea20 0002 	bic.w	r0, r0, r2
 80007fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f094 0f00 	teq	r4, #0
 8000810:	d10f      	bne.n	8000832 <__aeabi_dmul+0x1c2>
 8000812:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000816:	0040      	lsls	r0, r0, #1
 8000818:	eb41 0101 	adc.w	r1, r1, r1
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3c01      	subeq	r4, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1a6>
 8000826:	ea41 0106 	orr.w	r1, r1, r6
 800082a:	f095 0f00 	teq	r5, #0
 800082e:	bf18      	it	ne
 8000830:	4770      	bxne	lr
 8000832:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000836:	0052      	lsls	r2, r2, #1
 8000838:	eb43 0303 	adc.w	r3, r3, r3
 800083c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000840:	bf08      	it	eq
 8000842:	3d01      	subeq	r5, #1
 8000844:	d0f7      	beq.n	8000836 <__aeabi_dmul+0x1c6>
 8000846:	ea43 0306 	orr.w	r3, r3, r6
 800084a:	4770      	bx	lr
 800084c:	ea94 0f0c 	teq	r4, ip
 8000850:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000854:	bf18      	it	ne
 8000856:	ea95 0f0c 	teqne	r5, ip
 800085a:	d00c      	beq.n	8000876 <__aeabi_dmul+0x206>
 800085c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000866:	d1d1      	bne.n	800080c <__aeabi_dmul+0x19c>
 8000868:	ea81 0103 	eor.w	r1, r1, r3
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800087a:	bf06      	itte	eq
 800087c:	4610      	moveq	r0, r2
 800087e:	4619      	moveq	r1, r3
 8000880:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000884:	d019      	beq.n	80008ba <__aeabi_dmul+0x24a>
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	d102      	bne.n	8000892 <__aeabi_dmul+0x222>
 800088c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000890:	d113      	bne.n	80008ba <__aeabi_dmul+0x24a>
 8000892:	ea95 0f0c 	teq	r5, ip
 8000896:	d105      	bne.n	80008a4 <__aeabi_dmul+0x234>
 8000898:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800089c:	bf1c      	itt	ne
 800089e:	4610      	movne	r0, r2
 80008a0:	4619      	movne	r1, r3
 80008a2:	d10a      	bne.n	80008ba <__aeabi_dmul+0x24a>
 80008a4:	ea81 0103 	eor.w	r1, r1, r3
 80008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	bd70      	pop	{r4, r5, r6, pc}
 80008ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008c2:	bd70      	pop	{r4, r5, r6, pc}

080008c4 <__aeabi_ddiv>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008d2:	bf1d      	ittte	ne
 80008d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d8:	ea94 0f0c 	teqne	r4, ip
 80008dc:	ea95 0f0c 	teqne	r5, ip
 80008e0:	f000 f8a7 	bleq	8000a32 <__aeabi_ddiv+0x16e>
 80008e4:	eba4 0405 	sub.w	r4, r4, r5
 80008e8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008f4:	f000 8088 	beq.w	8000a08 <__aeabi_ddiv+0x144>
 80008f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000900:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000904:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000908:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800090c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000910:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000914:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000918:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800091c:	429d      	cmp	r5, r3
 800091e:	bf08      	it	eq
 8000920:	4296      	cmpeq	r6, r2
 8000922:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000926:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800092a:	d202      	bcs.n	8000932 <__aeabi_ddiv+0x6e>
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	1ab6      	subs	r6, r6, r2
 8000934:	eb65 0503 	sbc.w	r5, r5, r3
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000942:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 000c 	orrcs.w	r0, r0, ip
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009a4:	d018      	beq.n	80009d8 <__aeabi_ddiv+0x114>
 80009a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009c2:	d1c0      	bne.n	8000946 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	d10b      	bne.n	80009e2 <__aeabi_ddiv+0x11e>
 80009ca:	ea41 0100 	orr.w	r1, r1, r0
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009d6:	e7b6      	b.n	8000946 <__aeabi_ddiv+0x82>
 80009d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009dc:	bf04      	itt	eq
 80009de:	4301      	orreq	r1, r0
 80009e0:	2000      	moveq	r0, #0
 80009e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009e6:	bf88      	it	hi
 80009e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ec:	f63f aeaf 	bhi.w	800074e <__aeabi_dmul+0xde>
 80009f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009f4:	bf04      	itt	eq
 80009f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009fe:	f150 0000 	adcs.w	r0, r0, #0
 8000a02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a14:	bfc2      	ittt	gt
 8000a16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a24:	f04f 0e00 	mov.w	lr, #0
 8000a28:	3c01      	subs	r4, #1
 8000a2a:	e690      	b.n	800074e <__aeabi_dmul+0xde>
 8000a2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a30:	e68d      	b.n	800074e <__aeabi_dmul+0xde>
 8000a32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a36:	ea94 0f0c 	teq	r4, ip
 8000a3a:	bf08      	it	eq
 8000a3c:	ea95 0f0c 	teqeq	r5, ip
 8000a40:	f43f af3b 	beq.w	80008ba <__aeabi_dmul+0x24a>
 8000a44:	ea94 0f0c 	teq	r4, ip
 8000a48:	d10a      	bne.n	8000a60 <__aeabi_ddiv+0x19c>
 8000a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a4e:	f47f af34 	bne.w	80008ba <__aeabi_dmul+0x24a>
 8000a52:	ea95 0f0c 	teq	r5, ip
 8000a56:	f47f af25 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e72c      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a60:	ea95 0f0c 	teq	r5, ip
 8000a64:	d106      	bne.n	8000a74 <__aeabi_ddiv+0x1b0>
 8000a66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a6a:	f43f aefd 	beq.w	8000868 <__aeabi_dmul+0x1f8>
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	e722      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a7e:	f47f aec5 	bne.w	800080c <__aeabi_dmul+0x19c>
 8000a82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a86:	f47f af0d 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a8e:	f47f aeeb 	bne.w	8000868 <__aeabi_dmul+0x1f8>
 8000a92:	e712      	b.n	80008ba <__aeabi_dmul+0x24a>
	...

08000aa0 <__gedf2>:
 8000aa0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000aa4:	e006      	b.n	8000ab4 <__cmpdf2+0x4>
 8000aa6:	bf00      	nop

08000aa8 <__ledf2>:
 8000aa8:	f04f 0c01 	mov.w	ip, #1
 8000aac:	e002      	b.n	8000ab4 <__cmpdf2+0x4>
 8000aae:	bf00      	nop

08000ab0 <__cmpdf2>:
 8000ab0:	f04f 0c01 	mov.w	ip, #1
 8000ab4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	bf18      	it	ne
 8000ac6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aca:	d01b      	beq.n	8000b04 <__cmpdf2+0x54>
 8000acc:	b001      	add	sp, #4
 8000ace:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ad2:	bf0c      	ite	eq
 8000ad4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad8:	ea91 0f03 	teqne	r1, r3
 8000adc:	bf02      	ittt	eq
 8000ade:	ea90 0f02 	teqeq	r0, r2
 8000ae2:	2000      	moveq	r0, #0
 8000ae4:	4770      	bxeq	lr
 8000ae6:	f110 0f00 	cmn.w	r0, #0
 8000aea:	ea91 0f03 	teq	r1, r3
 8000aee:	bf58      	it	pl
 8000af0:	4299      	cmppl	r1, r3
 8000af2:	bf08      	it	eq
 8000af4:	4290      	cmpeq	r0, r2
 8000af6:	bf2c      	ite	cs
 8000af8:	17d8      	asrcs	r0, r3, #31
 8000afa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000afe:	f040 0001 	orr.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__cmpdf2+0x64>
 8000b0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b12:	d107      	bne.n	8000b24 <__cmpdf2+0x74>
 8000b14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	d1d6      	bne.n	8000acc <__cmpdf2+0x1c>
 8000b1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b22:	d0d3      	beq.n	8000acc <__cmpdf2+0x1c>
 8000b24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_cdrcmple>:
 8000b2c:	4684      	mov	ip, r0
 8000b2e:	4610      	mov	r0, r2
 8000b30:	4662      	mov	r2, ip
 8000b32:	468c      	mov	ip, r1
 8000b34:	4619      	mov	r1, r3
 8000b36:	4663      	mov	r3, ip
 8000b38:	e000      	b.n	8000b3c <__aeabi_cdcmpeq>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_cdcmpeq>:
 8000b3c:	b501      	push	{r0, lr}
 8000b3e:	f7ff ffb7 	bl	8000ab0 <__cmpdf2>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	bf48      	it	mi
 8000b46:	f110 0f00 	cmnmi.w	r0, #0
 8000b4a:	bd01      	pop	{r0, pc}

08000b4c <__aeabi_dcmpeq>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff fff4 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b54:	bf0c      	ite	eq
 8000b56:	2001      	moveq	r0, #1
 8000b58:	2000      	movne	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmplt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffea 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmple>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffe0 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpge>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffce 	bl	8000b2c <__aeabi_cdrcmple>
 8000b90:	bf94      	ite	ls
 8000b92:	2001      	movls	r0, #1
 8000b94:	2000      	movhi	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpgt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffc4 	bl	8000b2c <__aeabi_cdrcmple>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2iz>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d215      	bcs.n	8000be6 <__aeabi_d2iz+0x36>
 8000bba:	d511      	bpl.n	8000be0 <__aeabi_d2iz+0x30>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d912      	bls.n	8000bec <__aeabi_d2iz+0x3c>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d105      	bne.n	8000bf8 <__aeabi_d2iz+0x48>
 8000bec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_d2uiz>:
 8000c00:	004a      	lsls	r2, r1, #1
 8000c02:	d211      	bcs.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c08:	d211      	bcs.n	8000c2e <__aeabi_d2uiz+0x2e>
 8000c0a:	d50d      	bpl.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c14:	d40e      	bmi.n	8000c34 <__aeabi_d2uiz+0x34>
 8000c16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c22:	fa23 f002 	lsr.w	r0, r3, r2
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d102      	bne.n	8000c3a <__aeabi_d2uiz+0x3a>
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c38:	4770      	bx	lr
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	4770      	bx	lr

08000c40 <__aeabi_d2f>:
 8000c40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c48:	bf24      	itt	cs
 8000c4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c52:	d90d      	bls.n	8000c70 <__aeabi_d2f+0x30>
 8000c54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c68:	bf08      	it	eq
 8000c6a:	f020 0001 	biceq.w	r0, r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c74:	d121      	bne.n	8000cba <__aeabi_d2f+0x7a>
 8000c76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c7a:	bfbc      	itt	lt
 8000c7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	4770      	bxlt	lr
 8000c82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c8a:	f1c2 0218 	rsb	r2, r2, #24
 8000c8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c96:	fa20 f002 	lsr.w	r0, r0, r2
 8000c9a:	bf18      	it	ne
 8000c9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ca0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cac:	ea40 000c 	orr.w	r0, r0, ip
 8000cb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb8:	e7cc      	b.n	8000c54 <__aeabi_d2f+0x14>
 8000cba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cbe:	d107      	bne.n	8000cd0 <__aeabi_d2f+0x90>
 8000cc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bxne	lr
 8000cd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <memcpy>:
 8000ce0:	4684      	mov	ip, r0
 8000ce2:	ea41 0300 	orr.w	r3, r1, r0
 8000ce6:	f013 0303 	ands.w	r3, r3, #3
 8000cea:	d16d      	bne.n	8000dc8 <memcpy+0xe8>
 8000cec:	3a40      	subs	r2, #64	; 0x40
 8000cee:	d341      	bcc.n	8000d74 <memcpy+0x94>
 8000cf0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cf4:	f840 3b04 	str.w	r3, [r0], #4
 8000cf8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cfc:	f840 3b04 	str.w	r3, [r0], #4
 8000d00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d04:	f840 3b04 	str.w	r3, [r0], #4
 8000d08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d0c:	f840 3b04 	str.w	r3, [r0], #4
 8000d10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d14:	f840 3b04 	str.w	r3, [r0], #4
 8000d18:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d1c:	f840 3b04 	str.w	r3, [r0], #4
 8000d20:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d24:	f840 3b04 	str.w	r3, [r0], #4
 8000d28:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d2c:	f840 3b04 	str.w	r3, [r0], #4
 8000d30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d34:	f840 3b04 	str.w	r3, [r0], #4
 8000d38:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d3c:	f840 3b04 	str.w	r3, [r0], #4
 8000d40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d44:	f840 3b04 	str.w	r3, [r0], #4
 8000d48:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d4c:	f840 3b04 	str.w	r3, [r0], #4
 8000d50:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d54:	f840 3b04 	str.w	r3, [r0], #4
 8000d58:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d5c:	f840 3b04 	str.w	r3, [r0], #4
 8000d60:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d64:	f840 3b04 	str.w	r3, [r0], #4
 8000d68:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d6c:	f840 3b04 	str.w	r3, [r0], #4
 8000d70:	3a40      	subs	r2, #64	; 0x40
 8000d72:	d2bd      	bcs.n	8000cf0 <memcpy+0x10>
 8000d74:	3230      	adds	r2, #48	; 0x30
 8000d76:	d311      	bcc.n	8000d9c <memcpy+0xbc>
 8000d78:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d7c:	f840 3b04 	str.w	r3, [r0], #4
 8000d80:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d84:	f840 3b04 	str.w	r3, [r0], #4
 8000d88:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d8c:	f840 3b04 	str.w	r3, [r0], #4
 8000d90:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d94:	f840 3b04 	str.w	r3, [r0], #4
 8000d98:	3a10      	subs	r2, #16
 8000d9a:	d2ed      	bcs.n	8000d78 <memcpy+0x98>
 8000d9c:	320c      	adds	r2, #12
 8000d9e:	d305      	bcc.n	8000dac <memcpy+0xcc>
 8000da0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000da4:	f840 3b04 	str.w	r3, [r0], #4
 8000da8:	3a04      	subs	r2, #4
 8000daa:	d2f9      	bcs.n	8000da0 <memcpy+0xc0>
 8000dac:	3204      	adds	r2, #4
 8000dae:	d008      	beq.n	8000dc2 <memcpy+0xe2>
 8000db0:	07d2      	lsls	r2, r2, #31
 8000db2:	bf1c      	itt	ne
 8000db4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000db8:	f800 3b01 	strbne.w	r3, [r0], #1
 8000dbc:	d301      	bcc.n	8000dc2 <memcpy+0xe2>
 8000dbe:	880b      	ldrh	r3, [r1, #0]
 8000dc0:	8003      	strh	r3, [r0, #0]
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2a08      	cmp	r2, #8
 8000dca:	d313      	bcc.n	8000df4 <memcpy+0x114>
 8000dcc:	078b      	lsls	r3, r1, #30
 8000dce:	d08d      	beq.n	8000cec <memcpy+0xc>
 8000dd0:	f010 0303 	ands.w	r3, r0, #3
 8000dd4:	d08a      	beq.n	8000cec <memcpy+0xc>
 8000dd6:	f1c3 0304 	rsb	r3, r3, #4
 8000dda:	1ad2      	subs	r2, r2, r3
 8000ddc:	07db      	lsls	r3, r3, #31
 8000dde:	bf1c      	itt	ne
 8000de0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000de4:	f800 3b01 	strbne.w	r3, [r0], #1
 8000de8:	d380      	bcc.n	8000cec <memcpy+0xc>
 8000dea:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000dee:	f820 3b02 	strh.w	r3, [r0], #2
 8000df2:	e77b      	b.n	8000cec <memcpy+0xc>
 8000df4:	3a04      	subs	r2, #4
 8000df6:	d3d9      	bcc.n	8000dac <memcpy+0xcc>
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dfe:	f800 3b01 	strb.w	r3, [r0], #1
 8000e02:	d2f9      	bcs.n	8000df8 <memcpy+0x118>
 8000e04:	780b      	ldrb	r3, [r1, #0]
 8000e06:	7003      	strb	r3, [r0, #0]
 8000e08:	784b      	ldrb	r3, [r1, #1]
 8000e0a:	7043      	strb	r3, [r0, #1]
 8000e0c:	788b      	ldrb	r3, [r1, #2]
 8000e0e:	7083      	strb	r3, [r0, #2]
 8000e10:	4660      	mov	r0, ip
 8000e12:	4770      	bx	lr
	...

08000e20 <__core_init>:
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
	...

08000e30 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
	...

08000e40 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000e40:	e7fe      	b.n	8000e40 <__default_exit>
 8000e42:	bf00      	nop
	...

08000e50 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e52:	4f13      	ldr	r7, [pc, #76]	; (8000ea0 <__init_ram_areas+0x50>)
 8000e54:	4d13      	ldr	r5, [pc, #76]	; (8000ea4 <__init_ram_areas+0x54>)
 8000e56:	4c14      	ldr	r4, [pc, #80]	; (8000ea8 <__init_ram_areas+0x58>)
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <__init_ram_areas+0x5c>)
 8000e5a:	4915      	ldr	r1, [pc, #84]	; (8000eb0 <__init_ram_areas+0x60>)
 8000e5c:	f107 0e70 	add.w	lr, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8000e60:	2600      	movs	r6, #0
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000e62:	429c      	cmp	r4, r3
 8000e64:	d911      	bls.n	8000e8a <__init_ram_areas+0x3a>
 8000e66:	3904      	subs	r1, #4
 8000e68:	461a      	mov	r2, r3
      *p = *tp;
 8000e6a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8000e6e:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000e72:	4294      	cmp	r4, r2
 8000e74:	d8f9      	bhi.n	8000e6a <__init_ram_areas+0x1a>
 8000e76:	43da      	mvns	r2, r3
 8000e78:	4414      	add	r4, r2
 8000e7a:	f024 0403 	bic.w	r4, r4, #3
 8000e7e:	3404      	adds	r4, #4
 8000e80:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000e82:	429d      	cmp	r5, r3
 8000e84:	d903      	bls.n	8000e8e <__init_ram_areas+0x3e>
      *p = 0;
 8000e86:	f843 6b04 	str.w	r6, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000e8a:	429d      	cmp	r5, r3
 8000e8c:	d8fb      	bhi.n	8000e86 <__init_ram_areas+0x36>
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000e8e:	4577      	cmp	r7, lr
 8000e90:	d005      	beq.n	8000e9e <__init_ram_areas+0x4e>
 8000e92:	6939      	ldr	r1, [r7, #16]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	69bc      	ldr	r4, [r7, #24]
 8000e98:	69fd      	ldr	r5, [r7, #28]
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	e7e1      	b.n	8000e62 <__init_ram_areas+0x12>
 8000e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea0:	08007910 	.word	0x08007910
 8000ea4:	20001c48 	.word	0x20001c48
 8000ea8:	20001c48 	.word	0x20001c48
 8000eac:	20001c48 	.word	0x20001c48
 8000eb0:	080083e4 	.word	0x080083e4
	...

08000ec0 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000ec0:	e7fe      	b.n	8000ec0 <_unhandled_exception>
 8000ec2:	bf00      	nop
	...

08000ed0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000ed0:	e7fe      	b.n	8000ed0 <_idle_thread>
 8000ed2:	bf00      	nop
	...

08000ee0 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000ee0:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000ee2:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <chSysInit+0x88>)
  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000ee4:	4821      	ldr	r0, [pc, #132]	; (8000f6c <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000ee8:	2400      	movs	r4, #0
 8000eea:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000eee:	4e20      	ldr	r6, [pc, #128]	; (8000f70 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000ef0:	4d20      	ldr	r5, [pc, #128]	; (8000f74 <chSysInit+0x94>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000ef2:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000ef6:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                   |
 8000ef8:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	68f2      	ldr	r2, [r6, #12]
 8000efe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000f02:	60f2      	str	r2, [r6, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f04:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	2120      	movs	r1, #32
 8000f08:	f042 0201 	orr.w	r2, r2, #1
 8000f0c:	2610      	movs	r6, #16
 8000f0e:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000f10:	b083      	sub	sp, #12
 8000f12:	77de      	strb	r6, [r3, #31]
 8000f14:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 8000f18:	f000 f902 	bl	8001120 <_scheduler_init>
  _vt_init();
 8000f1c:	f000 f880 	bl	8001020 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8000f20:	f000 fb76 	bl	8001610 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8000f24:	f000 fc94 	bl	8001850 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8000f28:	f000 fcca 	bl	80018c0 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	2140      	movs	r1, #64	; 0x40
 8000f30:	f000 fa06 	bl	8001340 <_thread_init>
 8000f34:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000f38:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000f3a:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000f3c:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000f3e:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f42:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	490c      	ldr	r1, [pc, #48]	; (8000f78 <chSysInit+0x98>)
 8000f48:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 8000f4a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8000f4e:	9400      	str	r4, [sp, #0]
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <chSysInit+0x9c>)
 8000f52:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8000f56:	f000 fa4b 	bl	80013f0 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <chSysInit+0xa0>)
 8000f5c:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 8000f5e:	b003      	add	sp, #12
 8000f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00
 8000f68:	05fa0300 	.word	0x05fa0300
 8000f6c:	e0001000 	.word	0xe0001000
 8000f70:	e000edf0 	.word	0xe000edf0
 8000f74:	20000ca0 	.word	0x20000ca0
 8000f78:	080079a0 	.word	0x080079a0
 8000f7c:	08000ed1 	.word	0x08000ed1
 8000f80:	08007990 	.word	0x08007990
	...

08000f90 <chSysHalt>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000f92:	4b01      	ldr	r3, [pc, #4]	; (8000f98 <chSysHalt+0x8>)
 8000f94:	62d8      	str	r0, [r3, #44]	; 0x2c
 8000f96:	e7fe      	b.n	8000f96 <chSysHalt+0x6>
 8000f98:	20000c70 	.word	0x20000c70
 8000f9c:	00000000 	.word	0x00000000

08000fa0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassI();

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 8000fa2:	4d13      	ldr	r5, [pc, #76]	; (8000ff0 <chSysTimerHandlerI+0x50>)
 8000fa4:	69aa      	ldr	r2, [r5, #24]
 8000fa6:	7fd3      	ldrb	r3, [r2, #31]
 8000fa8:	b10b      	cbz	r3, 8000fae <chSysTimerHandlerI+0xe>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 8000faa:	3b01      	subs	r3, #1
 8000fac:	77d3      	strb	r3, [r2, #31]
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 8000fae:	6a11      	ldr	r1, [r2, #32]

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000fb0:	69eb      	ldr	r3, [r5, #28]
 8000fb2:	4e10      	ldr	r6, [pc, #64]	; (8000ff4 <chSysTimerHandlerI+0x54>)
 8000fb4:	3101      	adds	r1, #1
 8000fb6:	6211      	str	r1, [r2, #32]
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 8000fb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000fba:	42b3      	cmp	r3, r6
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 8000fbc:	f102 0201 	add.w	r2, r2, #1
 8000fc0:	62aa      	str	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000fc2:	d013      	beq.n	8000fec <chSysTimerHandlerI+0x4c>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 8000fc4:	689c      	ldr	r4, [r3, #8]
 8000fc6:	3c01      	subs	r4, #1
 8000fc8:	609c      	str	r4, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 8000fca:	b97c      	cbnz	r4, 8000fec <chSysTimerHandlerI+0x4c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000fcc:	2720      	movs	r7, #32
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000fce:	681a      	ldr	r2, [r3, #0]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
 8000fd0:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 8000fd2:	60dc      	str	r4, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000fd4:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 8000fd6:	61ea      	str	r2, [r5, #28]
 8000fd8:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 8000fdc:	6918      	ldr	r0, [r3, #16]
 8000fde:	4788      	blx	r1
 8000fe0:	f387 8811 	msr	BASEPRI, r7
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 8000fe4:	69eb      	ldr	r3, [r5, #28]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d0f0      	beq.n	8000fce <chSysTimerHandlerI+0x2e>
 8000fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000c70 	.word	0x20000c70
 8000ff4:	20000c8c 	.word	0x20000c8c
	...

08001000 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001000:	4a03      	ldr	r2, [pc, #12]	; (8001010 <chSysPolledDelayX+0x10>)
 8001002:	6851      	ldr	r1, [r2, #4]
 8001004:	6853      	ldr	r3, [r2, #4]
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8001006:	1a5b      	subs	r3, r3, r1
 8001008:	4283      	cmp	r3, r0
 800100a:	d3fb      	bcc.n	8001004 <chSysPolledDelayX+0x4>
  }
}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e0001000 	.word	0xe0001000
	...

08001020 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8001022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8001026:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800102a:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800102c:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800102e:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8001030:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001032:	621a      	str	r2, [r3, #32]
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000c70 	.word	0x20000c70
 800103c:	00000000 	.word	0x00000000

08001040 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8001040:	b470      	push	{r4, r5, r6}
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 8001042:	4e0d      	ldr	r6, [pc, #52]	; (8001078 <chVTDoSetI+0x38>)
 8001044:	69f4      	ldr	r4, [r6, #28]
  while (p->vt_delta < delta) {
 8001046:	68a5      	ldr	r5, [r4, #8]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8001048:	6103      	str	r3, [r0, #16]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800104a:	42a9      	cmp	r1, r5

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800104c:	60c2      	str	r2, [r0, #12]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800104e:	d904      	bls.n	800105a <chVTDoSetI+0x1a>
    delta -= p->vt_delta;
    p = p->vt_next;
 8001050:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8001052:	1b49      	subs	r1, r1, r5
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001054:	68a5      	ldr	r5, [r4, #8]
 8001056:	428d      	cmp	r5, r1
 8001058:	d3fa      	bcc.n	8001050 <chVTDoSetI+0x10>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800105a:	6863      	ldr	r3, [r4, #4]
 800105c:	6043      	str	r3, [r0, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 800105e:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8001060:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 8001062:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 8001064:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001066:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800106c:	1a59      	subs	r1, r3, r1
 800106e:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001070:	6272      	str	r2, [r6, #36]	; 0x24
}
 8001072:	bc70      	pop	{r4, r5, r6}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000c70 	.word	0x20000c70
 800107c:	00000000 	.word	0x00000000

08001080 <chVTDoResetI>:
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8001080:	6803      	ldr	r3, [r0, #0]
 8001082:	6882      	ldr	r2, [r0, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 8001084:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001086:	b430      	push	{r4, r5}
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8001088:	689d      	ldr	r5, [r3, #8]
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800108a:	4c06      	ldr	r4, [pc, #24]	; (80010a4 <chVTDoResetI+0x24>)
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800108c:	442a      	add	r2, r5
 800108e:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 8001090:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8001092:	6805      	ldr	r5, [r0, #0]
  vtp->vt_func = NULL;
 8001094:	2200      	movs	r2, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800109a:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 800109c:	60c2      	str	r2, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800109e:	6263      	str	r3, [r4, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80010a0:	bc30      	pop	{r4, r5}
 80010a2:	4770      	bx	lr
 80010a4:	20000c70 	.word	0x20000c70
	...

080010b0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80010b0:	b410      	push	{r4}
 80010b2:	2320      	movs	r3, #32
 80010b4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 80010b8:	7f03      	ldrb	r3, [r0, #28]
 80010ba:	2b07      	cmp	r3, #7
 80010bc:	d80e      	bhi.n	80010dc <wakeup+0x2c>
 80010be:	e8df f003 	tbb	[pc, r3]
 80010c2:	0d27      	.short	0x0d27
 80010c4:	0408230d 	.word	0x0408230d
 80010c8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 80010ca:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 80010cc:	6893      	ldr	r3, [r2, #8]
 80010ce:	3301      	adds	r3, #1
 80010d0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80010d2:	e890 000c 	ldmia.w	r0, {r2, r3}
 80010d6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80010d8:	6802      	ldr	r2, [r0, #0]
 80010da:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80010dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80010e0:	2200      	movs	r2, #0
 80010e2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80010e4:	4b0d      	ldr	r3, [pc, #52]	; (800111c <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80010e6:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80010e8:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80010ea:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	428a      	cmp	r2, r1
 80010f0:	d2fb      	bcs.n	80010ea <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80010f6:	6003      	str	r3, [r0, #0]
 80010f8:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80010fa:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80010fc:	6058      	str	r0, [r3, #4]
 80010fe:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8001102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001106:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8001108:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
    break;
 800110e:	e7e5      	b.n	80010dc <wakeup+0x2c>
 8001110:	2300      	movs	r3, #0
 8001112:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8001116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	20000c70 	.word	0x20000c70

08001120 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8001122:	2200      	movs	r2, #0
 8001124:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001126:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8001128:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800112a:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	4770      	bx	lr
 8001130:	20000c70 	.word	0x20000c70
	...

08001140 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001140:	2200      	movs	r2, #0
 8001142:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8001146:	b410      	push	{r4}
 8001148:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800114a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800114c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	428a      	cmp	r2, r1
 8001152:	d2fb      	bcs.n	800114c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001158:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800115a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800115c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800115e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8001160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000c70 	.word	0x20000c70
 800116c:	00000000 	.word	0x00000000

08001170 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <chSchGoSleepS+0x24>)
 8001172:	6999      	ldr	r1, [r3, #24]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001174:	681a      	ldr	r2, [r3, #0]
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001176:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 8001178:	7708      	strb	r0, [r1, #28]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800117a:	2004      	movs	r0, #4
 800117c:	77c8      	strb	r0, [r1, #31]

  tqp->p_next = tp->p_next;
 800117e:	6810      	ldr	r0, [r2, #0]
 8001180:	6018      	str	r0, [r3, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001182:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001184:	6043      	str	r3, [r0, #4]
 8001186:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8001188:	4610      	mov	r0, r2
}
 800118a:	f85d 4b04 	ldr.w	r4, [sp], #4
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800118e:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8001190:	f7ff b89e 	b.w	80002d0 <_port_switch>
 8001194:	20000c70 	.word	0x20000c70
	...

080011a0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80011a0:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80011a2:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80011a4:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80011a6:	d012      	beq.n	80011ce <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 80011a8:	4c0c      	ldr	r4, [pc, #48]	; (80011dc <chSchGoSleepTimeoutS+0x3c>)
 80011aa:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <chSchGoSleepTimeoutS+0x40>)
 80011ac:	69a3      	ldr	r3, [r4, #24]
 80011ae:	4605      	mov	r5, r0
 80011b0:	a801      	add	r0, sp, #4
 80011b2:	f7ff ff45 	bl	8001040 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80011b6:	4628      	mov	r0, r5
 80011b8:	f7ff ffda 	bl	8001170 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80011bc:	9b04      	ldr	r3, [sp, #16]
 80011be:	b113      	cbz	r3, 80011c6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 80011c0:	a801      	add	r0, sp, #4
 80011c2:	f7ff ff5d 	bl	8001080 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 80011c6:	69a3      	ldr	r3, [r4, #24]
}
 80011c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80011ca:	b007      	add	sp, #28
 80011cc:	bd30      	pop	{r4, r5, pc}
 80011ce:	4c03      	ldr	r4, [pc, #12]	; (80011dc <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80011d0:	f7ff ffce 	bl	8001170 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 80011d4:	69a3      	ldr	r3, [r4, #24]
}
 80011d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80011d8:	b007      	add	sp, #28
 80011da:	bd30      	pop	{r4, r5, pc}
 80011dc:	20000c70 	.word	0x20000c70
 80011e0:	080010b1 	.word	0x080010b1
	...

080011f0 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80011f2:	b470      	push	{r4, r5, r6}
 80011f4:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80011f6:	699d      	ldr	r5, [r3, #24]
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 80011f8:	6241      	str	r1, [r0, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80011fa:	68a8      	ldr	r0, [r5, #8]
 80011fc:	68a1      	ldr	r1, [r4, #8]
 80011fe:	4281      	cmp	r1, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001200:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001204:	d80b      	bhi.n	800121e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001206:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8001208:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	4291      	cmp	r1, r2
 800120e:	d9fb      	bls.n	8001208 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001214:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001216:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001218:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800121a:	bc70      	pop	{r4, r5, r6}
 800121c:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800121e:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001220:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 8001222:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001224:	6891      	ldr	r1, [r2, #8]
 8001226:	4288      	cmp	r0, r1
 8001228:	d9fb      	bls.n	8001222 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800122a:	6850      	ldr	r0, [r2, #4]
 800122c:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800122e:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001230:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001232:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8001234:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001236:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8001238:	4629      	mov	r1, r5
 800123a:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800123c:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800123e:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8001240:	f7ff b846 	b.w	80002d0 <_port_switch>
 8001244:	20000c70 	.word	0x20000c70
	...

08001250 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <chSchIsPreemptionRequired+0x24>)
  tprio_t p2 = currp->p_prio;
 8001252:	699a      	ldr	r2, [r3, #24]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001254:	681b      	ldr	r3, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 8001256:	7fd1      	ldrb	r1, [r2, #31]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001258:	689b      	ldr	r3, [r3, #8]
  tprio_t p2 = currp->p_prio;
 800125a:	6890      	ldr	r0, [r2, #8]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800125c:	b921      	cbnz	r1, 8001268 <chSchIsPreemptionRequired+0x18>
 800125e:	4283      	cmp	r3, r0
 8001260:	bf34      	ite	cc
 8001262:	2000      	movcc	r0, #0
 8001264:	2001      	movcs	r0, #1
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 8001266:	4770      	bx	lr
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 8001268:	4283      	cmp	r3, r0
 800126a:	bf94      	ite	ls
 800126c:	2000      	movls	r0, #0
 800126e:	2001      	movhi	r0, #1
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000c70 	.word	0x20000c70
	...

08001280 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <chSchDoRescheduleBehind+0x3c>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001282:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 8001284:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 8001286:	b470      	push	{r4, r5, r6}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001288:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800128a:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800128c:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800128e:	2604      	movs	r6, #4
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001290:	7701      	strb	r1, [r0, #28]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001292:	2500      	movs	r5, #0
 8001294:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001296:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001298:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800129a:	77e6      	strb	r6, [r4, #31]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800129c:	7725      	strb	r5, [r4, #28]
 800129e:	e000      	b.n	80012a2 <chSchDoRescheduleBehind+0x22>
 80012a0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	428a      	cmp	r2, r1
 80012a6:	d2fb      	bcs.n	80012a0 <chSchDoRescheduleBehind+0x20>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80012ac:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 80012ae:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80012b0:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80012b2:	605c      	str	r4, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
}
 80012b4:	bc70      	pop	{r4, r5, r6}
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 80012b6:	f7ff b80b 	b.w	80002d0 <_port_switch>
 80012ba:	bf00      	nop
 80012bc:	20000c70 	.word	0x20000c70

080012c0 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80012c2:	6810      	ldr	r0, [r2, #0]

  tqp->p_next = tp->p_next;
 80012c4:	6803      	ldr	r3, [r0, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 80012c6:	b430      	push	{r4, r5}
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80012c8:	2101      	movs	r1, #1
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80012ca:	6994      	ldr	r4, [r2, #24]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80012cc:	605a      	str	r2, [r3, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 80012ce:	2500      	movs	r5, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80012d0:	7701      	strb	r1, [r0, #28]
 80012d2:	68a1      	ldr	r1, [r4, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80012d4:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80012d6:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 80012d8:	7725      	strb	r5, [r4, #28]
 80012da:	e000      	b.n	80012de <chSchDoRescheduleAhead+0x1e>
 80012dc:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	428a      	cmp	r2, r1
 80012e2:	d8fb      	bhi.n	80012dc <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80012e8:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80012ea:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 80012ec:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80012ee:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 80012f0:	bc30      	pop	{r4, r5}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80012f2:	f7fe bfed 	b.w	80002d0 <_port_switch>
 80012f6:	bf00      	nop
 80012f8:	20000c70 	.word	0x20000c70
 80012fc:	00000000 	.word	0x00000000

08001300 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <chSchRescheduleS+0x14>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8001306:	6892      	ldr	r2, [r2, #8]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	429a      	cmp	r2, r3
 800130c:	d800      	bhi.n	8001310 <chSchRescheduleS+0x10>
 800130e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8001310:	f7ff bfd6 	b.w	80012c0 <chSchDoRescheduleAhead>
 8001314:	20000c70 	.word	0x20000c70
	...

08001320 <chSchDoReschedule>:
void chSchDoReschedule(void) {

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <chSchDoReschedule+0x10>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	7fdb      	ldrb	r3, [r3, #31]
 8001326:	b10b      	cbz	r3, 800132c <chSchDoReschedule+0xc>
    chSchDoRescheduleBehind();
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 8001328:	f7ff bfca 	b.w	80012c0 <chSchDoRescheduleAhead>
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
    /* The thread consumed its time quantum so it is enqueued behind threads
       with same priority level, however, it acquires a new time quantum.*/
    chSchDoRescheduleBehind();
 800132c:	f7ff bfa8 	b.w	8001280 <chSchDoRescheduleBehind>
 8001330:	20000c70 	.word	0x20000c70
	...

08001340 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001342:	4c0f      	ldr	r4, [pc, #60]	; (8001380 <_thread_init+0x40>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001344:	6401      	str	r1, [r0, #64]	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001346:	6965      	ldr	r5, [r4, #20]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001348:	6081      	str	r1, [r0, #8]
  tp->p_state = CH_STATE_WTSTART;
 800134a:	2602      	movs	r6, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800134c:	2200      	movs	r2, #0
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800134e:	7706      	strb	r6, [r0, #28]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8001350:	f100 012c 	add.w	r1, r0, #44	; 0x2c

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8001354:	f04f 0e04 	mov.w	lr, #4
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001358:	2701      	movs	r7, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800135a:	f100 0628 	add.w	r6, r0, #40	; 0x28
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800135e:	6145      	str	r5, [r0, #20]
 8001360:	6104      	str	r4, [r0, #16]

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8001362:	f880 e01f 	strb.w	lr, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001366:	7787      	strb	r7, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001368:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800136a:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800136c:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 800136e:	6202      	str	r2, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001370:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 8001372:	6128      	str	r0, [r5, #16]
 8001374:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001376:	6286      	str	r6, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001378:	62c1      	str	r1, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800137a:	6301      	str	r1, [r0, #48]	; 0x30
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137e:	bf00      	nop
 8001380:	20000c70 	.word	0x20000c70
	...

08001390 <chThdCreateI>:

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001390:	3964      	subs	r1, #100	; 0x64
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8001392:	b5f0      	push	{r4, r5, r6, r7, lr}

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001394:	4401      	add	r1, r0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001396:	4e12      	ldr	r6, [pc, #72]	; (80013e0 <chThdCreateI+0x50>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001398:	4d12      	ldr	r5, [pc, #72]	; (80013e4 <chThdCreateI+0x54>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800139a:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800139c:	60c1      	str	r1, [r0, #12]
 800139e:	640b      	str	r3, [r1, #64]	; 0x40
 80013a0:	9b05      	ldr	r3, [sp, #20]
 80013a2:	644b      	str	r3, [r1, #68]	; 0x44
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80013a4:	2302      	movs	r3, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80013a6:	660d      	str	r5, [r1, #96]	; 0x60

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 80013a8:	f04f 0e04 	mov.w	lr, #4
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80013ac:	6082      	str	r2, [r0, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80013ae:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80013b0:	7703      	strb	r3, [r0, #28]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80013b2:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80013b6:	2300      	movs	r3, #0
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80013b8:	2501      	movs	r5, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80013ba:	f100 0128 	add.w	r1, r0, #40	; 0x28
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80013be:	6106      	str	r6, [r0, #16]
 80013c0:	6147      	str	r7, [r0, #20]

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 80013c2:	f880 e01f 	strb.w	lr, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80013c6:	7785      	strb	r5, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80013c8:	7743      	strb	r3, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80013ca:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80013cc:	6383      	str	r3, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 80013ce:	6203      	str	r3, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80013d0:	6183      	str	r3, [r0, #24]
  REG_INSERT(tp);
 80013d2:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80013d4:	6281      	str	r1, [r0, #40]	; 0x28
 80013d6:	6170      	str	r0, [r6, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80013d8:	62c2      	str	r2, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 80013da:	6302      	str	r2, [r0, #48]	; 0x30
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);

  return _thread_init(tp, prio);
}
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000c70 	.word	0x20000c70
 80013e4:	080002e9 	.word	0x080002e9
	...

080013f0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80013f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f2:	461d      	mov	r5, r3
 80013f4:	4604      	mov	r4, r0
 80013f6:	2320      	movs	r3, #32
 80013f8:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80013fc:	3964      	subs	r1, #100	; 0x64
 80013fe:	4401      	add	r1, r0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001400:	4e13      	ldr	r6, [pc, #76]	; (8001450 <chThdCreateStatic+0x60>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <chThdCreateStatic+0x64>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001404:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001406:	60c1      	str	r1, [r0, #12]
 8001408:	640d      	str	r5, [r1, #64]	; 0x40
 800140a:	9d06      	ldr	r5, [sp, #24]
 800140c:	644d      	str	r5, [r1, #68]	; 0x44
 800140e:	660b      	str	r3, [r1, #96]	; 0x60
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001410:	2502      	movs	r5, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8001412:	2304      	movs	r3, #4
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001414:	6082      	str	r2, [r0, #8]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001416:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001418:	7705      	strb	r5, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800141a:	77c3      	strb	r3, [r0, #31]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800141c:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800141e:	f100 032c 	add.w	r3, r0, #44	; 0x2c
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8001422:	f100 0228 	add.w	r2, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001426:	2101      	movs	r1, #1
 8001428:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800142a:	6106      	str	r6, [r0, #16]
 800142c:	6147      	str	r7, [r0, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800142e:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001430:	63c5      	str	r5, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8001432:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 8001434:	6205      	str	r5, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001436:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8001438:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800143a:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800143c:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800143e:	62c3      	str	r3, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 8001440:	6303      	str	r3, [r0, #48]	; 0x30
 8001442:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8001444:	f7ff fed4 	bl	80011f0 <chSchWakeupS>
 8001448:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800144c:	4620      	mov	r0, r4
 800144e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001450:	20000c70 	.word	0x20000c70
 8001454:	080002e9 	.word	0x080002e9
	...

08001460 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001460:	b508      	push	{r3, lr}
 8001462:	4601      	mov	r1, r0
 8001464:	2320      	movs	r3, #32
 8001466:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800146a:	2008      	movs	r0, #8
 800146c:	f7ff fe98 	bl	80011a0 <chSchGoSleepTimeoutS>
 8001470:	2300      	movs	r3, #0
 8001472:	f383 8811 	msr	BASEPRI, r3
 8001476:	bd08      	pop	{r3, pc}
	...

08001480 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8001480:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <chThdExitS+0x3c>)
 8001484:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001486:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 8001488:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800148a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800148e:	429d      	cmp	r5, r3
 8001490:	d007      	beq.n	80014a2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fe52 	bl	8001140 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800149c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800149e:	42ab      	cmp	r3, r5
 80014a0:	d1f7      	bne.n	8001492 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80014a2:	7f63      	ldrb	r3, [r4, #29]
 80014a4:	079b      	lsls	r3, r3, #30
 80014a6:	d104      	bne.n	80014b2 <chThdExitS+0x32>
    REG_REMOVE(tp);
 80014a8:	6963      	ldr	r3, [r4, #20]
 80014aa:	6922      	ldr	r2, [r4, #16]
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	6922      	ldr	r2, [r4, #16]
 80014b0:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80014b2:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 80014b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80014b8:	f7ff be5a 	b.w	8001170 <chSchGoSleepS>
 80014bc:	20000c70 	.word	0x20000c70

080014c0 <chThdExit>:
 80014c0:	2320      	movs	r3, #32
 80014c2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 80014c6:	f7ff bfdb 	b.w	8001480 <chThdExitS>
 80014ca:	bf00      	nop
 80014cc:	0000      	movs	r0, r0
	...

080014d0 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 80014d0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80014d2:	4c05      	ldr	r4, [pc, #20]	; (80014e8 <chThdSuspendS+0x18>)
 80014d4:	69a3      	ldr	r3, [r4, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 80014d6:	6003      	str	r3, [r0, #0]
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 80014d8:	4602      	mov	r2, r0
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 80014dc:	2003      	movs	r0, #3
 80014de:	f7ff fe47 	bl	8001170 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 80014e2:	69a3      	ldr	r3, [r4, #24]
}
 80014e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80014e6:	bd10      	pop	{r4, pc}
 80014e8:	20000c70 	.word	0x20000c70
 80014ec:	00000000 	.word	0x00000000

080014f0 <chThdSuspendTimeoutS>:
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <chThdSuspendTimeoutS+0x18>)
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, systime_t timeout) {
 80014f2:	4602      	mov	r2, r0
 80014f4:	699b      	ldr	r3, [r3, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  if (TIME_IMMEDIATE == timeout) {
 80014f6:	b121      	cbz	r1, 8001502 <chThdSuspendTimeoutS+0x12>
    return MSG_TIMEOUT;
  }

  *trp = tp;
 80014f8:	6003      	str	r3, [r0, #0]
  tp->p_u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80014fa:	2003      	movs	r0, #3
  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
  tp->p_u.wttrp = trp;
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80014fe:	f7ff be4f 	b.w	80011a0 <chSchGoSleepTimeoutS>
}
 8001502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001506:	4770      	bx	lr
 8001508:	20000c70 	.word	0x20000c70
 800150c:	00000000 	.word	0x00000000

08001510 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8001510:	6803      	ldr	r3, [r0, #0]
 8001512:	b12b      	cbz	r3, 8001520 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8001514:	2200      	movs	r2, #0
 8001516:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8001518:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 800151a:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800151c:	f7ff be10 	b.w	8001140 <chSchReadyI>
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
	...

08001530 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001530:	b169      	cbz	r1, 800154e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001534:	b410      	push	{r4}
 8001536:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001538:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800153a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800153c:	2004      	movs	r0, #4
 800153e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8001542:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8001544:	6053      	str	r3, [r2, #4]
}
 8001546:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800154a:	f7ff be29 	b.w	80011a0 <chSchGoSleepTimeoutS>
}
 800154e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001552:	4770      	bx	lr
 8001554:	20000c70 	.word	0x20000c70
	...

08001560 <chThdDequeueNextI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001560:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001562:	4290      	cmp	r0, r2
 8001564:	d00a      	beq.n	800157c <chThdDequeueNextI+0x1c>
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001566:	b410      	push	{r4}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001568:	6814      	ldr	r4, [r2, #0]
 800156a:	6004      	str	r4, [r0, #0]
 800156c:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800156e:	6063      	str	r3, [r4, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001570:	6251      	str	r1, [r2, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001572:	4610      	mov	r0, r2

  if (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001578:	f7ff bde2 	b.w	8001140 <chSchReadyI>
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001580:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001582:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8001584:	4298      	cmp	r0, r3
 8001586:	d00b      	beq.n	80015a0 <chThdDequeueAllI+0x20>
 8001588:	4604      	mov	r4, r0
 800158a:	460d      	mov	r5, r1
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	6022      	str	r2, [r4, #0]
 8001590:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001592:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001594:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001596:	f7ff fdd3 	bl	8001140 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	429c      	cmp	r4, r3
 800159e:	d1f5      	bne.n	800158c <chThdDequeueAllI+0xc>
 80015a0:	bd38      	pop	{r3, r4, r5, pc}
 80015a2:	bf00      	nop
	...

080015b0 <chTMStartMeasurementX>:
 80015b0:	4b01      	ldr	r3, [pc, #4]	; (80015b8 <chTMStartMeasurementX+0x8>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80015b4:	6083      	str	r3, [r0, #8]
 80015b6:	4770      	bx	lr
 80015b8:	e0001000 	.word	0xe0001000
 80015bc:	00000000 	.word	0x00000000

080015c0 <chTMStopMeasurementX>:
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80015c2:	490f      	ldr	r1, [pc, #60]	; (8001600 <chTMStopMeasurementX+0x40>)
 80015c4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80015c6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80015c8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80015ca:	6f8f      	ldr	r7, [r1, #120]	; 0x78
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 80015cc:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80015ce:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80015d0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 80015d8:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 80015da:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80015dc:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80015de:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80015e2:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80015e4:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 80015e8:	bf88      	it	hi
 80015ea:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 80015ec:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80015ee:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80015f0:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 80015f4:	bf38      	it	cc
 80015f6:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80015f8:	bcf0      	pop	{r4, r5, r6, r7}
 80015fa:	4770      	bx	lr
 80015fc:	e0001000 	.word	0xe0001000
 8001600:	20000c70 	.word	0x20000c70
	...

08001610 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8001610:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8001612:	4c0c      	ldr	r4, [pc, #48]	; (8001644 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8001614:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8001616:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8001618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800161c:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800161e:	2600      	movs	r6, #0
 8001620:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8001622:	67a3      	str	r3, [r4, #120]	; 0x78
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8001624:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8001626:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8001628:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800162a:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800162c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8001630:	f7ff ffbe 	bl	80015b0 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8001634:	4668      	mov	r0, sp
 8001636:	f7ff ffc3 	bl	80015c0 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800163a:	9b02      	ldr	r3, [sp, #8]
 800163c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800163e:	b006      	add	sp, #24
 8001640:	bdd0      	pop	{r4, r6, r7, pc}
 8001642:	bf00      	nop
 8001644:	20000c70 	.word	0x20000c70
	...

08001650 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001650:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001652:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001654:	6040      	str	r0, [r0, #4]
 8001656:	6083      	str	r3, [r0, #8]
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	0000      	movs	r0, r0
	...

08001660 <chMtxLockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001660:	4b30      	ldr	r3, [pc, #192]	; (8001724 <chMtxLockS+0xc4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001662:	6882      	ldr	r2, [r0, #8]
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8001664:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001666:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001668:	2a00      	cmp	r2, #0
 800166a:	d055      	beq.n	8001718 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800166c:	68a1      	ldr	r1, [r4, #8]
 800166e:	6893      	ldr	r3, [r2, #8]
 8001670:	428b      	cmp	r3, r1
 8001672:	4605      	mov	r5, r0
 8001674:	d206      	bcs.n	8001684 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001676:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8001678:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800167a:	2b06      	cmp	r3, #6
 800167c:	d033      	beq.n	80016e6 <chMtxLockS+0x86>
 800167e:	2b07      	cmp	r3, #7
 8001680:	d01d      	beq.n	80016be <chMtxLockS+0x5e>
 8001682:	b19b      	cbz	r3, 80016ac <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001684:	462b      	mov	r3, r5
 8001686:	e003      	b.n	8001690 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	68a2      	ldr	r2, [r4, #8]
 800168c:	4291      	cmp	r1, r2
 800168e:	d302      	bcc.n	8001696 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001690:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001692:	429d      	cmp	r5, r3
 8001694:	d1f8      	bne.n	8001688 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800169a:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800169c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800169e:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 80016a0:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 80016a2:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 80016a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80016a8:	f7ff bd62 	b.w	8001170 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80016ac:	e892 000a 	ldmia.w	r2, {r1, r3}
 80016b0:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80016b2:	6811      	ldr	r1, [r2, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 80016b4:	4610      	mov	r0, r2
 80016b6:	604b      	str	r3, [r1, #4]
 80016b8:	f7ff fd42 	bl	8001140 <chSchReadyI>
          break;
 80016bc:	e7e2      	b.n	8001684 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80016be:	e892 0009 	ldmia.w	r2, {r0, r3}
 80016c2:	6018      	str	r0, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80016c4:	6810      	ldr	r0, [r2, #0]
 80016c6:	6043      	str	r3, [r0, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80016c8:	6a56      	ldr	r6, [r2, #36]	; 0x24
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80016ca:	4633      	mov	r3, r6
 80016cc:	e002      	b.n	80016d4 <chMtxLockS+0x74>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80016ce:	6898      	ldr	r0, [r3, #8]
 80016d0:	4288      	cmp	r0, r1
 80016d2:	d302      	bcc.n	80016da <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80016d4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80016d6:	429e      	cmp	r6, r3
 80016d8:	d1f9      	bne.n	80016ce <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80016de:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80016e0:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	e7ce      	b.n	8001684 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80016e6:	e892 0009 	ldmia.w	r2, {r0, r3}
 80016ea:	6018      	str	r0, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80016ec:	6810      	ldr	r0, [r2, #0]
 80016ee:	6043      	str	r3, [r0, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80016f0:	6a56      	ldr	r6, [r2, #36]	; 0x24
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80016f2:	4633      	mov	r3, r6
 80016f4:	e002      	b.n	80016fc <chMtxLockS+0x9c>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80016f6:	6898      	ldr	r0, [r3, #8]
 80016f8:	4288      	cmp	r0, r1
 80016fa:	d302      	bcc.n	8001702 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80016fc:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80016fe:	429e      	cmp	r6, r3
 8001700:	d1f9      	bne.n	80016f6 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001706:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001708:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 800170a:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 800170c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800170e:	68a1      	ldr	r1, [r4, #8]
 8001710:	6893      	ldr	r3, [r2, #8]
 8001712:	428b      	cmp	r3, r1
 8001714:	d3af      	bcc.n	8001676 <chMtxLockS+0x16>
 8001716:	e7b5      	b.n	8001684 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8001718:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800171a:	60c3      	str	r3, [r0, #12]
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 800171c:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
 800171e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8001720:	bd70      	pop	{r4, r5, r6, pc}
 8001722:	bf00      	nop
 8001724:	20000c70 	.word	0x20000c70
	...

08001730 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8001730:	b508      	push	{r3, lr}
 8001732:	2320      	movs	r3, #32
 8001734:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 8001738:	f7ff ff92 	bl	8001660 <chMtxLockS>
 800173c:	2300      	movs	r3, #0
 800173e:	f383 8811 	msr	BASEPRI, r3
 8001742:	bd08      	pop	{r3, pc}
	...

08001750 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001752:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001754:	699d      	ldr	r5, [r3, #24]
 8001756:	2320      	movs	r3, #32
 8001758:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800175c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800175e:	68c3      	ldr	r3, [r0, #12]
 8001760:	63eb      	str	r3, [r5, #60]	; 0x3c

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001762:	4284      	cmp	r4, r0
 8001764:	d01d      	beq.n	80017a2 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001766:	6c29      	ldr	r1, [r5, #64]	; 0x40
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001768:	b14b      	cbz	r3, 800177e <chMtxUnlock+0x2e>
 800176a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800176c:	4293      	cmp	r3, r2
 800176e:	d003      	beq.n	8001778 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8001770:	6892      	ldr	r2, [r2, #8]
 8001772:	4291      	cmp	r1, r2
 8001774:	bf38      	it	cc
 8001776:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8001778:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f5      	bne.n	800176a <chMtxUnlock+0x1a>
 800177e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001780:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001782:	6be6      	ldr	r6, [r4, #60]	; 0x3c
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001784:	60a9      	str	r1, [r5, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001786:	4620      	mov	r0, r4
 8001788:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800178a:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 800178c:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 800178e:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8001790:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001792:	f7ff fcd5 	bl	8001140 <chSchReadyI>
      chSchRescheduleS();
 8001796:	f7ff fdb3 	bl	8001300 <chSchRescheduleS>
 800179a:	2300      	movs	r3, #0
 800179c:	f383 8811 	msr	BASEPRI, r3
 80017a0:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60a3      	str	r3, [r4, #8]
 80017a6:	2300      	movs	r3, #0
 80017a8:	f383 8811 	msr	BASEPRI, r3
 80017ac:	bd70      	pop	{r4, r5, r6, pc}
 80017ae:	bf00      	nop
 80017b0:	20000c70 	.word	0x20000c70
	...

080017c0 <chEvtUnregister>:
 80017c0:	2320      	movs	r3, #32
 80017c2:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 80017c6:	4602      	mov	r2, r0
 80017c8:	e002      	b.n	80017d0 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 80017ca:	428b      	cmp	r3, r1
 80017cc:	d007      	beq.n	80017de <chEvtUnregister+0x1e>
 80017ce:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
 80017d0:	6813      	ldr	r3, [r2, #0]
 80017d2:	4298      	cmp	r0, r3
 80017d4:	d1f9      	bne.n	80017ca <chEvtUnregister+0xa>
 80017d6:	2300      	movs	r3, #0
 80017d8:	f383 8811 	msr	BASEPRI, r3
 80017dc:	4770      	bx	lr
  /*lint -restore*/
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 80017de:	680b      	ldr	r3, [r1, #0]
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	2300      	movs	r3, #0
 80017e4:	f383 8811 	msr	BASEPRI, r3
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	0000      	movs	r0, r0
	...

080017f0 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80017f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80017f2:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80017f4:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80017f6:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80017f8:	6381      	str	r1, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80017fa:	d009      	beq.n	8001810 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80017fc:	2a0b      	cmp	r2, #11
 80017fe:	d000      	beq.n	8001802 <chEvtSignalI+0x12>
 8001800:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001802:	6a43      	ldr	r3, [r0, #36]	; 0x24

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8001804:	438b      	bics	r3, r1
 8001806:	d1fb      	bne.n	8001800 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800180c:	f7ff bc98 	b.w	8001140 <chSchReadyI>
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001810:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001812:	4219      	tst	r1, r3
 8001814:	d1f8      	bne.n	8001808 <chEvtSignalI+0x18>
 8001816:	4770      	bx	lr
	...

08001820 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001820:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001822:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001824:	42a0      	cmp	r0, r4
 8001826:	d00f      	beq.n	8001848 <chEvtBroadcastFlagsI+0x28>
 8001828:	4606      	mov	r6, r0
 800182a:	460d      	mov	r5, r1
  /*lint -restore*/
    elp->el_flags |= flags;
 800182c:	68e3      	ldr	r3, [r4, #12]
 800182e:	432b      	orrs	r3, r5
 8001830:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001832:	b115      	cbz	r5, 800183a <chEvtBroadcastFlagsI+0x1a>
 8001834:	6922      	ldr	r2, [r4, #16]
 8001836:	4213      	tst	r3, r2
 8001838:	d003      	beq.n	8001842 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800183a:	68a1      	ldr	r1, [r4, #8]
 800183c:	6860      	ldr	r0, [r4, #4]
 800183e:	f7ff ffd7 	bl	80017f0 <chEvtSignalI>
    }
    elp = elp->el_next;
 8001842:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001844:	42a6      	cmp	r6, r4
 8001846:	d1f1      	bne.n	800182c <chEvtBroadcastFlagsI+0xc>
 8001848:	bd70      	pop	{r4, r5, r6, pc}
 800184a:	bf00      	nop
 800184c:	0000      	movs	r0, r0
	...

08001850 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001850:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001854:	4806      	ldr	r0, [pc, #24]	; (8001870 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001856:	4907      	ldr	r1, [pc, #28]	; (8001874 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001858:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800185c:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001860:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001862:	600b      	str	r3, [r1, #0]
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20001c4f 	.word	0x20001c4f
 800186c:	20020000 	.word	0x20020000
 8001870:	20000ecc 	.word	0x20000ecc
 8001874:	20000ec8 	.word	0x20000ec8
	...

08001880 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8001880:	b410      	push	{r4}
 8001882:	2320      	movs	r3, #32
 8001884:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001888:	4c09      	ldr	r4, [pc, #36]	; (80018b0 <chCoreAlloc+0x30>)
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <chCoreAlloc+0x34>)
 800188c:	6822      	ldr	r2, [r4, #0]
 800188e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8001890:	1dc3      	adds	r3, r0, #7
 8001892:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001896:	1a89      	subs	r1, r1, r2
 8001898:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800189a:	bf9d      	ittte	ls
 800189c:	189b      	addls	r3, r3, r2
 800189e:	6023      	strls	r3, [r4, #0]

  return p;
 80018a0:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 80018a2:	2000      	movhi	r0, #0
 80018a4:	2300      	movs	r3, #0
 80018a6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 80018aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	20000ecc 	.word	0x20000ecc
 80018b4:	20000ec8 	.word	0x20000ec8
	...

080018c0 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <_heap_init+0x14>)
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <_heap_init+0x18>)
 80018c4:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 80018c6:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 80018ce:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 80018d0:	f7ff bebe 	b.w	8001650 <chMtxObjectInit>
 80018d4:	20000ed0 	.word	0x20000ed0
 80018d8:	08001881 	.word	0x08001881
 80018dc:	00000000 	.word	0x00000000

080018e0 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <SVC_Handler+0x1c>)
 80018e2:	6853      	ldr	r3, [r2, #4]
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80018ea:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80018ee:	3368      	adds	r3, #104	; 0x68
 80018f0:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80018f4:	2300      	movs	r3, #0
 80018f6:	f383 8811 	msr	BASEPRI, r3
 80018fa:	4770      	bx	lr
 80018fc:	e000ef30 	.word	0xe000ef30

08001900 <_port_irq_epilogue>:
 8001900:	2320      	movs	r3, #32
 8001902:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <_port_irq_epilogue+0x50>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800190e:	d102      	bne.n	8001916 <_port_irq_epilogue+0x16>
 8001910:	f383 8811 	msr	BASEPRI, r3
 8001914:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8001916:	b510      	push	{r4, lr}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8001918:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800191c:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8001922:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800192c:	f844 2c4c 	str.w	r2, [r4, #-76]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001930:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
 8001934:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001938:	f7ff fc8a 	bl	8001250 <chSchIsPreemptionRequired>
 800193c:	b118      	cbz	r0, 8001946 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <_port_irq_epilogue+0x58>)
 8001940:	f844 3c50 	str.w	r3, [r4, #-80]
 8001944:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <_port_irq_epilogue+0x5c>)
 8001948:	f844 3c50 	str.w	r3, [r4, #-80]
 800194c:	bd10      	pop	{r4, pc}
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00
 8001954:	e000ef30 	.word	0xe000ef30
 8001958:	080002f9 	.word	0x080002f9
 800195c:	080002fc 	.word	0x080002fc

08001960 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8001960:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 8001962:	f001 f925 	bl	8002bb0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 8001966:	480b      	ldr	r0, [pc, #44]	; (8001994 <halInit+0x34>)
 8001968:	f001 ff1a 	bl	80037a0 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
 800196c:	f000 fa90 	bl	8001e90 <adcInit>
#endif
#if (HAL_USE_DAC == TRUE) || defined(__DOXYGEN__)
  dacInit();
#endif
#if (HAL_USE_EXT == TRUE) || defined(__DOXYGEN__)
  extInit();
 8001970:	f000 faa6 	bl	8001ec0 <extInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 8001974:	f000 fad4 	bl	8001f20 <i2cInit>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
 8001978:	f000 fb22 	bl	8001fc0 <pwmInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 800197c:	f000 fd70 	bl	8002460 <spiInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 8001980:	f000 fdf6 	bl	8002570 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 8001984:	f000 fc24 	bl	80021d0 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8001988:	f003 fa6a 	bl	8004e60 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 800198c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8001990:	f000 b806 	b.w	80019a0 <stInit>
 8001994:	08007b30 	.word	0x08007b30
	...

080019a0 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 80019a0:	f001 bbae 	b.w	8003100 <st_lld_init>
	...

080019b0 <ibqObjectInit>:
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t infy, void *link) {
 80019b0:	b4f0      	push	{r4, r5, r6, r7}

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
  ibqp->brdptr   = bp;
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
 80019b2:	3204      	adds	r2, #4
                   bqnotify_t infy, void *link) {

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
 80019b4:	2400      	movs	r4, #0
  ibqp->brdptr   = bp;
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
 80019b6:	fb03 1702 	mla	r7, r3, r2, r1
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t infy, void *link) {
 80019ba:	9e04      	ldr	r6, [sp, #16]
 80019bc:	9d05      	ldr	r5, [sp, #20]

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
  ibqp->brdptr   = bp;
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
 80019be:	6147      	str	r7, [r0, #20]
  ibqp->bsize    = size + sizeof (size_t);
  ibqp->bn       = n;
  ibqp->buffers  = bp;
  ibqp->ptr      = NULL;
  ibqp->top      = NULL;
  ibqp->notify   = infy;
 80019c0:	62c6      	str	r6, [r0, #44]	; 0x2c
  ibqp->link     = link;
 80019c2:	6305      	str	r5, [r0, #48]	; 0x30
                   bqnotify_t infy, void *link) {

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
 80019c4:	6084      	str	r4, [r0, #8]
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize    = size + sizeof (size_t);
  ibqp->bn       = n;
  ibqp->buffers  = bp;
  ibqp->ptr      = NULL;
 80019c6:	6244      	str	r4, [r0, #36]	; 0x24
  ibqp->top      = NULL;
 80019c8:	6284      	str	r4, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80019ca:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 80019cc:	6040      	str	r0, [r0, #4]

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
  ibqp->brdptr   = bp;
 80019ce:	6101      	str	r1, [r0, #16]
  ibqp->bwrptr   = bp;
 80019d0:	60c1      	str	r1, [r0, #12]
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize    = size + sizeof (size_t);
 80019d2:	6182      	str	r2, [r0, #24]
  ibqp->bn       = n;
 80019d4:	61c3      	str	r3, [r0, #28]
  ibqp->buffers  = bp;
 80019d6:	6201      	str	r1, [r0, #32]
  ibqp->ptr      = NULL;
  ibqp->top      = NULL;
  ibqp->notify   = infy;
  ibqp->link     = link;
}
 80019d8:	bcf0      	pop	{r4, r5, r6, r7}
 80019da:	4770      	bx	lr
 80019dc:	0000      	movs	r0, r0
	...

080019e0 <ibqResetI>:
 */
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  ibqp->bcounter = 0;
 80019e0:	2200      	movs	r2, #0
  ibqp->brdptr   = ibqp->buffers;
 80019e2:	6a01      	ldr	r1, [r0, #32]
 80019e4:	6101      	str	r1, [r0, #16]
  ibqp->bwrptr   = ibqp->buffers;
 80019e6:	60c1      	str	r1, [r0, #12]
 */
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  ibqp->bcounter = 0;
 80019e8:	6082      	str	r2, [r0, #8]
  ibqp->brdptr   = ibqp->buffers;
  ibqp->bwrptr   = ibqp->buffers;
  ibqp->ptr      = NULL;
 80019ea:	6242      	str	r2, [r0, #36]	; 0x24
  ibqp->top      = NULL;
 80019ec:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 80019ee:	f06f 0101 	mvn.w	r1, #1
 80019f2:	f7ff bdc5 	b.w	8001580 <chThdDequeueAllI>
 80019f6:	bf00      	nop
	...

08001a00 <ibqGetEmptyBufferI>:
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8001a00:	68c3      	ldr	r3, [r0, #12]
 8001a02:	6902      	ldr	r2, [r0, #16]
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d001      	beq.n	8001a0c <ibqGetEmptyBufferI+0xc>
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 8001a08:	1d18      	adds	r0, r3, #4
}
 8001a0a:	4770      	bx	lr
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8001a0c:	6882      	ldr	r2, [r0, #8]
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d0fa      	beq.n	8001a08 <ibqGetEmptyBufferI+0x8>
    return NULL;
 8001a12:	2000      	movs	r0, #0
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
	...

08001a20 <ibqPostFullBufferI>:
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @iclass
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 8001a20:	b430      	push	{r4, r5}

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8001a22:	68c4      	ldr	r4, [r0, #12]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 8001a24:	6945      	ldr	r5, [r0, #20]

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8001a26:	6021      	str	r1, [r4, #0]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
 8001a28:	6983      	ldr	r3, [r0, #24]

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 8001a2a:	6882      	ldr	r2, [r0, #8]
  ibqp->bwrptr += ibqp->bsize;
 8001a2c:	4423      	add	r3, r4
  if (ibqp->bwrptr >= ibqp->btop) {
 8001a2e:	42ab      	cmp	r3, r5
  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
 8001a30:	60c3      	str	r3, [r0, #12]

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 8001a32:	f102 0201 	add.w	r2, r2, #1
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
    ibqp->bwrptr = ibqp->buffers;
 8001a36:	bf28      	it	cs
 8001a38:	6a03      	ldrcs	r3, [r0, #32]

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 8001a3a:	6082      	str	r2, [r0, #8]
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
    ibqp->bwrptr = ibqp->buffers;
 8001a3c:	bf28      	it	cs
 8001a3e:	60c3      	strcs	r3, [r0, #12]
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 8001a40:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
}
 8001a42:	bc30      	pop	{r4, r5}
 8001a44:	f7ff bd8c 	b.w	8001560 <chThdDequeueNextI>
	...

08001a50 <ibqGetFullBufferTimeoutS>:
   * @retval MSG_RESET    if the queue has been reset.
   *
   * @sclass
   */
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 systime_t timeout) {
 8001a50:	b538      	push	{r3, r4, r5, lr}
 8001a52:	4604      	mov	r4, r0
 8001a54:	460d      	mov	r5, r1

  osalDbgCheckClassS();

  while (ibqIsEmptyI(ibqp)) {
 8001a56:	e003      	b.n	8001a60 <ibqGetFullBufferTimeoutS+0x10>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 8001a58:	f7ff fd6a 	bl	8001530 <chThdEnqueueTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
    if (msg < MSG_OK) {
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	db0b      	blt.n	8001a78 <ibqGetFullBufferTimeoutS+0x28>
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 systime_t timeout) {

  osalDbgCheckClassS();

  while (ibqIsEmptyI(ibqp)) {
 8001a60:	68a3      	ldr	r3, [r4, #8]
 8001a62:	4629      	mov	r1, r5
 8001a64:	4620      	mov	r0, r4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f6      	beq.n	8001a58 <ibqGetFullBufferTimeoutS+0x8>
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001a6a:	6923      	ldr	r3, [r4, #16]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001a6c:	681a      	ldr	r2, [r3, #0]
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001a6e:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001a70:	441a      	add	r2, r3
 8001a72:	62a2      	str	r2, [r4, #40]	; 0x28
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001a74:	6263      	str	r3, [r4, #36]	; 0x24
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001a76:	2000      	movs	r0, #0

  return MSG_OK;
}
 8001a78:	bd38      	pop	{r3, r4, r5, pc}
 8001a7a:	bf00      	nop
 8001a7c:	0000      	movs	r0, r0
	...

08001a80 <ibqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, systime_t timeout) {
 8001a80:	b538      	push	{r3, r4, r5, lr}
 8001a82:	4604      	mov	r4, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001a84:	2320      	movs	r3, #32
 8001a86:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
 8001a8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001a8c:	b1ed      	cbz	r5, 8001aca <ibqGetTimeout+0x4a>
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 8001a8e:	462b      	mov	r3, r5
  ibqp->ptr++;

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 8001a90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 8001a92:	f813 5b01 	ldrb.w	r5, [r3], #1
  ibqp->ptr++;
 8001a96:	6263      	str	r3, [r4, #36]	; 0x24

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d311      	bcc.n	8001ac0 <ibqGetTimeout+0x40>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
  if (ibqp->brdptr >= ibqp->btop) {
 8001a9c:	f104 0010 	add.w	r0, r4, #16
 8001aa0:	c80b      	ldmia	r0, {r0, r1, r3}
  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
 8001aa2:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 8001aa4:	428b      	cmp	r3, r1

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8001aa6:	68a2      	ldr	r2, [r4, #8]
  ibqp->brdptr += ibqp->bsize;
 8001aa8:	6123      	str	r3, [r4, #16]
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
 8001aaa:	bf24      	itt	cs
 8001aac:	6a23      	ldrcs	r3, [r4, #32]
 8001aae:	6123      	strcs	r3, [r4, #16]

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8001ab0:	3a01      	subs	r2, #1

  /* No "current" buffer.*/
  ibqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 8001ab2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8001ab4:	60a2      	str	r2, [r4, #8]
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	6262      	str	r2, [r4, #36]	; 0x24

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 8001aba:	b10b      	cbz	r3, 8001ac0 <ibqGetTimeout+0x40>
    ibqp->notify(ibqp);
 8001abc:	4620      	mov	r0, r4
 8001abe:	4798      	blx	r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr >= ibqp->top) {
    ibqReleaseEmptyBufferS(ibqp);
  }

  osalSysUnlock();
  return msg;
 8001ac6:	4628      	mov	r0, r5
}
 8001ac8:	bd38      	pop	{r3, r4, r5, pc}

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8001aca:	f7ff ffc1 	bl	8001a50 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 8001ace:	b908      	cbnz	r0, 8001ad4 <ibqGetTimeout+0x54>
 8001ad0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001ad2:	e7dc      	b.n	8001a8e <ibqGetTimeout+0xe>
 8001ad4:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();
      return msg;
 8001ad8:	bd38      	pop	{r3, r4, r5, pc}
 8001ada:	bf00      	nop
 8001adc:	0000      	movs	r0, r0
	...

08001ae0 <ibqReadTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, systime_t timeout) {
 8001ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae4:	4604      	mov	r4, r0
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	460d      	mov	r5, r1
 8001aea:	4616      	mov	r6, r2
 8001aec:	4699      	mov	r9, r3
 8001aee:	f04f 0820 	mov.w	r8, #32
 8001af2:	f388 8811 	msr	BASEPRI, r8
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.vt_systime;
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <ibqReadTimeout+0x10c>)

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 8001af8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  systime_t deadline;

  osalSysLock();

  /* Time window for the whole operation.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001afc:	444b      	add	r3, r9
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, systime_t timeout) {
  size_t r = 0;
 8001afe:	f04f 0a00 	mov.w	sl, #0
  systime_t deadline;

  osalSysLock();

  /* Time window for the whole operation.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001b02:	9301      	str	r3, [sp, #4]
    if (ibqp->ptr == NULL) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001b04:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8001b08:	9300      	str	r3, [sp, #0]
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 8001b0a:	4657      	mov	r7, sl

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 8001b0c:	2900      	cmp	r1, #0
 8001b0e:	d042      	beq.n	8001b96 <ibqReadTimeout+0xb6>
        return r;
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8001b10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (size > (n - r)) {
 8001b12:	ebca 0b06 	rsb	fp, sl, r6
        return r;
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8001b16:	1a5b      	subs	r3, r3, r1
 8001b18:	459b      	cmp	fp, r3
 8001b1a:	bf28      	it	cs
 8001b1c:	469b      	movcs	fp, r3
      size = n - r;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
 8001b1e:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8001b22:	d948      	bls.n	8001bb6 <ibqReadTimeout+0xd6>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
 8001b24:	f101 0240 	add.w	r2, r1, #64	; 0x40
 8001b28:	462b      	mov	r3, r5
 8001b2a:	f8d1 c000 	ldr.w	ip, [r1]
 8001b2e:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8001b32:	6888      	ldr	r0, [r1, #8]
 8001b34:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8001b38:	f8c3 b00c 	str.w	fp, [r3, #12]
 8001b3c:	3110      	adds	r1, #16
 8001b3e:	4291      	cmp	r1, r2
 8001b40:	f8c3 c000 	str.w	ip, [r3]
 8001b44:	f8c3 e004 	str.w	lr, [r3, #4]
 8001b48:	6098      	str	r0, [r3, #8]
 8001b4a:	f103 0310 	add.w	r3, r3, #16
 8001b4e:	d1ec      	bne.n	8001b2a <ibqReadTimeout+0x4a>
      bp        += 64U;
      ibqp->ptr += 64U;
 8001b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b52:	3340      	adds	r3, #64	; 0x40
    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
      bp        += 64U;
 8001b54:	3540      	adds	r5, #64	; 0x40
      ibqp->ptr += 64U;
      r         += 64U;
 8001b56:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
      bp        += 64U;
      ibqp->ptr += 64U;
 8001b5a:	6263      	str	r3, [r4, #36]	; 0x24
      ibqp->ptr += size;
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8001b5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d810      	bhi.n	8001b84 <ibqReadTimeout+0xa4>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
  if (ibqp->brdptr >= ibqp->btop) {
 8001b62:	f104 0110 	add.w	r1, r4, #16
 8001b66:	c90e      	ldmia	r1, {r1, r2, r3}
  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
 8001b68:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 8001b6a:	4293      	cmp	r3, r2
  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
 8001b6c:	6123      	str	r3, [r4, #16]

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8001b6e:	68a0      	ldr	r0, [r4, #8]
  ibqp->brdptr += ibqp->bsize;
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
 8001b70:	bf24      	itt	cs
 8001b72:	6a23      	ldrcs	r3, [r4, #32]
 8001b74:	6123      	strcs	r3, [r4, #16]

  /* No "current" buffer.*/
  ibqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 8001b76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 8001b78:	6267      	str	r7, [r4, #36]	; 0x24

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8001b7a:	3801      	subs	r0, #1
 8001b7c:	60a0      	str	r0, [r4, #8]

  /* No "current" buffer.*/
  ibqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 8001b7e:	b10b      	cbz	r3, 8001b84 <ibqReadTimeout+0xa4>
    ibqp->notify(ibqp);
 8001b80:	4620      	mov	r0, r4
 8001b82:	4798      	blx	r3
 8001b84:	f387 8811 	msr	BASEPRI, r7
      ibqReleaseEmptyBufferS(ibqp);
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (r >= n) {
 8001b88:	45b2      	cmp	sl, r6
 8001b8a:	d227      	bcs.n	8001bdc <ibqReadTimeout+0xfc>
 8001b8c:	f388 8811 	msr	BASEPRI, r8

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 8001b90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b92:	2900      	cmp	r1, #0
 8001b94:	d1bc      	bne.n	8001b10 <ibqReadTimeout+0x30>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001b96:	9b00      	ldr	r3, [sp, #0]
 8001b98:	3303      	adds	r3, #3
 8001b9a:	d816      	bhi.n	8001bca <ibqReadTimeout+0xea>
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <ibqReadTimeout+0x10c>)
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001b9e:	9a01      	ldr	r2, [sp, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	1ad3      	subs	r3, r2, r3

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8001ba4:	4599      	cmp	r9, r3
 8001ba6:	d31d      	bcc.n	8001be4 <ibqReadTimeout+0x104>
          osalSysUnlock();
          return r;
        }
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4620      	mov	r0, r4
 8001bac:	f7ff ff50 	bl	8001a50 <ibqGetFullBufferTimeoutS>
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8001bb0:	b988      	cbnz	r0, 8001bd6 <ibqReadTimeout+0xf6>
 8001bb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001bb4:	e7ac      	b.n	8001b10 <ibqReadTimeout+0x30>
      bp        += 64U;
      ibqp->ptr += 64U;
      r         += 64U;
    }
    else {
      memcpy(bp, ibqp->ptr, size);
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	465a      	mov	r2, fp
 8001bba:	f7ff f891 	bl	8000ce0 <memcpy>
      bp        += size;
      ibqp->ptr += size;
 8001bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bc0:	445b      	add	r3, fp
      r         += size;
 8001bc2:	44da      	add	sl, fp
      ibqp->ptr += 64U;
      r         += 64U;
    }
    else {
      memcpy(bp, ibqp->ptr, size);
      bp        += size;
 8001bc4:	445d      	add	r5, fp
      ibqp->ptr += size;
 8001bc6:	6263      	str	r3, [r4, #36]	; 0x24
 8001bc8:	e7c8      	b.n	8001b5c <ibqReadTimeout+0x7c>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8001bca:	4649      	mov	r1, r9
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f7ff ff3f 	bl	8001a50 <ibqGetFullBufferTimeoutS>
        }
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8001bd2:	2800      	cmp	r0, #0
 8001bd4:	d0ed      	beq.n	8001bb2 <ibqReadTimeout+0xd2>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f383 8811 	msr	BASEPRI, r3
    if (r >= n) {
      return r;
    }
    osalSysLock();
  }
}
 8001bdc:	4650      	mov	r0, sl
 8001bde:	b003      	add	sp, #12
 8001be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001be4:	f381 8811 	msr	BASEPRI, r1
        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
          osalSysUnlock();
          return r;
 8001be8:	e7f8      	b.n	8001bdc <ibqReadTimeout+0xfc>
 8001bea:	bf00      	nop
 8001bec:	20000c70 	.word	0x20000c70

08001bf0 <obqObjectInit>:
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t onfy, void *link) {
 8001bf0:	b4f0      	push	{r4, r5, r6, r7}

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
  obqp->brdptr   = bp;
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 8001bf2:	3204      	adds	r2, #4
  obqp->bsize    = size + sizeof (size_t);
  obqp->bn       = n;
  obqp->buffers  = bp;
  obqp->ptr      = NULL;
 8001bf4:	2400      	movs	r4, #0

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
  obqp->brdptr   = bp;
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 8001bf6:	fb02 1703 	mla	r7, r2, r3, r1
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t onfy, void *link) {
 8001bfa:	9e04      	ldr	r6, [sp, #16]
 8001bfc:	9d05      	ldr	r5, [sp, #20]

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
  obqp->brdptr   = bp;
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 8001bfe:	6147      	str	r7, [r0, #20]
  obqp->bsize    = size + sizeof (size_t);
  obqp->bn       = n;
  obqp->buffers  = bp;
  obqp->ptr      = NULL;
  obqp->top      = NULL;
  obqp->notify   = onfy;
 8001c00:	62c6      	str	r6, [r0, #44]	; 0x2c
  obqp->link     = link;
 8001c02:	6305      	str	r5, [r0, #48]	; 0x30
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
  obqp->bsize    = size + sizeof (size_t);
  obqp->bn       = n;
  obqp->buffers  = bp;
  obqp->ptr      = NULL;
 8001c04:	6244      	str	r4, [r0, #36]	; 0x24
  obqp->top      = NULL;
 8001c06:	6284      	str	r4, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001c08:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001c0a:	6040      	str	r0, [r0, #4]
                   bqnotify_t onfy, void *link) {

  osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
 8001c0c:	6083      	str	r3, [r0, #8]
  obqp->brdptr   = bp;
 8001c0e:	6101      	str	r1, [r0, #16]
  obqp->bwrptr   = bp;
 8001c10:	60c1      	str	r1, [r0, #12]
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
  obqp->bsize    = size + sizeof (size_t);
 8001c12:	6182      	str	r2, [r0, #24]
  obqp->bn       = n;
 8001c14:	61c3      	str	r3, [r0, #28]
  obqp->buffers  = bp;
 8001c16:	6201      	str	r1, [r0, #32]
  obqp->ptr      = NULL;
  obqp->top      = NULL;
  obqp->notify   = onfy;
  obqp->link     = link;
}
 8001c18:	bcf0      	pop	{r4, r5, r6, r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	0000      	movs	r0, r0
	...

08001c20 <obqResetI>:
void obqResetI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();

  obqp->bcounter = bqSizeX(obqp);
  obqp->brdptr   = obqp->buffers;
 8001c20:	6a01      	ldr	r1, [r0, #32]
 8001c22:	6101      	str	r1, [r0, #16]
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqResetI(output_buffers_queue_t *obqp) {
 8001c24:	b410      	push	{r4}
  osalDbgCheckClassI();

  obqp->bcounter = bqSizeX(obqp);
  obqp->brdptr   = obqp->buffers;
  obqp->bwrptr   = obqp->buffers;
  obqp->ptr      = NULL;
 8001c26:	2200      	movs	r2, #0
 */
void obqResetI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();

  obqp->bcounter = bqSizeX(obqp);
 8001c28:	69c4      	ldr	r4, [r0, #28]
 8001c2a:	6084      	str	r4, [r0, #8]
  obqp->brdptr   = obqp->buffers;
  obqp->bwrptr   = obqp->buffers;
 8001c2c:	60c1      	str	r1, [r0, #12]
  obqp->ptr      = NULL;
 8001c2e:	6242      	str	r2, [r0, #36]	; 0x24
  obqp->top      = NULL;
 8001c30:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8001c32:	f06f 0101 	mvn.w	r1, #1
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
}
 8001c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c3a:	f7ff bca1 	b.w	8001580 <chThdDequeueAllI>
 8001c3e:	bf00      	nop

08001c40 <obqGetFullBufferI>:
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8001c40:	6903      	ldr	r3, [r0, #16]
 8001c42:	68c2      	ldr	r2, [r0, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d004      	beq.n	8001c52 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f850 3b04 	ldr.w	r3, [r0], #4
 8001c4e:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 8001c50:	4770      	bx	lr
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8001c52:	6882      	ldr	r2, [r0, #8]
 8001c54:	2a00      	cmp	r2, #0
 8001c56:	d0f7      	beq.n	8001c48 <obqGetFullBufferI+0x8>
    return NULL;
 8001c58:	2000      	movs	r0, #0
 8001c5a:	4770      	bx	lr
 8001c5c:	0000      	movs	r0, r0
	...

08001c60 <obqReleaseEmptyBufferI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 8001c60:	b410      	push	{r4}
  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
  obqp->brdptr += obqp->bsize;
 8001c62:	6983      	ldr	r3, [r0, #24]
 8001c64:	6904      	ldr	r4, [r0, #16]
  if (obqp->brdptr >= obqp->btop) {
 8001c66:	6941      	ldr	r1, [r0, #20]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8001c68:	6882      	ldr	r2, [r0, #8]
  obqp->brdptr += obqp->bsize;
 8001c6a:	4423      	add	r3, r4
  if (obqp->brdptr >= obqp->btop) {
 8001c6c:	428b      	cmp	r3, r1
  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
  obqp->brdptr += obqp->bsize;
 8001c6e:	6103      	str	r3, [r0, #16]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8001c70:	f102 0201 	add.w	r2, r2, #1
  obqp->brdptr += obqp->bsize;
  if (obqp->brdptr >= obqp->btop) {
    obqp->brdptr = obqp->buffers;
 8001c74:	bf28      	it	cs
 8001c76:	6a03      	ldrcs	r3, [r0, #32]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8001c78:	6082      	str	r2, [r0, #8]
  obqp->brdptr += obqp->bsize;
  if (obqp->brdptr >= obqp->btop) {
    obqp->brdptr = obqp->buffers;
 8001c7a:	bf28      	it	cs
 8001c7c:	6103      	strcs	r3, [r0, #16]
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 8001c7e:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
}
 8001c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c84:	f7ff bc6c 	b.w	8001560 <chThdDequeueNextI>
	...

08001c90 <obqGetEmptyBufferTimeoutS>:
   * @retval MSG_RESET    if the queue has been reset.
   *
   * @sclass
   */
  msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                  systime_t timeout) {
 8001c90:	b538      	push	{r3, r4, r5, lr}
 8001c92:	4604      	mov	r4, r0
 8001c94:	460d      	mov	r5, r1

  osalDbgCheckClassS();

  while (obqIsFullI(obqp)) {
 8001c96:	e003      	b.n	8001ca0 <obqGetEmptyBufferTimeoutS+0x10>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 8001c98:	f7ff fc4a 	bl	8001530 <chThdEnqueueTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
    if (msg < MSG_OK) {
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	db0b      	blt.n	8001cb8 <obqGetEmptyBufferTimeoutS+0x28>
  msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                  systime_t timeout) {

  osalDbgCheckClassS();

  while (obqIsFullI(obqp)) {
 8001ca0:	68a3      	ldr	r3, [r4, #8]
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f6      	beq.n	8001c98 <obqGetEmptyBufferTimeoutS+0x8>
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001caa:	68e2      	ldr	r2, [r4, #12]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001cac:	69a3      	ldr	r3, [r4, #24]
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001cae:	1d11      	adds	r1, r2, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001cb0:	4413      	add	r3, r2
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001cb2:	6261      	str	r1, [r4, #36]	; 0x24
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001cb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8001cb6:	2000      	movs	r0, #0

  return MSG_OK;
}
 8001cb8:	bd38      	pop	{r3, r4, r5, pc}
 8001cba:	bf00      	nop
 8001cbc:	0000      	movs	r0, r0
	...

08001cc0 <obqPutTimeout>:
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    systime_t timeout) {
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	460e      	mov	r6, r1
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 8001ccc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001cce:	b1fd      	cbz	r5, 8001d10 <obqPutTimeout+0x50>
      return msg;
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
 8001cd0:	702e      	strb	r6, [r5, #0]
  obqp->ptr++;
 8001cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8001cd4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
  obqp->ptr++;
 8001cd6:	3301      	adds	r3, #1

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8001cd8:	4293      	cmp	r3, r2
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
  obqp->ptr++;
 8001cda:	6263      	str	r3, [r4, #36]	; 0x24

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8001cdc:	d314      	bcc.n	8001d08 <obqPutTimeout+0x48>
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8001cde:	69a2      	ldr	r2, [r4, #24]
 8001ce0:	68e1      	ldr	r1, [r4, #12]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
  if (obqp->bwrptr >= obqp->btop) {
 8001ce2:	6960      	ldr	r0, [r4, #20]
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8001ce4:	3a04      	subs	r2, #4
 8001ce6:	600a      	str	r2, [r1, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 8001ce8:	69a3      	ldr	r3, [r4, #24]

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001cea:	68a2      	ldr	r2, [r4, #8]
  obqp->bwrptr += obqp->bsize;
 8001cec:	440b      	add	r3, r1
  if (obqp->bwrptr >= obqp->btop) {
 8001cee:	4283      	cmp	r3, r0
  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 8001cf0:	60e3      	str	r3, [r4, #12]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
 8001cf2:	bf24      	itt	cs
 8001cf4:	6a23      	ldrcs	r3, [r4, #32]
 8001cf6:	60e3      	strcs	r3, [r4, #12]

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001cf8:	3a01      	subs	r2, #1

  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001cfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001cfc:	60a2      	str	r2, [r4, #8]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 8001cfe:	2200      	movs	r2, #0
 8001d00:	6262      	str	r2, [r4, #36]	; 0x24

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001d02:	b10b      	cbz	r3, 8001d08 <obqPutTimeout+0x48>
    obqp->notify(obqp);
 8001d04:	4620      	mov	r0, r4
 8001d06:	4798      	blx	r3
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f380 8811 	msr	BASEPRI, r0
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
  }

  osalSysUnlock();
  return MSG_OK;
}
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001d10:	4611      	mov	r1, r2
 8001d12:	f7ff ffbd 	bl	8001c90 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8001d16:	b908      	cbnz	r0, 8001d1c <obqPutTimeout+0x5c>
 8001d18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001d1a:	e7d9      	b.n	8001cd0 <obqPutTimeout+0x10>
 8001d1c:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();
      return msg;
 8001d20:	bd70      	pop	{r4, r5, r6, pc}
 8001d22:	bf00      	nop
	...

08001d30 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, systime_t timeout) {
 8001d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d34:	4605      	mov	r5, r0
 8001d36:	b083      	sub	sp, #12
 8001d38:	4617      	mov	r7, r2
 8001d3a:	469a      	mov	sl, r3
 8001d3c:	f04f 0920 	mov.w	r9, #32
 8001d40:	f389 8811 	msr	BASEPRI, r9
 8001d44:	4b3d      	ldr	r3, [pc, #244]	; (8001e3c <obqWriteTimeout+0x10c>)

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8001d46:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  systime_t deadline;

  osalSysLock();

  /* Time window for the whole operation.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001d4a:	eb0a 0302 	add.w	r3, sl, r2
 8001d4e:	9301      	str	r3, [sp, #4]
    if (obqp->ptr == NULL) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001d50:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, systime_t timeout) {
  size_t w = 0;
 8001d54:	f04f 0b00 	mov.w	fp, #0
    if (obqp->ptr == NULL) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001d58:	9300      	str	r3, [sp, #0]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	46d8      	mov	r8, fp
 8001d5e:	460f      	mov	r7, r1
 8001d60:	461e      	mov	r6, r3

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8001d62:	2800      	cmp	r0, #0
 8001d64:	d041      	beq.n	8001dea <obqWriteTimeout+0xba>
        return w;
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8001d66:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    if (size > (n - w)) {
 8001d68:	ebcb 0406 	rsb	r4, fp, r6
        return w;
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8001d6c:	1a12      	subs	r2, r2, r0
 8001d6e:	4294      	cmp	r4, r2
 8001d70:	bf28      	it	cs
 8001d72:	4614      	movcs	r4, r2
      size = n - w;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
 8001d74:	2c40      	cmp	r4, #64	; 0x40
 8001d76:	d947      	bls.n	8001e08 <obqWriteTimeout+0xd8>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
 8001d78:	4639      	mov	r1, r7
 8001d7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d7e:	680f      	ldr	r7, [r1, #0]
 8001d80:	684c      	ldr	r4, [r1, #4]
 8001d82:	688a      	ldr	r2, [r1, #8]
 8001d84:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8001d88:	f8c0 e00c 	str.w	lr, [r0, #12]
 8001d8c:	3110      	adds	r1, #16
 8001d8e:	4299      	cmp	r1, r3
 8001d90:	6007      	str	r7, [r0, #0]
 8001d92:	6044      	str	r4, [r0, #4]
 8001d94:	6082      	str	r2, [r0, #8]
 8001d96:	f100 0010 	add.w	r0, r0, #16
 8001d9a:	d1f0      	bne.n	8001d7e <obqWriteTimeout+0x4e>
      bp        += 64U;
      obqp->ptr += 64U;
 8001d9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001d9e:	3240      	adds	r2, #64	; 0x40
    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
      bp        += 64U;
 8001da0:	460f      	mov	r7, r1
      obqp->ptr += 64U;
      w         += 64U;
 8001da2:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
      bp        += 64U;
      obqp->ptr += 64U;
 8001da6:	626a      	str	r2, [r5, #36]	; 0x24
      obqp->ptr += size;
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8001da8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001daa:	4291      	cmp	r1, r2
 8001dac:	d814      	bhi.n	8001dd8 <obqWriteTimeout+0xa8>
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8001dae:	69a9      	ldr	r1, [r5, #24]
 8001db0:	68ec      	ldr	r4, [r5, #12]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
  if (obqp->bwrptr >= obqp->btop) {
 8001db2:	6968      	ldr	r0, [r5, #20]
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8001db4:	3904      	subs	r1, #4
 8001db6:	6021      	str	r1, [r4, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 8001db8:	69aa      	ldr	r2, [r5, #24]

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001dba:	68a9      	ldr	r1, [r5, #8]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 8001dbc:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 8001dc0:	4422      	add	r2, r4
  if (obqp->bwrptr >= obqp->btop) {
 8001dc2:	4282      	cmp	r2, r0
  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 8001dc4:	60ea      	str	r2, [r5, #12]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
 8001dc6:	bf24      	itt	cs
 8001dc8:	6a2a      	ldrcs	r2, [r5, #32]
 8001dca:	60ea      	strcs	r2, [r5, #12]

  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001dcc:	6aea      	ldr	r2, [r5, #44]	; 0x2c

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001dce:	3901      	subs	r1, #1
 8001dd0:	60a9      	str	r1, [r5, #8]

  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001dd2:	b10a      	cbz	r2, 8001dd8 <obqWriteTimeout+0xa8>
    obqp->notify(obqp);
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	4790      	blx	r2
 8001dd8:	f388 8811 	msr	BASEPRI, r8
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (w >= n) {
 8001ddc:	45b3      	cmp	fp, r6
 8001dde:	d226      	bcs.n	8001e2e <obqWriteTimeout+0xfe>
 8001de0:	f389 8811 	msr	BASEPRI, r9

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8001de4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d1bd      	bne.n	8001d66 <obqWriteTimeout+0x36>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001dea:	9b00      	ldr	r3, [sp, #0]
 8001dec:	3303      	adds	r3, #3
 8001dee:	d815      	bhi.n	8001e1c <obqWriteTimeout+0xec>
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <obqWriteTimeout+0x10c>)
 8001df2:	6a99      	ldr	r1, [r3, #40]	; 0x28
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001df4:	9b01      	ldr	r3, [sp, #4]
 8001df6:	1a59      	subs	r1, r3, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8001df8:	458a      	cmp	sl, r1
 8001dfa:	d31c      	bcc.n	8001e36 <obqWriteTimeout+0x106>
          osalSysUnlock();
          return w;
        }
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	f7ff ff47 	bl	8001c90 <obqGetEmptyBufferTimeoutS>
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8001e02:	b988      	cbnz	r0, 8001e28 <obqWriteTimeout+0xf8>
 8001e04:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001e06:	e7ae      	b.n	8001d66 <obqWriteTimeout+0x36>
      bp        += 64U;
      obqp->ptr += 64U;
      w         += 64U;
    }
    else {
      memcpy(obqp->ptr, bp, size);
 8001e08:	4622      	mov	r2, r4
 8001e0a:	4639      	mov	r1, r7
 8001e0c:	f7fe ff68 	bl	8000ce0 <memcpy>
      bp        += size;
      obqp->ptr += size;
 8001e10:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001e12:	4422      	add	r2, r4
      w         += size;
 8001e14:	44a3      	add	fp, r4
      obqp->ptr += 64U;
      w         += 64U;
    }
    else {
      memcpy(obqp->ptr, bp, size);
      bp        += size;
 8001e16:	4427      	add	r7, r4
      obqp->ptr += size;
 8001e18:	626a      	str	r2, [r5, #36]	; 0x24
 8001e1a:	e7c5      	b.n	8001da8 <obqWriteTimeout+0x78>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001e1c:	4651      	mov	r1, sl
 8001e1e:	4628      	mov	r0, r5
 8001e20:	f7ff ff36 	bl	8001c90 <obqGetEmptyBufferTimeoutS>
        }
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d0ed      	beq.n	8001e04 <obqWriteTimeout+0xd4>
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f382 8811 	msr	BASEPRI, r2
    if (w >= n) {
      return w;
    }
    osalSysLock();
  }
}
 8001e2e:	4658      	mov	r0, fp
 8001e30:	b003      	add	sp, #12
 8001e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e36:	f380 8811 	msr	BASEPRI, r0
        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
          osalSysUnlock();
          return w;
 8001e3a:	e7f8      	b.n	8001e2e <obqWriteTimeout+0xfe>
 8001e3c:	20000c70 	.word	0x20000c70

08001e40 <obqTryFlushI>:

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001e40:	68c2      	ldr	r2, [r0, #12]
 8001e42:	6903      	ldr	r3, [r0, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <obqTryFlushI+0xc>
      obqp->ptr = NULL;

      return true;
    }
  }
  return false;
 8001e48:	2000      	movs	r0, #0
 8001e4a:	4770      	bx	lr

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001e4c:	6883      	ldr	r3, [r0, #8]
 8001e4e:	b90b      	cbnz	r3, 8001e54 <obqTryFlushI+0x14>
      obqp->ptr = NULL;

      return true;
    }
  }
  return false;
 8001e50:	4618      	mov	r0, r3
 8001e52:	4770      	bx	lr

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001e54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0fa      	beq.n	8001e50 <obqTryFlushI+0x10>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8001e5a:	3b04      	subs	r3, #4

    if (size > 0U) {
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	d0f7      	beq.n	8001e50 <obqTryFlushI+0x10>
 * @retval false        if no new filled buffer has been posted to the queue.
 * @retval true         if a new filled buffer has been posted to the queue.
 *
 * @iclass
 */
bool obqTryFlushI(output_buffers_queue_t *obqp) {
 8001e60:	b410      	push	{r4}
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));

    if (size > 0U) {

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8001e62:	6013      	str	r3, [r2, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
 8001e64:	6983      	ldr	r3, [r0, #24]
      if (obqp->bwrptr >= obqp->btop) {
 8001e66:	6944      	ldr	r4, [r0, #20]

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8001e68:	6881      	ldr	r1, [r0, #8]
      obqp->bwrptr += obqp->bsize;
 8001e6a:	441a      	add	r2, r3
      if (obqp->bwrptr >= obqp->btop) {
 8001e6c:	42a2      	cmp	r2, r4
        obqp->bwrptr = obqp->buffers;
 8001e6e:	bf28      	it	cs
 8001e70:	6a03      	ldrcs	r3, [r0, #32]
      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
 8001e72:	60c2      	str	r2, [r0, #12]

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8001e74:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
        obqp->bwrptr = obqp->buffers;
 8001e78:	bf28      	it	cs
 8001e7a:	60c3      	strcs	r3, [r0, #12]
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8001e7c:	2300      	movs	r3, #0

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8001e7e:	6081      	str	r1, [r0, #8]
      if (obqp->bwrptr >= obqp->btop) {
        obqp->bwrptr = obqp->buffers;
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8001e80:	6243      	str	r3, [r0, #36]	; 0x24

      return true;
    }
  }
  return false;
}
 8001e82:	f85d 4b04 	ldr.w	r4, [sp], #4
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;

      return true;
 8001e86:	2001      	movs	r0, #1
    }
  }
  return false;
}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	0000      	movs	r0, r0
	...

08001e90 <adcInit>:
 *
 * @init
 */
void adcInit(void) {

  adc_lld_init();
 8001e90:	f001 ba06 	b.w	80032a0 <adc_lld_init>
	...

08001ea0 <adcObjectInit>:
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 8001ea0:	2300      	movs	r3, #0
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	7002      	strb	r2, [r0, #0]
  adcp->config   = NULL;
 8001ea6:	6043      	str	r3, [r0, #4]
  adcp->samples  = NULL;
 8001ea8:	6083      	str	r3, [r0, #8]
  adcp->depth    = 0;
 8001eaa:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = NULL;
 8001eac:	6103      	str	r3, [r0, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8001eae:	6143      	str	r3, [r0, #20]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8001eb0:	3018      	adds	r0, #24
 8001eb2:	f7ff bbcd 	b.w	8001650 <chMtxObjectInit>
 8001eb6:	bf00      	nop
	...

08001ec0 <extInit>:
 *
 * @init
 */
void extInit(void) {

  ext_lld_init();
 8001ec0:	f001 ba2e 	b.w	8003320 <ext_lld_init>
	...

08001ed0 <extObjectInit>:
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
 8001ed0:	2201      	movs	r2, #1
  extp->config = NULL;
 8001ed2:	2300      	movs	r3, #0
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
 8001ed4:	7002      	strb	r2, [r0, #0]
  extp->config = NULL;
 8001ed6:	6043      	str	r3, [r0, #4]
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	0000      	movs	r0, r0
	...

08001ee0 <extStart>:
 * @param[in] extp      pointer to the @p EXTDriver object
 * @param[in] config    pointer to the @p EXTConfig object
 *
 * @api
 */
void extStart(EXTDriver *extp, const EXTConfig *config) {
 8001ee0:	b510      	push	{r4, lr}
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	4604      	mov	r4, r0
 8001ee6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((extp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((extp->state == EXT_STOP) || (extp->state == EXT_ACTIVE),
                "invalid state");
  extp->config = config;
 8001eea:	6041      	str	r1, [r0, #4]
  ext_lld_start(extp);
 8001eec:	f001 fa70 	bl	80033d0 <ext_lld_start>
  extp->state = EXT_ACTIVE;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	7023      	strb	r3, [r4, #0]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f383 8811 	msr	BASEPRI, r3
 8001efa:	bd10      	pop	{r4, pc}
 8001efc:	0000      	movs	r0, r0
	...

08001f00 <extChannelEnable>:
 * @param[in] extp      pointer to the @p EXTDriver object
 * @param[in] channel   channel to be enabled
 *
 * @api
 */
void extChannelEnable(EXTDriver *extp, expchannel_t channel) {
 8001f00:	b508      	push	{r3, lr}
 8001f02:	2320      	movs	r3, #32
 8001f04:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((extp->state == EXT_ACTIVE) &&
                ((extp->config->channels[channel].mode &
                  EXT_CH_MODE_EDGES_MASK) != EXT_CH_MODE_DISABLED),
                "invalid state");
  extChannelEnableI(extp, channel);
 8001f08:	f001 fa12 	bl	8003330 <ext_lld_channel_enable>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f383 8811 	msr	BASEPRI, r3
 8001f12:	bd08      	pop	{r3, pc}
	...

08001f20 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 8001f20:	f001 bea6 	b.w	8003c70 <i2c_lld_init>
	...

08001f30 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8001f30:	2201      	movs	r2, #1
  i2cp->config = NULL;
 8001f32:	2300      	movs	r3, #0
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8001f34:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 8001f36:	6043      	str	r3, [r0, #4]
 8001f38:	300c      	adds	r0, #12
 8001f3a:	f7ff bb89 	b.w	8001650 <chMtxObjectInit>
 8001f3e:	bf00      	nop

08001f40 <i2cStart>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] config    pointer to the @p I2CConfig object
 *
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
 8001f40:	b510      	push	{r4, lr}
 8001f42:	2320      	movs	r3, #32
 8001f44:	4604      	mov	r4, r0
 8001f46:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 8001f4a:	6041      	str	r1, [r0, #4]
  i2c_lld_start(i2cp);
 8001f4c:	f001 fea8 	bl	8003ca0 <i2c_lld_start>
  i2cp->state = I2C_READY;
 8001f50:	2302      	movs	r3, #2
 8001f52:	7023      	strb	r3, [r4, #0]
 8001f54:	2300      	movs	r3, #0
 8001f56:	f383 8811 	msr	BASEPRI, r3
 8001f5a:	bd10      	pop	{r4, pc}
 8001f5c:	0000      	movs	r0, r0
	...

08001f60 <i2cMasterTransmitTimeout>:
                               i2caddr_t addr,
                               const uint8_t *txbuf,
                               size_t txbytes,
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               systime_t timeout) {
 8001f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f62:	b085      	sub	sp, #20
 8001f64:	4604      	mov	r4, r0
 8001f66:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001f68:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001f6a:	f04f 0e20 	mov.w	lr, #32
 8001f6e:	f38e 8811 	msr	BASEPRI, lr

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 8001f72:	f04f 0e03 	mov.w	lr, #3
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8001f76:	9601      	str	r6, [sp, #4]
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8001f78:	2500      	movs	r5, #0
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8001f7a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001f7c:	9702      	str	r7, [sp, #8]
 8001f7e:	9600      	str	r6, [sp, #0]
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8001f80:	6085      	str	r5, [r0, #8]
  i2cp->state = I2C_ACTIVE_TX;
 8001f82:	f880 e000 	strb.w	lr, [r0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8001f86:	f001 ff43 	bl	8003e10 <i2c_lld_master_transmit_timeout>
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 8001f8a:	1c43      	adds	r3, r0, #1
    i2cp->state = I2C_LOCKED;
 8001f8c:	bf0c      	ite	eq
 8001f8e:	2305      	moveq	r3, #5
  }
  else {
    i2cp->state = I2C_READY;
 8001f90:	2302      	movne	r3, #2
 8001f92:	7023      	strb	r3, [r4, #0]
 8001f94:	2300      	movs	r3, #0
 8001f96:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();
  return rdymsg;
}
 8001f9a:	b005      	add	sp, #20
 8001f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f9e:	bf00      	nop

08001fa0 <i2cAcquireBus>:
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8001fa0:	300c      	adds	r0, #12
 8001fa2:	f7ff bbc5 	b.w	8001730 <chMtxLock>
 8001fa6:	bf00      	nop
	...

08001fb0 <i2cReleaseBus>:
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8001fb0:	300c      	adds	r0, #12
 8001fb2:	f7ff bbcd 	b.w	8001750 <chMtxUnlock>
 8001fb6:	bf00      	nop
	...

08001fc0 <pwmInit>:
 *
 * @init
 */
void pwmInit(void) {

  pwm_lld_init();
 8001fc0:	f002 be76 	b.w	8004cb0 <pwm_lld_init>
	...

08001fd0 <pwmObjectInit>:
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  pwmp->config   = NULL;
 8001fd0:	2300      	movs	r3, #0
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	7002      	strb	r2, [r0, #0]
  pwmp->config   = NULL;
 8001fd6:	6043      	str	r3, [r0, #4]
  pwmp->enabled  = 0;
 8001fd8:	60c3      	str	r3, [r0, #12]
  pwmp->channels = 0;
 8001fda:	7403      	strb	r3, [r0, #16]
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop

08001fe0 <pwmStart>:
 * @param[in] pwmp      pointer to a @p PWMDriver object
 * @param[in] config    pointer to a @p PWMConfig object
 *
 * @api
 */
void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
 8001fea:	684b      	ldr	r3, [r1, #4]
 8001fec:	6083      	str	r3, [r0, #8]
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 8001fee:	6041      	str	r1, [r0, #4]
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
 8001ff0:	f002 fe6e 	bl	8004cd0 <pwm_lld_start>
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 8001ff4:	2202      	movs	r2, #2
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 8001ff6:	2300      	movs	r3, #0
  pwmp->state = PWM_READY;
 8001ff8:	7022      	strb	r2, [r4, #0]
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 8001ffa:	60e3      	str	r3, [r4, #12]
 8001ffc:	f383 8811 	msr	BASEPRI, r3
 8002000:	bd10      	pop	{r4, pc}
 8002002:	bf00      	nop
	...

08002010 <pwmEnableChannel>:
 *
 * @api
 */
void pwmEnableChannel(PWMDriver *pwmp,
                      pwmchannel_t channel,
                      pwmcnt_t width) {
 8002010:	b570      	push	{r4, r5, r6, lr}
 8002012:	2420      	movs	r4, #32
 8002014:	f384 8811 	msr	BASEPRI, r4

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8002018:	2401      	movs	r4, #1
 800201a:	68c6      	ldr	r6, [r0, #12]
 800201c:	fa04 f301 	lsl.w	r3, r4, r1
 8002020:	4333      	orrs	r3, r6
 8002022:	60c3      	str	r3, [r0, #12]
 8002024:	f002 fecc 	bl	8004dc0 <pwm_lld_enable_channel>
 8002028:	2300      	movs	r3, #0
 800202a:	f383 8811 	msr	BASEPRI, r3
 800202e:	bd70      	pop	{r4, r5, r6, pc}

08002030 <obnotify>:
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 8002030:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8002032:	6b04      	ldr	r4, [r0, #48]	; 0x30

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002034:	f8d4 2484 	ldr.w	r2, [r4, #1156]	; 0x484
 8002038:	6813      	ldr	r3, [r2, #0]
 800203a:	7819      	ldrb	r1, [r3, #0]
 800203c:	2904      	cmp	r1, #4
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 800203e:	b082      	sub	sp, #8
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002040:	d001      	beq.n	8002046 <obnotify+0x16>
    if (buf != NULL) {
      /* Buffer found, starting a new transaction.*/
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
    }
  }
}
 8002042:	b002      	add	sp, #8
 8002044:	bd10      	pop	{r4, pc}
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002046:	7a21      	ldrb	r1, [r4, #8]
 8002048:	2902      	cmp	r1, #2
 800204a:	d1fa      	bne.n	8002042 <obnotify+0x12>
      (sdup->state != SDU_READY)) {
    return;
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800204c:	7911      	ldrb	r1, [r2, #4]
 800204e:	891a      	ldrh	r2, [r3, #8]
 8002050:	2301      	movs	r3, #1
 8002052:	408b      	lsls	r3, r1
 8002054:	4213      	tst	r3, r2
 8002056:	d1f4      	bne.n	8002042 <obnotify+0x12>
    /* Trying to get a full buffer.*/
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8002058:	a901      	add	r1, sp, #4
 800205a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800205e:	f7ff fdef 	bl	8001c40 <obqGetFullBufferI>
    if (buf != NULL) {
 8002062:	4602      	mov	r2, r0
 8002064:	2800      	cmp	r0, #0
 8002066:	d0ec      	beq.n	8002042 <obnotify+0x12>
      /* Buffer found, starting a new transaction.*/
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8002068:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
 800206c:	9b01      	ldr	r3, [sp, #4]
 800206e:	7901      	ldrb	r1, [r0, #4]
 8002070:	6800      	ldr	r0, [r0, #0]
 8002072:	f000 fadd 	bl	8002630 <usbStartTransmitI>
 8002076:	e7e4      	b.n	8002042 <obnotify+0x12>
	...

08002080 <ibnotify>:
/**
 * @brief   Notification of empty buffer released into the input buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void ibnotify(io_buffers_queue_t *bqp) {
 8002080:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8002082:	6b04      	ldr	r4, [r0, #48]	; 0x30

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002084:	f8d4 2484 	ldr.w	r2, [r4, #1156]	; 0x484
 8002088:	6813      	ldr	r3, [r2, #0]
 800208a:	7819      	ldrb	r1, [r3, #0]
 800208c:	2904      	cmp	r1, #4
 800208e:	d000      	beq.n	8002092 <ibnotify+0x12>
 8002090:	bd10      	pop	{r4, pc}
 8002092:	7a21      	ldrb	r1, [r4, #8]
 8002094:	2902      	cmp	r1, #2
 8002096:	d1fb      	bne.n	8002090 <ibnotify+0x10>
      (sdup->state != SDU_READY)) {
    return;
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8002098:	7951      	ldrb	r1, [r2, #5]
 800209a:	895a      	ldrh	r2, [r3, #10]
 800209c:	2301      	movs	r3, #1
 800209e:	408b      	lsls	r3, r1
 80020a0:	4213      	tst	r3, r2
 80020a2:	d1f5      	bne.n	8002090 <ibnotify+0x10>
    /* Trying to get a free buffer.*/
    uint8_t *buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 80020a4:	f104 000c 	add.w	r0, r4, #12
 80020a8:	f7ff fcaa 	bl	8001a00 <ibqGetEmptyBufferI>
    if (buf != NULL) {
 80020ac:	2800      	cmp	r0, #0
 80020ae:	d0ef      	beq.n	8002090 <ibnotify+0x10>
      /* Buffer found, starting a new transaction.*/
      usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80020b0:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
 80020b4:	4602      	mov	r2, r0
 80020b6:	7959      	ldrb	r1, [r3, #5]
 80020b8:	6818      	ldr	r0, [r3, #0]
                       buf, SERIAL_USB_BUFFERS_SIZE);
    }
  }
}
 80020ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
    /* Trying to get a free buffer.*/
    uint8_t *buf = ibqGetEmptyBufferI(&sdup->ibqueue);
    if (buf != NULL) {
      /* Buffer found, starting a new transaction.*/
      usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80020be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c2:	f000 ba9d 	b.w	8002600 <usbStartReceiveI>
 80020c6:	bf00      	nop
	...

080020d0 <readt>:
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 80020d0:	b410      	push	{r4}

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 80020d2:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
 80020d6:	6824      	ldr	r4, [r4, #0]
 80020d8:	7824      	ldrb	r4, [r4, #0]
 80020da:	2c04      	cmp	r4, #4
 80020dc:	d003      	beq.n	80020e6 <readt+0x16>
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
}
 80020de:	2000      	movs	r0, #0
 80020e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020e4:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 80020e6:	300c      	adds	r0, #12
}
 80020e8:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 80020ec:	f7ff bcf8 	b.w	8001ae0 <ibqReadTimeout>

080020f0 <writet>:
  }

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 80020f0:	b410      	push	{r4}

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 80020f2:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
 80020f6:	6824      	ldr	r4, [r4, #0]
 80020f8:	7824      	ldrb	r4, [r4, #0]
 80020fa:	2c04      	cmp	r4, #4
 80020fc:	d003      	beq.n	8002106 <writet+0x16>
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
}
 80020fe:	2000      	movs	r0, #0
 8002100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002104:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8002106:	3040      	adds	r0, #64	; 0x40
}
 8002108:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 800210c:	f7ff be10 	b.w	8001d30 <obqWriteTimeout>

08002110 <gett>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8002110:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d102      	bne.n	8002122 <gett+0x12>
    return MSG_RESET;
  }

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 800211c:	300c      	adds	r0, #12
 800211e:	f7ff bcaf 	b.w	8001a80 <ibqGetTimeout>
}
 8002122:	f06f 0001 	mvn.w	r0, #1
 8002126:	4770      	bx	lr
	...

08002130 <get>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8002130:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d104      	bne.n	8002146 <get+0x16>
    return MSG_RESET;
  }

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 800213c:	300c      	adds	r0, #12
 800213e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002142:	f7ff bc9d 	b.w	8001a80 <ibqGetTimeout>
}
 8002146:	f06f 0001 	mvn.w	r0, #1
 800214a:	4770      	bx	lr
 800214c:	0000      	movs	r0, r0
	...

08002150 <putt>:

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8002150:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b04      	cmp	r3, #4
 800215a:	d102      	bne.n	8002162 <putt+0x12>
    return MSG_RESET;
  }

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 800215c:	3040      	adds	r0, #64	; 0x40
 800215e:	f7ff bdaf 	b.w	8001cc0 <obqPutTimeout>
}
 8002162:	f06f 0001 	mvn.w	r0, #1
 8002166:	4770      	bx	lr
	...

08002170 <put>:
                        n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8002170:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d104      	bne.n	8002186 <put+0x16>
    return MSG_RESET;
  }

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 800217c:	3040      	adds	r0, #64	; 0x40
 800217e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002182:	f7ff bd9d 	b.w	8001cc0 <obqPutTimeout>
}
 8002186:	f06f 0001 	mvn.w	r0, #1
 800218a:	4770      	bx	lr
 800218c:	0000      	movs	r0, r0
	...

08002190 <read>:
                         n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8002190:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b04      	cmp	r3, #4
 800219a:	d001      	beq.n	80021a0 <read+0x10>
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
                        n, TIME_INFINITE);
}
 800219c:	2000      	movs	r0, #0
 800219e:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 80021a0:	300c      	adds	r0, #12
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a6:	f7ff bc9b 	b.w	8001ae0 <ibqReadTimeout>
 80021aa:	bf00      	nop
 80021ac:	0000      	movs	r0, r0
	...

080021b0 <write>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 80021b0:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d001      	beq.n	80021c0 <write+0x10>
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
                         n, TIME_INFINITE);
}
 80021bc:	2000      	movs	r0, #0
 80021be:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 80021c0:	3040      	adds	r0, #64	; 0x40
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021c6:	f7ff bdb3 	b.w	8001d30 <obqWriteTimeout>
 80021ca:	bf00      	nop
 80021cc:	0000      	movs	r0, r0
	...

080021d0 <sduInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
	...

080021e0 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 80021e0:	b510      	push	{r4, lr}

  sdup->vmt = &vmt;
 80021e2:	4603      	mov	r3, r0
 80021e4:	4a10      	ldr	r2, [pc, #64]	; (8002228 <sduObjectInit+0x48>)
 80021e6:	f843 2b04 	str.w	r2, [r3], #4
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 80021ea:	b082      	sub	sp, #8

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 80021ec:	2101      	movs	r1, #1
  ibqObjectInit(&sdup->ibqueue, sdup->ib,
 80021ee:	4a0f      	ldr	r2, [pc, #60]	; (800222c <sduObjectInit+0x4c>)
 80021f0:	9001      	str	r0, [sp, #4]
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 80021f2:	4604      	mov	r4, r0
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 80021f4:	6043      	str	r3, [r0, #4]

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 80021f6:	7201      	strb	r1, [r0, #8]
  ibqObjectInit(&sdup->ibqueue, sdup->ib,
 80021f8:	2302      	movs	r3, #2
 80021fa:	f100 0174 	add.w	r1, r0, #116	; 0x74
 80021fe:	9200      	str	r2, [sp, #0]
 8002200:	300c      	adds	r0, #12
 8002202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002206:	f7ff fbd3 	bl	80019b0 <ibqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                ibnotify, sdup);
  obqObjectInit(&sdup->obqueue, sdup->ob,
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <sduObjectInit+0x50>)
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	9401      	str	r4, [sp, #4]
 8002210:	f504 711f 	add.w	r1, r4, #636	; 0x27c
 8002214:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002218:	2302      	movs	r3, #2
 800221a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221e:	f7ff fce7 	bl	8001bf0 <obqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                obnotify, sdup);
}
 8002222:	b002      	add	sp, #8
 8002224:	bd10      	pop	{r4, pc}
 8002226:	bf00      	nop
 8002228:	080079c0 	.word	0x080079c0
 800222c:	08002081 	.word	0x08002081
 8002230:	08002031 	.word	0x08002031
	...

08002240 <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
  USBDriver *usbp = config->usbp;
 8002240:	680b      	ldr	r3, [r1, #0]
 8002242:	2220      	movs	r2, #32
 8002244:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8002248:	790a      	ldrb	r2, [r1, #4]
 800224a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800224e:	6190      	str	r0, [r2, #24]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8002250:	794a      	ldrb	r2, [r1, #5]
 8002252:	3209      	adds	r2, #9
 8002254:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 8002258:	798a      	ldrb	r2, [r1, #6]
 800225a:	b112      	cbz	r2, 8002262 <sduStart+0x22>
    usbp->in_params[config->int_in - 1U]  = sdup;
 800225c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002260:	6198      	str	r0, [r3, #24]
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 8002262:	2302      	movs	r3, #2
 8002264:	7203      	strb	r3, [r0, #8]
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 8002266:	f8c0 1484 	str.w	r1, [r0, #1156]	; 0x484
 800226a:	2300      	movs	r3, #0
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
	...

08002280 <sduDisconnectI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduDisconnectI(SerialUSBDriver *sdup) {
 8002280:	b510      	push	{r4, lr}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002282:	2102      	movs	r1, #2
 8002284:	4604      	mov	r4, r0
 8002286:	3004      	adds	r0, #4
 8002288:	f7ff faca 	bl	8001820 <chEvtBroadcastFlagsI>

  /* Queues reset in order to signal the driver stop to the application.*/
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
  ibqResetI(&sdup->ibqueue);
 800228c:	f104 000c 	add.w	r0, r4, #12
 8002290:	f7ff fba6 	bl	80019e0 <ibqResetI>
  obqResetI(&sdup->obqueue);
 8002294:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
 8002298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void sduDisconnectI(SerialUSBDriver *sdup) {

  /* Queues reset in order to signal the driver stop to the application.*/
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
  ibqResetI(&sdup->ibqueue);
  obqResetI(&sdup->obqueue);
 800229c:	f7ff bcc0 	b.w	8001c20 <obqResetI>

080022a0 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 80022a0:	b570      	push	{r4, r5, r6, lr}
  uint8_t *buf;

  ibqResetI(&sdup->ibqueue);
 80022a2:	f100 050c 	add.w	r5, r0, #12
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 80022a6:	4604      	mov	r4, r0
  uint8_t *buf;

  ibqResetI(&sdup->ibqueue);
 80022a8:	4628      	mov	r0, r5
 80022aa:	f7ff fb99 	bl	80019e0 <ibqResetI>
  obqResetI(&sdup->obqueue);
 80022ae:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80022b2:	f7ff fcb5 	bl	8001c20 <obqResetI>
 80022b6:	1d20      	adds	r0, r4, #4
 80022b8:	2101      	movs	r1, #1
 80022ba:	f7ff fab1 	bl	8001820 <chEvtBroadcastFlagsI>
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 80022be:	4628      	mov	r0, r5
 80022c0:	f7ff fb9e 	bl	8001a00 <ibqGetEmptyBufferI>

  osalDbgAssert(buf != NULL, "no free buffer");

  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80022c4:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
 80022c8:	4602      	mov	r2, r0
 80022ca:	7959      	ldrb	r1, [r3, #5]
 80022cc:	6818      	ldr	r0, [r3, #0]
                   buf, SERIAL_USB_BUFFERS_SIZE);
}
 80022ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Starts the first OUT transaction immediately.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);

  osalDbgAssert(buf != NULL, "no free buffer");

  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80022d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d6:	f000 b993 	b.w	8002600 <usbStartReceiveI>
 80022da:	bf00      	nop
 80022dc:	0000      	movs	r0, r0
	...

080022e0 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 80022e0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80022e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d001      	beq.n	80022f0 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 80022ec:	2000      	movs	r0, #0
    }
  }
  return false;
}
 80022ee:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 80022f0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80022f4:	2b21      	cmp	r3, #33	; 0x21
 80022f6:	d003      	beq.n	8002300 <sduRequestsHook+0x20>
 80022f8:	2b22      	cmp	r3, #34	; 0x22
 80022fa:	d009      	beq.n	8002310 <sduRequestsHook+0x30>
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d1f5      	bne.n	80022ec <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <sduRequestsHook+0x3c>)
 8002302:	6383      	str	r3, [r0, #56]	; 0x38
 8002304:	2207      	movs	r2, #7
 8002306:	2300      	movs	r3, #0
 8002308:	63c2      	str	r2, [r0, #60]	; 0x3c
 800230a:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 800230c:	2001      	movs	r0, #1
 800230e:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002310:	2300      	movs	r3, #0
 8002312:	6383      	str	r3, [r0, #56]	; 0x38
 8002314:	63c3      	str	r3, [r0, #60]	; 0x3c
 8002316:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 8002318:	2001      	movs	r0, #1
 800231a:	4770      	bx	lr
 800231c:	20000800 	.word	0x20000800

08002320 <sduSOFHookI>:
 */
void sduSOFHookI(SerialUSBDriver *sdup) {

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002320:	f8d0 2484 	ldr.w	r2, [r0, #1156]	; 0x484
 8002324:	6813      	ldr	r3, [r2, #0]
 8002326:	7819      	ldrb	r1, [r3, #0]
 8002328:	2904      	cmp	r1, #4
 800232a:	d000      	beq.n	800232e <sduSOFHookI+0xe>
 800232c:	4770      	bx	lr
 800232e:	7a01      	ldrb	r1, [r0, #8]
 8002330:	2902      	cmp	r1, #2
 8002332:	d1fb      	bne.n	800232c <sduSOFHookI+0xc>
    return;
  }

  /* If there is already a transaction ongoing then another one cannot be
     started.*/
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8002334:	7911      	ldrb	r1, [r2, #4]
 8002336:	891a      	ldrh	r2, [r3, #8]
 8002338:	2301      	movs	r3, #1
 800233a:	408b      	lsls	r3, r1
 800233c:	4213      	tst	r3, r2
 800233e:	d1f5      	bne.n	800232c <sduSOFHookI+0xc>
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSOFHookI(SerialUSBDriver *sdup) {
 8002340:	b530      	push	{r4, r5, lr}
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 8002342:	f100 0540 	add.w	r5, r0, #64	; 0x40
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSOFHookI(SerialUSBDriver *sdup) {
 8002346:	b083      	sub	sp, #12
 8002348:	4604      	mov	r4, r0
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 800234a:	4628      	mov	r0, r5
 800234c:	f7ff fd78 	bl	8001e40 <obqTryFlushI>
 8002350:	b908      	cbnz	r0, 8002356 <sduSOFHookI+0x36>

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  }
}
 8002352:	b003      	add	sp, #12
 8002354:	bd30      	pop	{r4, r5, pc}

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
    size_t n;
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8002356:	a901      	add	r1, sp, #4
 8002358:	4628      	mov	r0, r5
 800235a:	f7ff fc71 	bl	8001c40 <obqGetFullBufferI>

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 800235e:	f8d4 4484 	ldr.w	r4, [r4, #1156]	; 0x484
 8002362:	9b01      	ldr	r3, [sp, #4]
 8002364:	7921      	ldrb	r1, [r4, #4]
 8002366:	4602      	mov	r2, r0
 8002368:	6820      	ldr	r0, [r4, #0]
 800236a:	f000 f961 	bl	8002630 <usbStartTransmitI>
 800236e:	e7f0      	b.n	8002352 <sduSOFHookI+0x32>

08002370 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002370:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8002372:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002376:	b083      	sub	sp, #12
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8002378:	699c      	ldr	r4, [r3, #24]

  if (sdup == NULL) {
 800237a:	b1ec      	cbz	r4, 80023b8 <sduDataTransmitted+0x48>
 800237c:	460e      	mov	r6, r1
 800237e:	4605      	mov	r5, r0
 8002380:	2320      	movs	r3, #32
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 800238a:	1d20      	adds	r0, r4, #4
 800238c:	2108      	movs	r1, #8
 800238e:	f7ff fa47 	bl	8001820 <chEvtBroadcastFlagsI>

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	681b      	ldr	r3, [r3, #0]
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8002398:	3440      	adds	r4, #64	; 0x40

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 800239a:	b9fb      	cbnz	r3, 80023dc <sduDataTransmitted+0x6c>
    obqReleaseEmptyBufferI(&sdup->obqueue);
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800239c:	4620      	mov	r0, r4
 800239e:	a901      	add	r1, sp, #4
 80023a0:	f7ff fc4e 	bl	8001c40 <obqGetFullBufferI>

  if (buf != NULL) {
 80023a4:	b150      	cbz	r0, 80023bc <sduDataTransmitted+0x4c>
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
 80023a6:	4602      	mov	r2, r0
 80023a8:	4631      	mov	r1, r6
 80023aa:	4628      	mov	r0, r5
 80023ac:	9b01      	ldr	r3, [sp, #4]
 80023ae:	f000 f93f 	bl	8002630 <usbStartTransmitI>
 80023b2:	2300      	movs	r3, #0
 80023b4:	f383 8811 	msr	BASEPRI, r3
  else {
    /* Nothing to transmit.*/
  }

  osalSysUnlockFromISR();
}
 80023b8:	b003      	add	sp, #12
 80023ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (buf != NULL) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	2a00      	cmp	r2, #0
 80023c4:	d0f5      	beq.n	80023b2 <sduDataTransmitted+0x42>
 80023c6:	8a1b      	ldrh	r3, [r3, #16]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	4013      	ands	r3, r2
 80023cc:	d1f1      	bne.n	80023b2 <sduDataTransmitted+0x42>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
    /* Transmit zero sized packet in case the last one has maximum allowed
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 80023ce:	4631      	mov	r1, r6
 80023d0:	f105 0244 	add.w	r2, r5, #68	; 0x44
 80023d4:	4628      	mov	r0, r5
 80023d6:	f000 f92b 	bl	8002630 <usbStartTransmitI>
 80023da:	e7ea      	b.n	80023b2 <sduDataTransmitted+0x42>
  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
    obqReleaseEmptyBufferI(&sdup->obqueue);
 80023dc:	4620      	mov	r0, r4
 80023de:	f7ff fc3f 	bl	8001c60 <obqReleaseEmptyBufferI>
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80023e2:	4620      	mov	r0, r4
 80023e4:	a901      	add	r1, sp, #4
 80023e6:	f7ff fc2b 	bl	8001c40 <obqGetFullBufferI>

  if (buf != NULL) {
 80023ea:	2800      	cmp	r0, #0
 80023ec:	d1db      	bne.n	80023a6 <sduDataTransmitted+0x36>
 80023ee:	e7e5      	b.n	80023bc <sduDataTransmitted+0x4c>

080023f0 <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  uint8_t *buf;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80023f0:	3109      	adds	r1, #9
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 80023f2:	b538      	push	{r3, r4, r5, lr}
  uint8_t *buf;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80023f4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]

  if (sdup == NULL) {
 80023f8:	b324      	cbz	r4, 8002444 <sduDataReceived+0x54>
 80023fa:	2320      	movs	r3, #32
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	2104      	movs	r1, #4
 8002402:	1860      	adds	r0, r4, r1
 8002404:	f7ff fa0c 	bl	8001820 <chEvtBroadcastFlagsI>
  /* Signaling that data is available in the input queue.*/
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Posting the filled buffer in the queue.*/
  ibqPostFullBufferI(&sdup->ibqueue,
                     usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8002408:	f8d4 2484 	ldr.w	r2, [r4, #1156]	; 0x484
 800240c:	6813      	ldr	r3, [r2, #0]
 800240e:	7952      	ldrb	r2, [r2, #5]
 8002410:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  /* Signaling that data is available in the input queue.*/
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Posting the filled buffer in the queue.*/
  ibqPostFullBufferI(&sdup->ibqueue,
 8002414:	f104 050c 	add.w	r5, r4, #12
                     usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8002418:	68db      	ldr	r3, [r3, #12]

  /* Signaling that data is available in the input queue.*/
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Posting the filled buffer in the queue.*/
  ibqPostFullBufferI(&sdup->ibqueue,
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4628      	mov	r0, r5
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	f7ff fafe 	bl	8001a20 <ibqPostFullBufferI>
                                                   sdup->config->bulk_out));

  /* The endpoint cannot be busy, we are in the context of the callback,
     so a packet is in the buffer for sure. Trying to get a free buffer
     for the next transaction.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 8002424:	4628      	mov	r0, r5
 8002426:	f7ff faeb 	bl	8001a00 <ibqGetEmptyBufferI>
  if (buf != NULL) {
 800242a:	b140      	cbz	r0, 800243e <sduDataReceived+0x4e>
    /* Buffer found, starting a new transaction.*/
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800242c:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
 8002430:	4602      	mov	r2, r0
 8002432:	7959      	ldrb	r1, [r3, #5]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243a:	f000 f8e1 	bl	8002600 <usbStartReceiveI>
 800243e:	2300      	movs	r3, #0
 8002440:	f383 8811 	msr	BASEPRI, r3
 8002444:	bd38      	pop	{r3, r4, r5, pc}
 8002446:	bf00      	nop
	...

08002450 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
	...

08002460 <spiInit>:
 *
 * @init
 */
void spiInit(void) {

  spi_lld_init();
 8002460:	f002 bb3e 	b.w	8004ae0 <spi_lld_init>
	...

08002470 <spiObjectInit>:
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
  spip->config = NULL;
 8002470:	2300      	movs	r3, #0
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8002472:	2201      	movs	r2, #1
 8002474:	7002      	strb	r2, [r0, #0]
  spip->config = NULL;
 8002476:	6043      	str	r3, [r0, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8002478:	6083      	str	r3, [r0, #8]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800247a:	300c      	adds	r0, #12
 800247c:	f7ff b8e8 	b.w	8001650 <chMtxObjectInit>

08002480 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 8002480:	b510      	push	{r4, lr}
 8002482:	2320      	movs	r3, #32
 8002484:	4604      	mov	r4, r0
 8002486:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 800248a:	6041      	str	r1, [r0, #4]
  spi_lld_start(spip);
 800248c:	f002 fb50 	bl	8004b30 <spi_lld_start>
  spip->state = SPI_READY;
 8002490:	2302      	movs	r3, #2
 8002492:	7023      	strb	r3, [r4, #0]
 8002494:	2300      	movs	r3, #0
 8002496:	f383 8811 	msr	BASEPRI, r3
 800249a:	bd10      	pop	{r4, pc}
 800249c:	0000      	movs	r0, r0
	...

080024a0 <spiSelect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 80024a0:	b508      	push	{r3, lr}
 80024a2:	2320      	movs	r3, #32
 80024a4:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiSelectI(spip);
 80024a8:	f002 fb92 	bl	8004bd0 <spi_lld_select>
 80024ac:	2300      	movs	r3, #0
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	bd08      	pop	{r3, pc}
	...

080024c0 <spiUnselect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 80024c0:	b508      	push	{r3, lr}
 80024c2:	2320      	movs	r3, #32
 80024c4:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 80024c8:	f002 fb8a 	bl	8004be0 <spi_lld_unselect>
 80024cc:	2300      	movs	r3, #0
 80024ce:	f383 8811 	msr	BASEPRI, r3
 80024d2:	bd08      	pop	{r3, pc}
	...

080024e0 <spiExchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiExchange(SPIDriver *spip, size_t n,
                 const void *txbuf, void *rxbuf) {
 80024e0:	b538      	push	{r3, r4, r5, lr}
 80024e2:	4604      	mov	r4, r0
 80024e4:	2520      	movs	r5, #32
 80024e6:	f385 8811 	msr	BASEPRI, r5
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 80024ea:	2503      	movs	r5, #3
 80024ec:	f804 5b08 	strb.w	r5, [r4], #8
 80024f0:	f002 fb7e 	bl	8004bf0 <spi_lld_exchange>
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 80024f4:	4620      	mov	r0, r4
 80024f6:	f7fe ffeb 	bl	80014d0 <chThdSuspendS>
 80024fa:	2300      	movs	r3, #0
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	bd38      	pop	{r3, r4, r5, pc}
 8002502:	bf00      	nop
	...

08002510 <spiSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8002510:	b510      	push	{r4, lr}
 8002512:	2320      	movs	r3, #32
 8002514:	4604      	mov	r4, r0
 8002516:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartSendI(spip, n, txbuf);
 800251a:	2303      	movs	r3, #3
 800251c:	f804 3b08 	strb.w	r3, [r4], #8
 8002520:	f002 fb86 	bl	8004c30 <spi_lld_send>
 8002524:	4620      	mov	r0, r4
 8002526:	f7fe ffd3 	bl	80014d0 <chThdSuspendS>
 800252a:	2300      	movs	r3, #0
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	bd10      	pop	{r4, pc}
 8002532:	bf00      	nop
	...

08002540 <spiReceive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 8002540:	b510      	push	{r4, lr}
 8002542:	2320      	movs	r3, #32
 8002544:	4604      	mov	r4, r0
 8002546:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartReceiveI(spip, n, rxbuf);
 800254a:	2303      	movs	r3, #3
 800254c:	f804 3b08 	strb.w	r3, [r4], #8
 8002550:	f002 fb8e 	bl	8004c70 <spi_lld_receive>
 8002554:	4620      	mov	r0, r4
 8002556:	f7fe ffbb 	bl	80014d0 <chThdSuspendS>
 800255a:	2300      	movs	r3, #0
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	bd10      	pop	{r4, pc}
 8002562:	bf00      	nop
	...

08002570 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 8002570:	f001 bd96 	b.w	80040a0 <usb_lld_init>
	...

08002580 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 8002580:	2300      	movs	r3, #0
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8002582:	2201      	movs	r2, #1
 8002584:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 8002586:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002588:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800258a:	6283      	str	r3, [r0, #40]	; 0x28
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800258c:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800258e:	62c3      	str	r3, [r0, #44]	; 0x2c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002590:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 8002592:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 8002594:	8103      	strh	r3, [r0, #8]
  usbp->receiving    = 0;
 8002596:	8143      	strh	r3, [r0, #10]
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	0000      	movs	r0, r0
	...

080025a0 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 80025a0:	b538      	push	{r3, r4, r5, lr}
 80025a2:	4604      	mov	r4, r0
 80025a4:	2320      	movs	r3, #32
 80025a6:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 80025aa:	2500      	movs	r5, #0
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 80025ac:	6041      	str	r1, [r0, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 80025ae:	60c5      	str	r5, [r0, #12]
 80025b0:	6105      	str	r5, [r0, #16]
 80025b2:	6145      	str	r5, [r0, #20]
 80025b4:	6185      	str	r5, [r0, #24]
  }
  usb_lld_start(usbp);
 80025b6:	f001 fd8b 	bl	80040d0 <usb_lld_start>
  usbp->state = USB_READY;
 80025ba:	2302      	movs	r3, #2
 80025bc:	7023      	strb	r3, [r4, #0]
 80025be:	f385 8811 	msr	BASEPRI, r5
 80025c2:	bd38      	pop	{r3, r4, r5, pc}
	...

080025d0 <usbInitEndpointI>:
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 80025d0:	b410      	push	{r4}

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 80025d2:	6953      	ldr	r3, [r2, #20]
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;
 80025d4:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 80025d8:	60e2      	str	r2, [r4, #12]

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 80025da:	b123      	cbz	r3, 80025e6 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 80025dc:	2400      	movs	r4, #0
 80025de:	601c      	str	r4, [r3, #0]
 80025e0:	605c      	str	r4, [r3, #4]
 80025e2:	609c      	str	r4, [r3, #8]
 80025e4:	60dc      	str	r4, [r3, #12]
  }
  if (epcp->out_state != NULL) {
 80025e6:	6993      	ldr	r3, [r2, #24]
 80025e8:	b123      	cbz	r3, 80025f4 <usbInitEndpointI+0x24>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
}
 80025f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (epcp->out_state != NULL) {
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 80025f8:	f001 be72 	b.w	80042e0 <usb_lld_init_endpoint>
 80025fc:	0000      	movs	r0, r0
	...

08002600 <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 8002600:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8002602:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002606:	8947      	ldrh	r7, [r0, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8002608:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800260c:	2401      	movs	r4, #1
 800260e:	fa04 f601 	lsl.w	r6, r4, r1

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8002612:	f8de 4018 	ldr.w	r4, [lr, #24]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002616:	433e      	orrs	r6, r7
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 8002618:	2700      	movs	r7, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800261a:	8146      	strh	r6, [r0, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 800261c:	60a2      	str	r2, [r4, #8]
  osp->rxsize = n;
  osp->rxcnt  = 0;
 800261e:	e884 0088 	stmia.w	r4, {r3, r7}
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
}
 8002622:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 8002626:	f001 bf43 	b.w	80044b0 <usb_lld_start_out>
 800262a:	bf00      	nop
 800262c:	0000      	movs	r0, r0
	...

08002630 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 8002630:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002632:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002636:	8907      	ldrh	r7, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002638:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800263c:	2401      	movs	r4, #1
 800263e:	fa04 f601 	lsl.w	r6, r4, r1

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002642:	f8de 4014 	ldr.w	r4, [lr, #20]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002646:	433e      	orrs	r6, r7
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 8002648:	2700      	movs	r7, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800264a:	8106      	strh	r6, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 800264c:	60a2      	str	r2, [r4, #8]
  isp->txsize = n;
  isp->txcnt  = 0;
 800264e:	e884 0088 	stmia.w	r4, {r3, r7}
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
}
 8002652:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002656:	f001 bfc3 	b.w	80045e0 <usb_lld_start_in>
 800265a:	bf00      	nop
 800265c:	0000      	movs	r0, r0
	...

08002660 <_usb_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8002660:	b570      	push	{r4, r5, r6, lr}
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8002662:	2302      	movs	r3, #2

  /* Resetting internal state.*/
  usbp->status        = 0;
 8002664:	2500      	movs	r5, #0
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8002666:	4604      	mov	r4, r0
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8002668:	7003      	strb	r3, [r0, #0]

  /* Resetting internal state.*/
  usbp->status        = 0;
 800266a:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
  usbp->address       = 0;
 800266e:	f880 504e 	strb.w	r5, [r0, #78]	; 0x4e
  usbp->configuration = 0;
 8002672:	f880 504f 	strb.w	r5, [r0, #79]	; 0x4f
  usbp->transmitting  = 0;
 8002676:	8105      	strh	r5, [r0, #8]
  usbp->receiving     = 0;
 8002678:	8145      	strh	r5, [r0, #10]
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 800267a:	60c5      	str	r5, [r0, #12]
 800267c:	6105      	str	r5, [r0, #16]
 800267e:	6145      	str	r5, [r0, #20]
 8002680:	6185      	str	r5, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002682:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8002686:	f001 fdbb 	bl	8004200 <usb_lld_reset>

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800268a:	6863      	ldr	r3, [r4, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	b123      	cbz	r3, 800269a <_usb_reset+0x3a>
 8002690:	4629      	mov	r1, r5
 8002692:	4620      	mov	r0, r4
}
 8002694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  /* Low level reset.*/
  usb_lld_reset(usbp);

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8002698:	4718      	bx	r3
 800269a:	bd70      	pop	{r4, r5, r6, pc}
 800269c:	0000      	movs	r0, r0
	...

080026a0 <_usb_suspend>:

  /* State transition.*/
  usbp->state = USB_SUSPENDED;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80026a0:	6842      	ldr	r2, [r0, #4]
 80026a2:	6813      	ldr	r3, [r2, #0]
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {

  /* State transition.*/
  usbp->state = USB_SUSPENDED;
 80026a4:	2105      	movs	r1, #5
 80026a6:	7001      	strb	r1, [r0, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80026a8:	b10b      	cbz	r3, 80026ae <_usb_suspend+0xe>
 80026aa:	2103      	movs	r1, #3
 80026ac:	4718      	bx	r3
 80026ae:	4770      	bx	lr

080026b0 <_usb_wakeup>:

  /* State transition.*/
  usbp->state = USB_ACTIVE;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80026b0:	6842      	ldr	r2, [r0, #4]
 80026b2:	6813      	ldr	r3, [r2, #0]
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition.*/
  usbp->state = USB_ACTIVE;
 80026b4:	2104      	movs	r1, #4
 80026b6:	7001      	strb	r1, [r0, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80026b8:	b103      	cbz	r3, 80026bc <_usb_wakeup+0xc>
 80026ba:	4718      	bx	r3
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop

080026c0 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80026c0:	b570      	push	{r4, r5, r6, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80026c2:	2300      	movs	r3, #0
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80026c4:	4604      	mov	r4, r0
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80026c6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 80026ca:	f100 0244 	add.w	r2, r0, #68	; 0x44
 80026ce:	f001 fedf 	bl	8004490 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80026d2:	6863      	ldr	r3, [r4, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	b35b      	cbz	r3, 8002730 <_usb_ep0setup+0x70>
      !(usbp->config->requests_hook_cb(usbp))) {
 80026d8:	4620      	mov	r0, r4
 80026da:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80026dc:	b340      	cbz	r0, 8002730 <_usb_ep0setup+0x70>
 80026de:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80026e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 80026e4:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 80026e8:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 80026ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 80026f0:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 80026f2:	bf3c      	itt	cc
 80026f4:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 80026f6:	4615      	movcc	r5, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80026f8:	061a      	lsls	r2, r3, #24
 80026fa:	f100 8089 	bmi.w	8002810 <_usb_ep0setup+0x150>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 80026fe:	2d00      	cmp	r5, #0
 8002700:	d151      	bne.n	80027a6 <_usb_ep0setup+0xe6>
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 8002702:	2305      	movs	r3, #5
 8002704:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002708:	2320      	movs	r3, #32
 800270a:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800270e:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002710:	8922      	ldrh	r2, [r4, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002712:	695b      	ldr	r3, [r3, #20]
  /*lint -restore*/
  isp->txbuf  = buf;
 8002714:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	8122      	strh	r2, [r4, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 800271c:	4620      	mov	r0, r4

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 800271e:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 8002720:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 8002722:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002724:	4629      	mov	r1, r5
 8002726:	f001 ff5b 	bl	80045e0 <usb_lld_start_in>
 800272a:	f385 8811 	msr	BASEPRI, r5
 800272e:	bd70      	pop	{r4, r5, r6, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8002730:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002734:	f013 0660 	ands.w	r6, r3, #96	; 0x60
 8002738:	461a      	mov	r2, r3
 800273a:	d011      	beq.n	8002760 <_usb_ep0setup+0xa0>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 800273c:	2100      	movs	r1, #0
 800273e:	4620      	mov	r0, r4
 8002740:	f002 f94e 	bl	80049e0 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 8002744:	2100      	movs	r1, #0
 8002746:	4620      	mov	r0, r4
 8002748:	f002 f93a 	bl	80049c0 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800274c:	6863      	ldr	r3, [r4, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b113      	cbz	r3, 8002758 <_usb_ep0setup+0x98>
 8002752:	2105      	movs	r1, #5
 8002754:	4620      	mov	r0, r4
 8002756:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 8002758:	2306      	movs	r3, #6
 800275a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800275e:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002760:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8002764:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8002768:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
 800276c:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8002770:	f000 8102 	beq.w	8002978 <_usb_ep0setup+0x2b8>
 8002774:	d92f      	bls.n	80027d6 <_usb_ep0setup+0x116>
 8002776:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800277a:	f000 80e4 	beq.w	8002946 <_usb_ep0setup+0x286>
 800277e:	d960      	bls.n	8002842 <_usb_ep0setup+0x182>
 8002780:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 8002784:	f000 8089 	beq.w	800289a <_usb_ep0setup+0x1da>
 8002788:	f640 4202 	movw	r2, #3074	; 0xc02
 800278c:	4295      	cmp	r5, r2
 800278e:	f000 8105 	beq.w	800299c <_usb_ep0setup+0x2dc>
 8002792:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002796:	d1d1      	bne.n	800273c <_usb_ep0setup+0x7c>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8002798:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 800279c:	2501      	movs	r5, #1
 800279e:	6426      	str	r6, [r4, #64]	; 0x40
 80027a0:	63a2      	str	r2, [r4, #56]	; 0x38
 80027a2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80027a4:	e79e      	b.n	80026e4 <_usb_ep0setup+0x24>
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 80027a6:	2304      	movs	r3, #4
 80027a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80027ac:	2320      	movs	r3, #32
 80027ae:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80027b2:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80027b4:	8962      	ldrh	r2, [r4, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80027b6:	699b      	ldr	r3, [r3, #24]
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, usbp->ep0next, usbp->ep0n);
 80027b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80027ba:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80027bc:	f042 0201 	orr.w	r2, r2, #1
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 80027c0:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80027c2:	8162      	strh	r2, [r4, #10]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 80027c4:	4620      	mov	r0, r4
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 80027c6:	e883 0062 	stmia.w	r3, {r1, r5, r6}
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 80027ca:	4629      	mov	r1, r5
 80027cc:	f001 fe70 	bl	80044b0 <usb_lld_start_out>
 80027d0:	f385 8811 	msr	BASEPRI, r5
 80027d4:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80027d6:	2d02      	cmp	r5, #2
 80027d8:	f000 809e 	beq.w	8002918 <_usb_ep0setup+0x258>
 80027dc:	f240 8092 	bls.w	8002904 <_usb_ep0setup+0x244>
 80027e0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80027e4:	d07f      	beq.n	80028e6 <_usb_ep0setup+0x226>
 80027e6:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 80027ea:	d1a7      	bne.n	800273c <_usb_ep0setup+0x7c>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80027ec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1a3      	bne.n	800273c <_usb_ep0setup+0x7c>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80027f4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80027f8:	f013 010f 	ands.w	r1, r3, #15
 80027fc:	d02f      	beq.n	800285e <_usb_ep0setup+0x19e>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80027fe:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 8002800:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8002802:	f100 80f2 	bmi.w	80029ea <_usb_ep0setup+0x32a>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 8002806:	f002 f8fb 	bl	8004a00 <usb_lld_clear_out>
 800280a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800280e:	e026      	b.n	800285e <_usb_ep0setup+0x19e>
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 8002810:	b365      	cbz	r5, 800286c <_usb_ep0setup+0x1ac>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8002812:	2301      	movs	r3, #1
 8002814:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002818:	2320      	movs	r3, #32
 800281a:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800281e:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002820:	8922      	ldrh	r2, [r4, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002822:	695b      	ldr	r3, [r3, #20]
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8002824:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002826:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002828:	f042 0201 	orr.w	r2, r2, #1
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 800282c:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800282e:	8122      	strh	r2, [r4, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002830:	4620      	mov	r0, r4
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 8002832:	e883 0062 	stmia.w	r3, {r1, r5, r6}
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002836:	4629      	mov	r1, r5
 8002838:	f001 fed2 	bl	80045e0 <usb_lld_start_in>
 800283c:	f385 8811 	msr	BASEPRI, r5
 8002840:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002842:	f240 3302 	movw	r3, #770	; 0x302
 8002846:	429d      	cmp	r5, r3
 8002848:	d03a      	beq.n	80028c0 <_usb_ep0setup+0x200>
 800284a:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 800284e:	f47f af75 	bne.w	800273c <_usb_ep0setup+0x7c>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 8002852:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8002856:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800285a:	f000 80b4 	beq.w	80029c6 <_usb_ep0setup+0x306>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800285e:	2300      	movs	r3, #0
 8002860:	63a3      	str	r3, [r4, #56]	; 0x38
 8002862:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002864:	6423      	str	r3, [r4, #64]	; 0x40
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8002866:	0613      	lsls	r3, r2, #24
 8002868:	f57f af4b 	bpl.w	8002702 <_usb_ep0setup+0x42>
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800286c:	2303      	movs	r3, #3
 800286e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002872:	2320      	movs	r3, #32
 8002874:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8002878:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800287a:	8962      	ldrh	r2, [r4, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 800287c:	699b      	ldr	r3, [r3, #24]
  /*lint -restore*/
  osp->rxbuf  = buf;
 800287e:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	8162      	strh	r2, [r4, #10]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 8002886:	4620      	mov	r0, r4

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 8002888:	609d      	str	r5, [r3, #8]
  osp->rxsize = n;
 800288a:	601d      	str	r5, [r3, #0]
  osp->rxcnt  = 0;
 800288c:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 800288e:	4629      	mov	r1, r5
 8002890:	f001 fe0e 	bl	80044b0 <usb_lld_start_out>
 8002894:	f385 8811 	msr	BASEPRI, r5
 8002898:	bd70      	pop	{r4, r5, r6, pc}
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 800289a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800289e:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 8081 	bne.w	80029aa <_usb_ep0setup+0x2ea>
      usbp->state = USB_SELECTED;
 80028a8:	2303      	movs	r3, #3
 80028aa:	7023      	strb	r3, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80028ac:	6863      	ldr	r3, [r4, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0d4      	beq.n	800285e <_usb_ep0setup+0x19e>
 80028b4:	2102      	movs	r1, #2
 80028b6:	4620      	mov	r0, r4
 80028b8:	4798      	blx	r3
 80028ba:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80028be:	e7ce      	b.n	800285e <_usb_ep0setup+0x19e>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80028c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f47f af39 	bne.w	800273c <_usb_ep0setup+0x7c>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80028ca:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80028ce:	f013 010f 	ands.w	r1, r3, #15
 80028d2:	d0c4      	beq.n	800285e <_usb_ep0setup+0x19e>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80028d4:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 80028d6:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80028d8:	f100 808c 	bmi.w	80029f4 <_usb_ep0setup+0x334>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 80028dc:	f002 f870 	bl	80049c0 <usb_lld_stall_out>
 80028e0:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80028e4:	e7bb      	b.n	800285e <_usb_ep0setup+0x19e>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80028e6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	f47f af26 	bne.w	800273c <_usb_ep0setup+0x7c>
      usbp->status &= ~2U;
 80028f0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80028f4:	63a6      	str	r6, [r4, #56]	; 0x38
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 80028f6:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80028fa:	63e6      	str	r6, [r4, #60]	; 0x3c
 80028fc:	6426      	str	r6, [r4, #64]	; 0x40
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 80028fe:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8002902:	e7b0      	b.n	8002866 <_usb_ep0setup+0x1a6>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002904:	2d00      	cmp	r5, #0
 8002906:	d146      	bne.n	8002996 <_usb_ep0setup+0x2d6>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8002908:	2002      	movs	r0, #2
 800290a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800290e:	6425      	str	r5, [r4, #64]	; 0x40
 8002910:	63a2      	str	r2, [r4, #56]	; 0x38
 8002912:	63e0      	str	r0, [r4, #60]	; 0x3c
 8002914:	4605      	mov	r5, r0
 8002916:	e6e5      	b.n	80026e4 <_usb_ep0setup+0x24>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8002918:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800291c:	f011 0f80 	tst.w	r1, #128	; 0x80
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 8002920:	4620      	mov	r0, r4
 8002922:	f001 010f 	and.w	r1, r1, #15
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8002926:	d143      	bne.n	80029b0 <_usb_ep0setup+0x2f0>
      default:
        return false;
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 8002928:	f001 fd92 	bl	8004450 <usb_lld_get_status_out>
 800292c:	2801      	cmp	r0, #1
 800292e:	d043      	beq.n	80029b8 <_usb_ep0setup+0x2f8>
 8002930:	2802      	cmp	r0, #2
 8002932:	f47f af03 	bne.w	800273c <_usb_ep0setup+0x7c>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8002936:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <_usb_ep0setup+0x340>)
 8002938:	63a3      	str	r3, [r4, #56]	; 0x38
 800293a:	63e0      	str	r0, [r4, #60]	; 0x3c
 800293c:	6426      	str	r6, [r4, #64]	; 0x40
 800293e:	4605      	mov	r5, r0
 8002940:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002944:	e6ce      	b.n	80026e4 <_usb_ep0setup+0x24>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8002946:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800294a:	6861      	ldr	r1, [r4, #4]
 800294c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8002950:	684d      	ldr	r5, [r1, #4]
 8002952:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8002956:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 800295a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800295e:	4620      	mov	r0, r4
 8002960:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8002962:	2800      	cmp	r0, #0
 8002964:	f43f aeea 	beq.w	800273c <_usb_ep0setup+0x7c>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8002968:	6843      	ldr	r3, [r0, #4]
 800296a:	6805      	ldr	r5, [r0, #0]
 800296c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800296e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002970:	6426      	str	r6, [r4, #64]	; 0x40
 8002972:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002976:	e6b5      	b.n	80026e4 <_usb_ep0setup+0x24>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8002978:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800297c:	2b01      	cmp	r3, #1
 800297e:	f47f aedd 	bne.w	800273c <_usb_ep0setup+0x7c>
      usbp->status |= 2U;
 8002982:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002986:	63a6      	str	r6, [r4, #56]	; 0x38
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8002988:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800298c:	63e6      	str	r6, [r4, #60]	; 0x3c
 800298e:	6426      	str	r6, [r4, #64]	; 0x40
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8002990:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8002994:	e767      	b.n	8002866 <_usb_ep0setup+0x1a6>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002996:	2d01      	cmp	r5, #1
 8002998:	f47f aed0 	bne.w	800273c <_usb_ep0setup+0x7c>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800299c:	4a19      	ldr	r2, [pc, #100]	; (8002a04 <_usb_ep0setup+0x344>)
 800299e:	63a2      	str	r2, [r4, #56]	; 0x38
 80029a0:	2502      	movs	r5, #2
 80029a2:	2200      	movs	r2, #0
 80029a4:	63e5      	str	r5, [r4, #60]	; 0x3c
 80029a6:	6422      	str	r2, [r4, #64]	; 0x40
 80029a8:	e69c      	b.n	80026e4 <_usb_ep0setup+0x24>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 80029aa:	2304      	movs	r3, #4
 80029ac:	7023      	strb	r3, [r4, #0]
 80029ae:	e77d      	b.n	80028ac <_usb_ep0setup+0x1ec>
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 80029b0:	f001 fd5e 	bl	8004470 <usb_lld_get_status_in>
 80029b4:	2801      	cmp	r0, #1
 80029b6:	d1bb      	bne.n	8002930 <_usb_ep0setup+0x270>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <_usb_ep0setup+0x348>)
 80029ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80029bc:	63e5      	str	r5, [r4, #60]	; 0x3c
 80029be:	6426      	str	r6, [r4, #64]	; 0x40
 80029c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80029c4:	e68e      	b.n	80026e4 <_usb_ep0setup+0x24>
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 80029c6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80029ca:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 80029ce:	4620      	mov	r0, r4
 80029d0:	f001 fc76 	bl	80042c0 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80029d4:	6863      	ldr	r3, [r4, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	b113      	cbz	r3, 80029e0 <_usb_ep0setup+0x320>
 80029da:	2101      	movs	r1, #1
 80029dc:	4620      	mov	r0, r4
 80029de:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 80029e0:	2303      	movs	r3, #3
 80029e2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80029e6:	7023      	strb	r3, [r4, #0]
 80029e8:	e739      	b.n	800285e <_usb_ep0setup+0x19e>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 80029ea:	f002 f819 	bl	8004a20 <usb_lld_clear_in>
 80029ee:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80029f2:	e734      	b.n	800285e <_usb_ep0setup+0x19e>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 80029f4:	f001 fff4 	bl	80049e0 <usb_lld_stall_in>
 80029f8:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80029fc:	e72f      	b.n	800285e <_usb_ep0setup+0x19e>
 80029fe:	bf00      	nop
 8002a00:	080079f0 	.word	0x080079f0
 8002a04:	080079e0 	.word	0x080079e0
 8002a08:	08007a00 	.word	0x08007a00
 8002a0c:	00000000 	.word	0x00000000

08002a10 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8002a10:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8002a12:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8002a16:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8002a18:	2b06      	cmp	r3, #6
 8002a1a:	d815      	bhi.n	8002a48 <_usb_ep0in+0x38>
 8002a1c:	e8df f003 	tbb	[pc, r3]
 8002a20:	04251504 	.word	0x04251504
 8002a24:	3c04      	.short	0x3c04
 8002a26:	04          	.byte	0x04
 8002a27:	00          	.byte	0x00
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8002a28:	2100      	movs	r1, #0
 8002a2a:	f001 ffd9 	bl	80049e0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4620      	mov	r0, r4
 8002a32:	f001 ffc5 	bl	80049c0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002a36:	6863      	ldr	r3, [r4, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	b113      	cbz	r3, 8002a42 <_usb_ep0in+0x32>
 8002a3c:	2105      	movs	r1, #5
 8002a3e:	4620      	mov	r0, r4
 8002a40:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8002a42:	2306      	movs	r3, #6
 8002a44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002a48:	bd38      	pop	{r3, r4, r5, pc}
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8002a4a:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 8002a4e:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 8002a52:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002a54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d906      	bls.n	8002a6a <_usb_ep0in+0x5a>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8002a5c:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8002a5e:	8a1d      	ldrh	r5, [r3, #16]
 8002a60:	fbb2 f3f5 	udiv	r3, r2, r5
 8002a64:	fb05 2513 	mls	r5, r5, r3, r2
 8002a68:	b1ed      	cbz	r5, 8002aa6 <_usb_ep0in+0x96>
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002a70:	2320      	movs	r3, #32
 8002a72:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8002a76:	68e3      	ldr	r3, [r4, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002a78:	8962      	ldrh	r2, [r4, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8002a7a:	699b      	ldr	r3, [r3, #24]
  /*lint -restore*/
  osp->rxbuf  = buf;
 8002a7c:	2500      	movs	r5, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	8162      	strh	r2, [r4, #10]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 8002a84:	4620      	mov	r0, r4

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 8002a86:	609d      	str	r5, [r3, #8]
  osp->rxsize = n;
 8002a88:	601d      	str	r5, [r3, #0]
  osp->rxcnt  = 0;
 8002a8a:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	f001 fd0f 	bl	80044b0 <usb_lld_start_out>
 8002a92:	f385 8811 	msr	BASEPRI, r5
 8002a96:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 8002a98:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a9a:	b103      	cbz	r3, 8002a9e <_usb_ep0in+0x8e>
      usbp->ep0endcb(usbp);
 8002a9c:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 8002aa4:	bd38      	pop	{r3, r4, r5, pc}
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002aac:	68c3      	ldr	r3, [r0, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002aae:	8902      	ldrh	r2, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002ab0:	695b      	ldr	r3, [r3, #20]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	8102      	strh	r2, [r0, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002ab8:	4629      	mov	r1, r5

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 8002aba:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 8002abc:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 8002abe:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002ac0:	f001 fd8e 	bl	80045e0 <usb_lld_start_in>
 8002ac4:	f385 8811 	msr	BASEPRI, r5
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, NULL, 0);
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 8002ace:	bd38      	pop	{r3, r4, r5, pc}

08002ad0 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8002ad0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8002ad4:	2a06      	cmp	r2, #6
 8002ad6:	d80c      	bhi.n	8002af2 <_usb_ep0out+0x22>
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8002ad8:	b538      	push	{r3, r4, r5, lr}
 8002ada:	2301      	movs	r3, #1
 8002adc:	4093      	lsls	r3, r2
 8002ade:	f013 0f67 	tst.w	r3, #103	; 0x67
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	d112      	bne.n	8002b0c <_usb_ep0out+0x3c>
 8002ae6:	f013 0508 	ands.w	r5, r3, #8
 8002aea:	d103      	bne.n	8002af4 <_usb_ep0out+0x24>
 8002aec:	06db      	lsls	r3, r3, #27
 8002aee:	d41e      	bmi.n	8002b2e <_usb_ep0out+0x5e>
 8002af0:	bd38      	pop	{r3, r4, r5, pc}
 8002af2:	4770      	bx	lr
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8002af4:	68c3      	ldr	r3, [r0, #12]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f8      	bne.n	8002af0 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8002afe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b00:	b103      	cbz	r3, 8002b04 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 8002b02:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 8002b0a:	bd38      	pop	{r3, r4, r5, pc}
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	f001 ff67 	bl	80049e0 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8002b12:	2100      	movs	r1, #0
 8002b14:	4620      	mov	r0, r4
 8002b16:	f001 ff53 	bl	80049c0 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002b1a:	6863      	ldr	r3, [r4, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b113      	cbz	r3, 8002b26 <_usb_ep0out+0x56>
 8002b20:	2105      	movs	r1, #5
 8002b22:	4620      	mov	r0, r4
 8002b24:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8002b26:	2306      	movs	r3, #6
 8002b28:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002b2c:	bd38      	pop	{r3, r4, r5, pc}

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8002b2e:	2305      	movs	r3, #5
 8002b30:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8002b34:	2320      	movs	r3, #32
 8002b36:	f383 8811 	msr	BASEPRI, r3
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002b3a:	68c3      	ldr	r3, [r0, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002b3c:	8902      	ldrh	r2, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002b3e:	695b      	ldr	r3, [r3, #20]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002b40:	f042 0201 	orr.w	r2, r2, #1
 8002b44:	8102      	strh	r2, [r0, #8]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002b46:	4629      	mov	r1, r5

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 8002b48:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 8002b4a:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 8002b4c:	605d      	str	r5, [r3, #4]
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002b4e:	f001 fd47 	bl	80045e0 <usb_lld_start_in>
 8002b52:	f385 8811 	msr	BASEPRI, r5
 8002b56:	bd38      	pop	{r3, r4, r5, pc}
	...

08002b60 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8002b60:	0943      	lsrs	r3, r0, #5
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	b410      	push	{r4}
 8002b66:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002b6a:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8002b6e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8002b72:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002b76:	0109      	lsls	r1, r1, #4
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002b78:	f000 001f 	and.w	r0, r0, #31
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	fa02 f000 	lsl.w	r0, r2, r0

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002b82:	b2c9      	uxtb	r1, r1
 8002b84:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002b88:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002b8c:	6018      	str	r0, [r3, #0]
}
 8002b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b92:	4770      	bx	lr
	...

08002ba0 <nvicSetSystemHandlerPriority>:
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
#else
  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 8002ba0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002ba4:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 8002ba8:	0109      	lsls	r1, r1, #4
 8002baa:	b2c9      	uxtb	r1, r1
 8002bac:	7601      	strb	r1, [r0, #24]
 8002bae:	4770      	bx	lr

08002bb0 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <hal_lld_init+0x60>)
 8002bb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8002bba:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8002bbc:	6119      	str	r1, [r3, #16]
 8002bbe:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8002bc0:	6958      	ldr	r0, [r3, #20]
 8002bc2:	6159      	str	r1, [r3, #20]
 8002bc4:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8002bc6:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002bc8:	4c12      	ldr	r4, [pc, #72]	; (8002c14 <hal_lld_init+0x64>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8002bca:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8002bce:	6218      	str	r0, [r3, #32]
 8002bd0:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8002bd2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002bd4:	6259      	str	r1, [r3, #36]	; 0x24
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8002bd8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002bda:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002bde:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002be0:	6821      	ldr	r1, [r4, #0]
 8002be2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002be6:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8002be8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002bea:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002bee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002bf2:	d003      	beq.n	8002bfc <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8002bf4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002bf8:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8002bfa:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8002bfc:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8002bfe:	f85d 4b04 	ldr.w	r4, [sp], #4

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8002c02:	6853      	ldr	r3, [r2, #4]
 8002c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c08:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8002c0a:	f000 b9f1 	b.w	8002ff0 <dmaInit>
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40007000 	.word	0x40007000
	...

08002c20 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002c20:	492c      	ldr	r1, [pc, #176]	; (8002cd4 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002c22:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002c24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002c28:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002c2c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002c2e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002c30:	680b      	ldr	r3, [r1, #0]
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002c38:	680a      	ldr	r2, [r1, #0]
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <stm32_clock_init+0xb4>)
 8002c3c:	0790      	lsls	r0, r2, #30
 8002c3e:	d5fb      	bpl.n	8002c38 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	f022 0203 	bic.w	r2, r2, #3
 8002c46:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	688b      	ldr	r3, [r1, #8]
 8002c50:	4a20      	ldr	r2, [pc, #128]	; (8002cd4 <stm32_clock_init+0xb4>)
 8002c52:	f013 030c 	ands.w	r3, r3, #12
 8002c56:	d1fa      	bne.n	8002c4e <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002c58:	6811      	ldr	r1, [r2, #0]
 8002c5a:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8002c5e:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002c60:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8002c62:	6813      	ldr	r3, [r2, #0]
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8002c6a:	6811      	ldr	r1, [r2, #0]
 8002c6c:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <stm32_clock_init+0xb4>)
 8002c6e:	0389      	lsls	r1, r1, #14
 8002c70:	d5fb      	bpl.n	8002c6a <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8002c72:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002c74:	f042 0201 	orr.w	r2, r2, #1
 8002c78:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8002c7a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002c7c:	4915      	ldr	r1, [pc, #84]	; (8002cd4 <stm32_clock_init+0xb4>)
 8002c7e:	0790      	lsls	r0, r2, #30
 8002c80:	d5fb      	bpl.n	8002c7a <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8002c82:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <stm32_clock_init+0xbc>)
 8002c84:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8002c86:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002c88:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8002c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002c90:	6853      	ldr	r3, [r2, #4]
 8002c92:	0459      	lsls	r1, r3, #17
 8002c94:	d5fc      	bpl.n	8002c90 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002c96:	490f      	ldr	r1, [pc, #60]	; (8002cd4 <stm32_clock_init+0xb4>)
 8002c98:	680a      	ldr	r2, [r1, #0]
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <stm32_clock_init+0xb4>)
 8002c9c:	0192      	lsls	r2, r2, #6
 8002c9e:	d5fb      	bpl.n	8002c98 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002ca0:	4a0f      	ldr	r2, [pc, #60]	; (8002ce0 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8002ca2:	4910      	ldr	r1, [pc, #64]	; (8002ce4 <stm32_clock_init+0xc4>)
 8002ca4:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002ca6:	f240 7105 	movw	r1, #1797	; 0x705
 8002caa:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	f042 0202 	orr.w	r2, r2, #2
 8002cb2:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	6893      	ldr	r3, [r2, #8]
 8002cb8:	4906      	ldr	r1, [pc, #24]	; (8002cd4 <stm32_clock_init+0xb4>)
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d1f9      	bne.n	8002cb6 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8002cc2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8002cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc8:	644b      	str	r3, [r1, #68]	; 0x44
 8002cca:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8002ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd0:	664b      	str	r3, [r1, #100]	; 0x64
 8002cd2:	4770      	bx	lr
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	07405408 	.word	0x07405408
 8002ce0:	40023c00 	.word	0x40023c00
 8002ce4:	38889400 	.word	0x38889400
	...

08002cf0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8002cf0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
 8002cf4:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8002cfc:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8002cfe:	6813      	ldr	r3, [r2, #0]
 8002d00:	b10b      	cbz	r3, 8002d06 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8002d02:	6850      	ldr	r0, [r2, #4]
 8002d04:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002d0a:	f7fe bdf9 	b.w	8001900 <_port_irq_epilogue>
 8002d0e:	bf00      	nop
 8002d10:	40026000 	.word	0x40026000
 8002d14:	20000ef0 	.word	0x20000ef0
	...

08002d20 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 8002d22:	4809      	ldr	r0, [pc, #36]	; (8002d48 <Vector70+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002d24:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 8002d26:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002d28:	0989      	lsrs	r1, r1, #6
 8002d2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002d2e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
 8002d30:	018c      	lsls	r4, r1, #6
 8002d32:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8002d34:	b10a      	cbz	r2, 8002d3a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8002d36:	68c0      	ldr	r0, [r0, #12]
 8002d38:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002d3e:	f7fe bddf 	b.w	8001900 <_port_irq_epilogue>
 8002d42:	bf00      	nop
 8002d44:	40026000 	.word	0x40026000
 8002d48:	20000ef0 	.word	0x20000ef0
 8002d4c:	00000000 	.word	0x00000000

08002d50 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 8002d52:	4809      	ldr	r0, [pc, #36]	; (8002d78 <Vector74+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002d54:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 8002d56:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002d58:	0c09      	lsrs	r1, r1, #16
 8002d5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8002d5e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
 8002d60:	040c      	lsls	r4, r1, #16
 8002d62:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 8002d64:	b10a      	cbz	r2, 8002d6a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8002d66:	6940      	ldr	r0, [r0, #20]
 8002d68:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002d6e:	f7fe bdc7 	b.w	8001900 <_port_irq_epilogue>
 8002d72:	bf00      	nop
 8002d74:	40026000 	.word	0x40026000
 8002d78:	20000ef0 	.word	0x20000ef0
 8002d7c:	00000000 	.word	0x00000000

08002d80 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 8002d82:	4809      	ldr	r0, [pc, #36]	; (8002da8 <Vector78+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002d84:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 8002d86:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002d88:	0d89      	lsrs	r1, r1, #22
 8002d8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8002d8e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
 8002d90:	058c      	lsls	r4, r1, #22
 8002d92:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8002d94:	b10a      	cbz	r2, 8002d9a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8002d96:	69c0      	ldr	r0, [r0, #28]
 8002d98:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002d9e:	f7fe bdaf 	b.w	8001900 <_port_irq_epilogue>
 8002da2:	bf00      	nop
 8002da4:	40026000 	.word	0x40026000
 8002da8:	20000ef0 	.word	0x20000ef0
 8002dac:	00000000 	.word	0x00000000

08002db0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002db0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 8002db4:	4807      	ldr	r0, [pc, #28]	; (8002dd4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002db6:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 8002db8:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002dba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8002dbe:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8002dc0:	b10a      	cbz	r2, 8002dc6 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8002dc2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002dc4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002dc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002dca:	f7fe bd99 	b.w	8001900 <_port_irq_epilogue>
 8002dce:	bf00      	nop
 8002dd0:	40026000 	.word	0x40026000
 8002dd4:	20000ef0 	.word	0x20000ef0
	...

08002de0 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 8002de2:	4809      	ldr	r0, [pc, #36]	; (8002e08 <Vector80+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002de4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 8002de6:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002de8:	0989      	lsrs	r1, r1, #6
 8002dea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002dee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
 8002df0:	018c      	lsls	r4, r1, #6
 8002df2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8002df4:	b10a      	cbz	r2, 8002dfa <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8002df6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002df8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002dfe:	f7fe bd7f 	b.w	8001900 <_port_irq_epilogue>
 8002e02:	bf00      	nop
 8002e04:	40026000 	.word	0x40026000
 8002e08:	20000ef0 	.word	0x20000ef0
 8002e0c:	00000000 	.word	0x00000000

08002e10 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 8002e12:	4809      	ldr	r0, [pc, #36]	; (8002e38 <Vector84+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002e14:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 8002e16:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002e18:	0c09      	lsrs	r1, r1, #16
 8002e1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8002e1e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
 8002e20:	040c      	lsls	r4, r1, #16
 8002e22:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8002e24:	b10a      	cbz	r2, 8002e2a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8002e26:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002e28:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e2e:	f7fe bd67 	b.w	8001900 <_port_irq_epilogue>
 8002e32:	bf00      	nop
 8002e34:	40026000 	.word	0x40026000
 8002e38:	20000ef0 	.word	0x20000ef0
 8002e3c:	00000000 	.word	0x00000000

08002e40 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 8002e42:	4809      	ldr	r0, [pc, #36]	; (8002e68 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002e44:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 8002e46:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002e48:	0d89      	lsrs	r1, r1, #22
 8002e4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002e4e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
 8002e50:	058c      	lsls	r4, r1, #22
 8002e52:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8002e54:	b10a      	cbz	r2, 8002e5a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8002e56:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002e58:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e5e:	f7fe bd4f 	b.w	8001900 <_port_irq_epilogue>
 8002e62:	bf00      	nop
 8002e64:	40026000 	.word	0x40026000
 8002e68:	20000ef0 	.word	0x20000ef0
 8002e6c:	00000000 	.word	0x00000000

08002e70 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002e70:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 8002e74:	4807      	ldr	r0, [pc, #28]	; (8002e94 <Vector120+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e76:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 8002e78:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e7a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8002e7e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8002e80:	b10a      	cbz	r2, 8002e86 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8002e82:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002e84:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e8a:	f7fe bd39 	b.w	8001900 <_port_irq_epilogue>
 8002e8e:	bf00      	nop
 8002e90:	40026400 	.word	0x40026400
 8002e94:	20000ef0 	.word	0x20000ef0
	...

08002ea0 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 8002ea2:	4809      	ldr	r0, [pc, #36]	; (8002ec8 <Vector124+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002ea4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 8002ea6:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002ea8:	0989      	lsrs	r1, r1, #6
 8002eaa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002eae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
 8002eb0:	018c      	lsls	r4, r1, #6
 8002eb2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8002eb4:	b10a      	cbz	r2, 8002eba <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8002eb6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8002eb8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002ebe:	f7fe bd1f 	b.w	8001900 <_port_irq_epilogue>
 8002ec2:	bf00      	nop
 8002ec4:	40026400 	.word	0x40026400
 8002ec8:	20000ef0 	.word	0x20000ef0
 8002ecc:	00000000 	.word	0x00000000

08002ed0 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8002ed2:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <Vector128+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002ed4:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8002ed6:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002ed8:	0c09      	lsrs	r1, r1, #16
 8002eda:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002ede:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
 8002ee0:	040c      	lsls	r4, r1, #16
 8002ee2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8002ee4:	b10a      	cbz	r2, 8002eea <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8002ee6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8002ee8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002eee:	f7fe bd07 	b.w	8001900 <_port_irq_epilogue>
 8002ef2:	bf00      	nop
 8002ef4:	40026400 	.word	0x40026400
 8002ef8:	20000ef0 	.word	0x20000ef0
 8002efc:	00000000 	.word	0x00000000

08002f00 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8002f02:	4809      	ldr	r0, [pc, #36]	; (8002f28 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002f04:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8002f06:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002f08:	0d89      	lsrs	r1, r1, #22
 8002f0a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8002f0e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
 8002f10:	058c      	lsls	r4, r1, #22
 8002f12:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8002f14:	b10a      	cbz	r2, 8002f1a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8002f16:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8002f18:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f1e:	f7fe bcef 	b.w	8001900 <_port_irq_epilogue>
 8002f22:	bf00      	nop
 8002f24:	40026400 	.word	0x40026400
 8002f28:	20000ef0 	.word	0x20000ef0
 8002f2c:	00000000 	.word	0x00000000

08002f30 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002f30:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8002f34:	4807      	ldr	r0, [pc, #28]	; (8002f54 <Vector130+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002f36:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8002f38:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002f3a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8002f3e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8002f40:	b10a      	cbz	r2, 8002f46 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8002f42:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8002f44:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f4a:	f7fe bcd9 	b.w	8001900 <_port_irq_epilogue>
 8002f4e:	bf00      	nop
 8002f50:	40026400 	.word	0x40026400
 8002f54:	20000ef0 	.word	0x20000ef0
	...

08002f60 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8002f62:	4809      	ldr	r0, [pc, #36]	; (8002f88 <Vector150+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002f64:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8002f66:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002f68:	0989      	lsrs	r1, r1, #6
 8002f6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002f6e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
 8002f70:	018c      	lsls	r4, r1, #6
 8002f72:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8002f74:	b10a      	cbz	r2, 8002f7a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8002f76:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8002f78:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f7e:	f7fe bcbf 	b.w	8001900 <_port_irq_epilogue>
 8002f82:	bf00      	nop
 8002f84:	40026400 	.word	0x40026400
 8002f88:	20000ef0 	.word	0x20000ef0
 8002f8c:	00000000 	.word	0x00000000

08002f90 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002f90:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8002f92:	4809      	ldr	r0, [pc, #36]	; (8002fb8 <Vector154+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002f94:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8002f96:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002f98:	0c09      	lsrs	r1, r1, #16
 8002f9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8002f9e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
 8002fa0:	040c      	lsls	r4, r1, #16
 8002fa2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8002fa4:	b10a      	cbz	r2, 8002faa <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8002fa6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8002fa8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002fae:	f7fe bca7 	b.w	8001900 <_port_irq_epilogue>
 8002fb2:	bf00      	nop
 8002fb4:	40026400 	.word	0x40026400
 8002fb8:	20000ef0 	.word	0x20000ef0
 8002fbc:	00000000 	.word	0x00000000

08002fc0 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8002fc2:	4809      	ldr	r0, [pc, #36]	; (8002fe8 <Vector158+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002fc4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8002fc6:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002fc8:	0d89      	lsrs	r1, r1, #22
 8002fca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8002fce:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
 8002fd0:	058c      	lsls	r4, r1, #22
 8002fd2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8002fd4:	b10a      	cbz	r2, 8002fda <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8002fd6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8002fd8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002fde:	f7fe bc8f 	b.w	8001900 <_port_irq_epilogue>
 8002fe2:	bf00      	nop
 8002fe4:	40026400 	.word	0x40026400
 8002fe8:	20000ef0 	.word	0x20000ef0
 8002fec:	00000000 	.word	0x00000000

08002ff0 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8002ff0:	490e      	ldr	r1, [pc, #56]	; (800302c <dmaInit+0x3c>)
 8002ff2:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <dmaInit+0x40>)
 8002ff4:	480f      	ldr	r0, [pc, #60]	; (8003034 <dmaInit+0x44>)
 8002ff6:	2300      	movs	r3, #0
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8002ff8:	b410      	push	{r4}
  unsigned i;

  dma_streams_mask = 0U;
 8002ffa:	600b      	str	r3, [r1, #0]
 8002ffc:	4c0e      	ldr	r4, [pc, #56]	; (8003038 <dmaInit+0x48>)
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
 8002ffe:	4619      	mov	r1, r3
 8003000:	e001      	b.n	8003006 <dmaInit+0x16>
 8003002:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8003006:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 8003008:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 800300c:	3301      	adds	r3, #1
 800300e:	2b10      	cmp	r3, #16
 8003010:	f102 020c 	add.w	r2, r2, #12
 8003014:	d1f5      	bne.n	8003002 <dmaInit+0x12>
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8003016:	4909      	ldr	r1, [pc, #36]	; (800303c <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8003018:	4a09      	ldr	r2, [pc, #36]	; (8003040 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFFU;
}
 800301a:	f85d 4b04 	ldr.w	r4, [sp], #4
  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003022:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8003024:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8003026:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8003028:	60d3      	str	r3, [r2, #12]
}
 800302a:	4770      	bx	lr
 800302c:	20000f70 	.word	0x20000f70
 8003030:	08007a1c 	.word	0x08007a1c
 8003034:	40026010 	.word	0x40026010
 8003038:	20000ef0 	.word	0x20000ef0
 800303c:	40026000 	.word	0x40026000
 8003040:	40026400 	.word	0x40026400
	...

08003050 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8003052:	4f1f      	ldr	r7, [pc, #124]	; (80030d0 <dmaStreamAllocate+0x80>)
 8003054:	7a46      	ldrb	r6, [r0, #9]
 8003056:	683d      	ldr	r5, [r7, #0]
 8003058:	2401      	movs	r4, #1
 800305a:	fa04 fe06 	lsl.w	lr, r4, r6
 800305e:	ea1e 0f05 	tst.w	lr, r5
 8003062:	d131      	bne.n	80030c8 <dmaStreamAllocate+0x78>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8003064:	4c1b      	ldr	r4, [pc, #108]	; (80030d4 <dmaStreamAllocate+0x84>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 8003066:	ea4e 0505 	orr.w	r5, lr, r5
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800306a:	eb04 0ec6 	add.w	lr, r4, r6, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 800306e:	f015 0fff 	tst.w	r5, #255	; 0xff
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 8003072:	603d      	str	r5, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8003074:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8003078:	f8ce 3004 	str.w	r3, [lr, #4]
  dma_streams_mask |= (1U << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 800307c:	d004      	beq.n	8003088 <dmaStreamAllocate+0x38>
    rccEnableDMA1(false);
 800307e:	4c16      	ldr	r4, [pc, #88]	; (80030d8 <dmaStreamAllocate+0x88>)
 8003080:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003086:	6323      	str	r3, [r4, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 8003088:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 800308c:	d116      	bne.n	80030bc <dmaStreamAllocate+0x6c>
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800308e:	6805      	ldr	r5, [r0, #0]
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	f023 031f 	bic.w	r3, r3, #31
 8003096:	602b      	str	r3, [r5, #0]
 8003098:	682b      	ldr	r3, [r5, #0]
 800309a:	f013 0401 	ands.w	r4, r3, #1
 800309e:	d1fb      	bne.n	8003098 <dmaStreamAllocate+0x48>
 80030a0:	7a07      	ldrb	r7, [r0, #8]
 80030a2:	6846      	ldr	r6, [r0, #4]
 80030a4:	233d      	movs	r3, #61	; 0x3d
 80030a6:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80030a8:	2721      	movs	r7, #33	; 0x21
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80030aa:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 80030ac:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80030ae:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
 80030b0:	b162      	cbz	r2, 80030cc <dmaStreamAllocate+0x7c>
    nvicEnableVector(dmastp->vector, priority);
 80030b2:	7a80      	ldrb	r0, [r0, #10]
 80030b4:	f7ff fd54 	bl	8002b60 <nvicEnableVector>
  }

  return false;
 80030b8:	4620      	mov	r0, r4
 80030ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
    rccEnableDMA1(false);
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
 80030bc:	4c06      	ldr	r4, [pc, #24]	; (80030d8 <dmaStreamAllocate+0x88>)
 80030be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80030c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030c4:	6323      	str	r3, [r4, #48]	; 0x30
 80030c6:	e7e2      	b.n	800308e <dmaStreamAllocate+0x3e>

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;
 80030c8:	4620      	mov	r0, r4
 80030ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
  }

  return false;
 80030cc:	4610      	mov	r0, r2
}
 80030ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030d0:	20000f70 	.word	0x20000f70
 80030d4:	20000ef0 	.word	0x20000ef0
 80030d8:	40023800 	.word	0x40023800
 80030dc:	00000000 	.word	0x00000000

080030e0 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 80030e0:	b508      	push	{r3, lr}
 80030e2:	2320      	movs	r3, #32
 80030e4:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 80030e8:	f7fd ff5a 	bl	8000fa0 <chSysTimerHandlerI>
 80030ec:	2300      	movs	r3, #0
 80030ee:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 80030f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 80030f6:	f7fe bc03 	b.w	8001900 <_port_irq_epilogue>
 80030fa:	bf00      	nop
 80030fc:	0000      	movs	r0, r0
	...

08003100 <st_lld_init>:
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <st_lld_init+0x18>)
 8003102:	f244 119f 	movw	r1, #16799	; 0x419f
  SysTick->VAL = 0;
 8003106:	2000      	movs	r0, #0
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8003108:	2207      	movs	r2, #7
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800310a:	6059      	str	r1, [r3, #4]
  SysTick->VAL = 0;
 800310c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800310e:	2108      	movs	r1, #8
 8003110:	200b      	movs	r0, #11
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8003112:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 8003114:	f7ff bd44 	b.w	8002ba0 <nvicSetSystemHandlerPriority>
 8003118:	e000e010 	.word	0xe000e010
 800311c:	00000000 	.word	0x00000000

08003120 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8003122:	4b56      	ldr	r3, [pc, #344]	; (800327c <Vector88+0x15c>)
 8003124:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 8003126:	2100      	movs	r1, #0
 8003128:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 800312a:	0691      	lsls	r1, r2, #26
 800312c:	d531      	bpl.n	8003192 <Vector88+0x72>
 800312e:	4c54      	ldr	r4, [pc, #336]	; (8003280 <Vector88+0x160>)
 8003130:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003132:	680a      	ldr	r2, [r1, #0]
 8003134:	6853      	ldr	r3, [r2, #4]
 8003136:	b363      	cbz	r3, 8003192 <Vector88+0x72>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 8003138:	6925      	ldr	r5, [r4, #16]
 800313a:	b355      	cbz	r5, 8003192 <Vector88+0x72>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800313c:	6813      	ldr	r3, [r2, #0]
 800313e:	f023 031f 	bic.w	r3, r3, #31
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	6813      	ldr	r3, [r2, #0]
 8003146:	f013 0301 	ands.w	r3, r3, #1
 800314a:	d1fb      	bne.n	8003144 <Vector88+0x24>
 800314c:	7a08      	ldrb	r0, [r1, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 800314e:	68ae      	ldr	r6, [r5, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003150:	684f      	ldr	r7, [r1, #4]
  adcp->adc->CR1 = 0;
 8003152:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003154:	4d4a      	ldr	r5, [pc, #296]	; (8003280 <Vector88+0x160>)
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003156:	213d      	movs	r1, #61	; 0x3d
 8003158:	fa01 f000 	lsl.w	r0, r1, r0
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 800315c:	2101      	movs	r1, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800315e:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 8003160:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8003162:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8003164:	6091      	str	r1, [r2, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8003166:	b146      	cbz	r6, 800317a <Vector88+0x5a>
 8003168:	2305      	movs	r3, #5
 800316a:	702b      	strb	r3, [r5, #0]
 800316c:	4628      	mov	r0, r5
 800316e:	47b0      	blx	r6
 8003170:	782b      	ldrb	r3, [r5, #0]
 8003172:	2b05      	cmp	r3, #5
 8003174:	bf04      	itt	eq
 8003176:	2302      	moveq	r3, #2
 8003178:	702b      	strbeq	r3, [r5, #0]
 800317a:	2500      	movs	r5, #0
 800317c:	6125      	str	r5, [r4, #16]
 800317e:	2320      	movs	r3, #32
 8003180:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8003184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003188:	483e      	ldr	r0, [pc, #248]	; (8003284 <Vector88+0x164>)
 800318a:	f7fe f9c1 	bl	8001510 <chThdResumeI>
 800318e:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  sr = ADC2->SR;
 8003192:	4b3d      	ldr	r3, [pc, #244]	; (8003288 <Vector88+0x168>)
 8003194:	681a      	ldr	r2, [r3, #0]
  ADC2->SR = 0;
 8003196:	2100      	movs	r1, #0
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
 8003198:	0692      	lsls	r2, r2, #26
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  sr = ADC2->SR;
  ADC2->SR = 0;
 800319a:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
 800319c:	d531      	bpl.n	8003202 <Vector88+0xe2>
 800319e:	4c3b      	ldr	r4, [pc, #236]	; (800328c <Vector88+0x16c>)
 80031a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80031a2:	680a      	ldr	r2, [r1, #0]
 80031a4:	6853      	ldr	r3, [r2, #4]
 80031a6:	b363      	cbz	r3, 8003202 <Vector88+0xe2>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD2.grpp != NULL)
 80031a8:	6925      	ldr	r5, [r4, #16]
 80031aa:	b355      	cbz	r5, 8003202 <Vector88+0xe2>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80031ac:	6813      	ldr	r3, [r2, #0]
 80031ae:	f023 031f 	bic.w	r3, r3, #31
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	6813      	ldr	r3, [r2, #0]
 80031b6:	f013 0301 	ands.w	r3, r3, #1
 80031ba:	d1fb      	bne.n	80031b4 <Vector88+0x94>
 80031bc:	7a08      	ldrb	r0, [r1, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD2.grpp != NULL)
      _adc_isr_error_code(&ADCD2, ADC_ERR_OVERFLOW);
 80031be:	68ae      	ldr	r6, [r5, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80031c0:	684f      	ldr	r7, [r1, #4]
  adcp->adc->CR1 = 0;
 80031c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80031c4:	4d31      	ldr	r5, [pc, #196]	; (800328c <Vector88+0x16c>)
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80031c6:	213d      	movs	r1, #61	; 0x3d
 80031c8:	fa01 f000 	lsl.w	r0, r1, r0
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 80031cc:	2101      	movs	r1, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80031ce:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 80031d0:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 80031d2:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 80031d4:	6091      	str	r1, [r2, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD2.grpp != NULL)
      _adc_isr_error_code(&ADCD2, ADC_ERR_OVERFLOW);
 80031d6:	b146      	cbz	r6, 80031ea <Vector88+0xca>
 80031d8:	2305      	movs	r3, #5
 80031da:	702b      	strb	r3, [r5, #0]
 80031dc:	4628      	mov	r0, r5
 80031de:	47b0      	blx	r6
 80031e0:	782b      	ldrb	r3, [r5, #0]
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	bf04      	itt	eq
 80031e6:	2302      	moveq	r3, #2
 80031e8:	702b      	strbeq	r3, [r5, #0]
 80031ea:	2500      	movs	r5, #0
 80031ec:	6125      	str	r5, [r4, #16]
 80031ee:	2320      	movs	r3, #32
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031f8:	4825      	ldr	r0, [pc, #148]	; (8003290 <Vector88+0x170>)
 80031fa:	f7fe f989 	bl	8001510 <chThdResumeI>
 80031fe:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
  sr = ADC3->SR;
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <Vector88+0x174>)
 8003204:	681a      	ldr	r2, [r3, #0]
  ADC3->SR = 0;
 8003206:	2100      	movs	r1, #0
 8003208:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD3.dmastp) > 0)) {
 800320a:	0693      	lsls	r3, r2, #26
 800320c:	d531      	bpl.n	8003272 <Vector88+0x152>
 800320e:	4c22      	ldr	r4, [pc, #136]	; (8003298 <Vector88+0x178>)
 8003210:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003212:	680a      	ldr	r2, [r1, #0]
 8003214:	6853      	ldr	r3, [r2, #4]
 8003216:	b363      	cbz	r3, 8003272 <Vector88+0x152>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD3.grpp != NULL)
 8003218:	6925      	ldr	r5, [r4, #16]
 800321a:	b355      	cbz	r5, 8003272 <Vector88+0x152>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800321c:	6813      	ldr	r3, [r2, #0]
 800321e:	f023 031f 	bic.w	r3, r3, #31
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	f013 0301 	ands.w	r3, r3, #1
 800322a:	d1fb      	bne.n	8003224 <Vector88+0x104>
 800322c:	7a08      	ldrb	r0, [r1, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD3.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD3.grpp != NULL)
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
 800322e:	68ae      	ldr	r6, [r5, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003230:	684f      	ldr	r7, [r1, #4]
  adcp->adc->CR1 = 0;
 8003232:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003234:	4d18      	ldr	r5, [pc, #96]	; (8003298 <Vector88+0x178>)
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003236:	213d      	movs	r1, #61	; 0x3d
 8003238:	fa01 f000 	lsl.w	r0, r1, r0
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 800323c:	2101      	movs	r1, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800323e:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 8003240:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
 8003242:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8003244:	6091      	str	r1, [r2, #8]
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD3.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD3.grpp != NULL)
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
 8003246:	b146      	cbz	r6, 800325a <Vector88+0x13a>
 8003248:	2305      	movs	r3, #5
 800324a:	702b      	strb	r3, [r5, #0]
 800324c:	4628      	mov	r0, r5
 800324e:	47b0      	blx	r6
 8003250:	782b      	ldrb	r3, [r5, #0]
 8003252:	2b05      	cmp	r3, #5
 8003254:	bf04      	itt	eq
 8003256:	2302      	moveq	r3, #2
 8003258:	702b      	strbeq	r3, [r5, #0]
 800325a:	2500      	movs	r5, #0
 800325c:	6125      	str	r5, [r4, #16]
 800325e:	2320      	movs	r3, #32
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003268:	480c      	ldr	r0, [pc, #48]	; (800329c <Vector88+0x17c>)
 800326a:	f7fe f951 	bl	8001510 <chThdResumeI>
 800326e:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
}
 8003272:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
 8003276:	f7fe bb43 	b.w	8001900 <_port_irq_epilogue>
 800327a:	bf00      	nop
 800327c:	40012000 	.word	0x40012000
 8003280:	20000f74 	.word	0x20000f74
 8003284:	20000f88 	.word	0x20000f88
 8003288:	40012100 	.word	0x40012100
 800328c:	20000fa8 	.word	0x20000fa8
 8003290:	20000fbc 	.word	0x20000fbc
 8003294:	40012200 	.word	0x40012200
 8003298:	20000fdc 	.word	0x20000fdc
 800329c:	20000ff0 	.word	0x20000ff0

080032a0 <adc_lld_init>:
/**
 * @brief   Low level ADC driver initialization.
 *
 * @notapi
 */
void adc_lld_init(void) {
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 80032a2:	4f12      	ldr	r7, [pc, #72]	; (80032ec <adc_lld_init+0x4c>)
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 80032a4:	4e12      	ldr	r6, [pc, #72]	; (80032f0 <adc_lld_init+0x50>)
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 80032a6:	4d13      	ldr	r5, [pc, #76]	; (80032f4 <adc_lld_init+0x54>)

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 80032a8:	4c13      	ldr	r4, [pc, #76]	; (80032f8 <adc_lld_init+0x58>)
 */
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 80032aa:	4638      	mov	r0, r7
 80032ac:	f7fe fdf8 	bl	8001ea0 <adcObjectInit>
  ADCD1.adc = ADC1;
 80032b0:	4a12      	ldr	r2, [pc, #72]	; (80032fc <adc_lld_init+0x5c>)
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 80032b2:	4b13      	ldr	r3, [pc, #76]	; (8003300 <adc_lld_init+0x60>)
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 80032b4:	62ba      	str	r2, [r7, #40]	; 0x28
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 80032b6:	4630      	mov	r0, r6
#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 80032b8:	633b      	str	r3, [r7, #48]	; 0x30

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 80032ba:	62fc      	str	r4, [r7, #44]	; 0x2c
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 80032bc:	f7fe fdf0 	bl	8001ea0 <adcObjectInit>
  ADCD2.adc = ADC2;
 80032c0:	4a10      	ldr	r2, [pc, #64]	; (8003304 <adc_lld_init+0x64>)
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
  ADCD2.dmamode = STM32_DMA_CR_CHSEL(ADC2_DMA_CHANNEL) |
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <adc_lld_init+0x68>)
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
  ADCD2.adc = ADC2;
 80032c4:	62b2      	str	r2, [r6, #40]	; 0x28
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 80032c6:	4628      	mov	r0, r5

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
  ADCD2.adc = ADC2;
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
 80032c8:	f1a4 0218 	sub.w	r2, r4, #24
 80032cc:	62f2      	str	r2, [r6, #44]	; 0x2c
  ADCD2.dmamode = STM32_DMA_CR_CHSEL(ADC2_DMA_CHANNEL) |
 80032ce:	6333      	str	r3, [r6, #48]	; 0x30

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
  ADCD3.adc = ADC3;
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 80032d0:	3c24      	subs	r4, #36	; 0x24
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 80032d2:	f7fe fde5 	bl	8001ea0 <adcObjectInit>
  ADCD3.adc = ADC3;
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
  ADCD3.dmamode = STM32_DMA_CR_CHSEL(ADC3_DMA_CHANNEL) |
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <adc_lld_init+0x6c>)
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
  ADCD3.adc = ADC3;
 80032d8:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <adc_lld_init+0x70>)
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 80032da:	62ec      	str	r4, [r5, #44]	; 0x2c
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
  ADCD3.adc = ADC3;
 80032dc:	62aa      	str	r2, [r5, #40]	; 0x28
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
  ADCD3.dmamode = STM32_DMA_CR_CHSEL(ADC3_DMA_CHANNEL) |
 80032de:	632b      	str	r3, [r5, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled because sharing.*/
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 80032e0:	2106      	movs	r1, #6
 80032e2:	2012      	movs	r0, #18
}
 80032e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled because sharing.*/
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 80032e8:	f7ff bc3a 	b.w	8002b60 <nvicEnableVector>
 80032ec:	20000f74 	.word	0x20000f74
 80032f0:	20000fa8 	.word	0x20000fa8
 80032f4:	20000fdc 	.word	0x20000fdc
 80032f8:	08007aa0 	.word	0x08007aa0
 80032fc:	40012000 	.word	0x40012000
 8003300:	00022c16 	.word	0x00022c16
 8003304:	40012100 	.word	0x40012100
 8003308:	02022c16 	.word	0x02022c16
 800330c:	04022c16 	.word	0x04022c16
 8003310:	40012200 	.word	0x40012200
	...

08003320 <ext_lld_init>:
 * @notapi
 */
void ext_lld_init(void) {

  /* Driver initialization.*/
  extObjectInit(&EXTD1);
 8003320:	4801      	ldr	r0, [pc, #4]	; (8003328 <ext_lld_init+0x8>)
 8003322:	f7fe bdd5 	b.w	8001ed0 <extObjectInit>
 8003326:	bf00      	nop
 8003328:	20001010 	.word	0x20001010
 800332c:	00000000 	.word	0x00000000

08003330 <ext_lld_channel_enable>:
 * @param[in] channel   channel to be enabled
 *
 * @notapi
 */
void ext_lld_channel_enable(EXTDriver *extp, expchannel_t channel) {
  uint32_t cmask = (1 << (channel & 0x1F));
 8003330:	f001 031f 	and.w	r3, r1, #31
 8003334:	2201      	movs	r2, #1

  /* Setting the associated GPIO for external channels.*/
  if (channel < 16) {
 8003336:	290f      	cmp	r1, #15
 * @param[in] extp      pointer to the @p EXTDriver object
 * @param[in] channel   channel to be enabled
 *
 * @notapi
 */
void ext_lld_channel_enable(EXTDriver *extp, expchannel_t channel) {
 8003338:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t cmask = (1 << (channel & 0x1F));
 800333a:	fa02 f303 	lsl.w	r3, r2, r3

  /* Setting the associated GPIO for external channels.*/
  if (channel < 16) {
 800333e:	d91d      	bls.n	800337c <ext_lld_channel_enable+0x4c>
 8003340:	6842      	ldr	r2, [r0, #4]
 8003342:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    if ((cmask & STM32_EXTI_IMR_MASK) != 0U) {
      return;
    }

    /* Programming edge registers.*/
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
 8003346:	07c4      	lsls	r4, r0, #31
 8003348:	d531      	bpl.n	80033ae <ext_lld_channel_enable+0x7e>
      EXTI->RTSR |= cmask;
 800334a:	4d20      	ldr	r5, [pc, #128]	; (80033cc <ext_lld_channel_enable+0x9c>)
 800334c:	68ac      	ldr	r4, [r5, #8]
 800334e:	431c      	orrs	r4, r3
 8003350:	60ac      	str	r4, [r5, #8]
 8003352:	43dc      	mvns	r4, r3
    else
      EXTI->RTSR &= ~cmask;
    if (extp->config->channels[channel].mode & EXT_CH_MODE_FALLING_EDGE)
      EXTI->FTSR |= cmask;
 8003354:	4d1d      	ldr	r5, [pc, #116]	; (80033cc <ext_lld_channel_enable+0x9c>)
    else
      EXTI->FTSR &= ~cmask;

    /* Programming interrupt and event registers.*/
    if (extp->config->channels[channel].cb != NULL) {
 8003356:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
    /* Programming edge registers.*/
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
      EXTI->RTSR |= cmask;
    else
      EXTI->RTSR &= ~cmask;
    if (extp->config->channels[channel].mode & EXT_CH_MODE_FALLING_EDGE)
 800335a:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR |= cmask;
 800335e:	68e8      	ldr	r0, [r5, #12]
    else
      EXTI->FTSR &= ~cmask;

    /* Programming interrupt and event registers.*/
    if (extp->config->channels[channel].cb != NULL) {
 8003360:	684a      	ldr	r2, [r1, #4]
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
      EXTI->RTSR |= cmask;
    else
      EXTI->RTSR &= ~cmask;
    if (extp->config->channels[channel].mode & EXT_CH_MODE_FALLING_EDGE)
      EXTI->FTSR |= cmask;
 8003362:	bf14      	ite	ne
 8003364:	4318      	orrne	r0, r3
    else
      EXTI->FTSR &= ~cmask;
 8003366:	4020      	andeq	r0, r4
 8003368:	60e8      	str	r0, [r5, #12]

    /* Programming interrupt and event registers.*/
    if (extp->config->channels[channel].cb != NULL) {
 800336a:	b332      	cbz	r2, 80033ba <ext_lld_channel_enable+0x8a>
      EXTI->IMR |= cmask;
 800336c:	4a17      	ldr	r2, [pc, #92]	; (80033cc <ext_lld_channel_enable+0x9c>)
 800336e:	6811      	ldr	r1, [r2, #0]
 8003370:	430b      	orrs	r3, r1
 8003372:	6013      	str	r3, [r2, #0]
      EXTI->EMR &= ~cmask;
 8003374:	6853      	ldr	r3, [r2, #4]
 8003376:	401c      	ands	r4, r3
 8003378:	6054      	str	r4, [r2, #4]
 800337a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800337c:	f021 0403 	bic.w	r4, r1, #3

  /* Setting the associated GPIO for external channels.*/
  if (channel < 16) {
    uint32_t n = channel >> 2;
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
    uint32_t port = ((extp->config->channels[channel].mode &
 8003380:	6842      	ldr	r2, [r0, #4]
 8003382:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003386:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 800338a:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
                     EXT_MODE_GPIO_OFF) << ((channel & 3) * 4);

#if defined(STM32F1XX)
    AFIO->EXTICR[n] = (AFIO->EXTICR[n] & mask) | port;
#else /* !defined(STM32F1XX) */
    SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
 800338e:	68a7      	ldr	r7, [r4, #8]
  uint32_t cmask = (1 << (channel & 0x1F));

  /* Setting the associated GPIO for external channels.*/
  if (channel < 16) {
    uint32_t n = channel >> 2;
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
 8003390:	f001 0503 	and.w	r5, r1, #3
 8003394:	00ad      	lsls	r5, r5, #2
                     EXT_MODE_GPIO_OFF) << ((channel & 3) * 4);

#if defined(STM32F1XX)
    AFIO->EXTICR[n] = (AFIO->EXTICR[n] & mask) | port;
#else /* !defined(STM32F1XX) */
    SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
 8003396:	260f      	movs	r6, #15
 8003398:	40ae      	lsls	r6, r5
 800339a:	f3c0 1e03 	ubfx	lr, r0, #4, #4
 800339e:	ea27 0606 	bic.w	r6, r7, r6
 80033a2:	fa0e f505 	lsl.w	r5, lr, r5
 80033a6:	4335      	orrs	r5, r6
 80033a8:	60a5      	str	r5, [r4, #8]
    if ((cmask & STM32_EXTI_IMR_MASK) != 0U) {
      return;
    }

    /* Programming edge registers.*/
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
 80033aa:	07c4      	lsls	r4, r0, #31
 80033ac:	d4cd      	bmi.n	800334a <ext_lld_channel_enable+0x1a>
      EXTI->RTSR |= cmask;
    else
      EXTI->RTSR &= ~cmask;
 80033ae:	4e07      	ldr	r6, [pc, #28]	; (80033cc <ext_lld_channel_enable+0x9c>)
 80033b0:	68b5      	ldr	r5, [r6, #8]
 80033b2:	43dc      	mvns	r4, r3
 80033b4:	4025      	ands	r5, r4
 80033b6:	60b5      	str	r5, [r6, #8]
 80033b8:	e7cc      	b.n	8003354 <ext_lld_channel_enable+0x24>
    if (extp->config->channels[channel].cb != NULL) {
      EXTI->IMR |= cmask;
      EXTI->EMR &= ~cmask;
    }
    else {
      EXTI->EMR |= cmask;
 80033ba:	4a04      	ldr	r2, [pc, #16]	; (80033cc <ext_lld_channel_enable+0x9c>)
 80033bc:	6851      	ldr	r1, [r2, #4]
 80033be:	430b      	orrs	r3, r1
 80033c0:	6053      	str	r3, [r2, #4]
      EXTI->IMR &= ~cmask;
 80033c2:	6813      	ldr	r3, [r2, #0]
 80033c4:	401c      	ands	r4, r3
 80033c6:	6014      	str	r4, [r2, #0]
 80033c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40013c00 	.word	0x40013c00

080033d0 <ext_lld_start>:
 *
 * @param[in] extp      pointer to the @p EXTDriver object
 *
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  expchannel_t line;

  if (extp->state == EXT_STOP)
 80033d2:	7803      	ldrb	r3, [r0, #0]
 80033d4:	2b01      	cmp	r3, #1
 *
 * @param[in] extp      pointer to the @p EXTDriver object
 *
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
 80033d6:	4606      	mov	r6, r0
  expchannel_t line;

  if (extp->state == EXT_STOP)
 80033d8:	d024      	beq.n	8003424 <ext_lld_start+0x54>
  (void)extp;

#if STM32_EXTI_NUM_LINES > 32
  if (channel < 32) {
#endif
    EXTI->IMR  &= ~cmask;
 80033da:	4c14      	ldr	r4, [pc, #80]	; (800342c <ext_lld_start+0x5c>)
 *
 * @param[in] extp      pointer to the @p EXTDriver object
 *
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
 80033dc:	2500      	movs	r5, #0
 * @param[in] channel   channel to be disabled
 *
 * @notapi
 */
void ext_lld_channel_disable(EXTDriver *extp, expchannel_t channel) {
  uint32_t cmask = (1 << (channel & 0x1F));
 80033de:	2701      	movs	r7, #1
 80033e0:	e00f      	b.n	8003402 <ext_lld_start+0x32>
  (void)extp;

#if STM32_EXTI_NUM_LINES > 32
  if (channel < 32) {
#endif
    EXTI->IMR  &= ~cmask;
 80033e2:	6822      	ldr	r2, [r4, #0]
 80033e4:	401a      	ands	r2, r3
 80033e6:	6022      	str	r2, [r4, #0]
    EXTI->EMR  &= ~cmask;
 80033e8:	6862      	ldr	r2, [r4, #4]
 80033ea:	401a      	ands	r2, r3
 80033ec:	6062      	str	r2, [r4, #4]
    EXTI->RTSR &= ~cmask;
 80033ee:	68a2      	ldr	r2, [r4, #8]
 80033f0:	401a      	ands	r2, r3
 80033f2:	60a2      	str	r2, [r4, #8]
    EXTI->FTSR &= ~cmask;
 80033f4:	68e2      	ldr	r2, [r4, #12]

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
 80033f6:	3501      	adds	r5, #1
  if (channel < 32) {
#endif
    EXTI->IMR  &= ~cmask;
    EXTI->EMR  &= ~cmask;
    EXTI->RTSR &= ~cmask;
    EXTI->FTSR &= ~cmask;
 80033f8:	4013      	ands	r3, r2

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
 80033fa:	2d17      	cmp	r5, #23
  if (channel < 32) {
#endif
    EXTI->IMR  &= ~cmask;
    EXTI->EMR  &= ~cmask;
    EXTI->RTSR &= ~cmask;
    EXTI->FTSR &= ~cmask;
 80033fc:	60e3      	str	r3, [r4, #12]
    EXTI->PR    =  cmask;
 80033fe:	6161      	str	r1, [r4, #20]

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
 8003400:	d00f      	beq.n	8003422 <ext_lld_start+0x52>
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
 8003402:	6872      	ldr	r2, [r6, #4]
 8003404:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
 * @param[in] channel   channel to be disabled
 *
 * @notapi
 */
void ext_lld_channel_disable(EXTDriver *extp, expchannel_t channel) {
  uint32_t cmask = (1 << (channel & 0x1F));
 8003408:	fa07 f105 	lsl.w	r1, r7, r5
  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
 800340c:	0752      	lsls	r2, r2, #29
  (void)extp;

#if STM32_EXTI_NUM_LINES > 32
  if (channel < 32) {
#endif
    EXTI->IMR  &= ~cmask;
 800340e:	ea6f 0301 	mvn.w	r3, r1
  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
 8003412:	d5e6      	bpl.n	80033e2 <ext_lld_start+0x12>
      ext_lld_channel_enable(extp, line);
 8003414:	4629      	mov	r1, r5
 8003416:	4630      	mov	r0, r6

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
 8003418:	3501      	adds	r5, #1
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
      ext_lld_channel_enable(extp, line);
 800341a:	f7ff ff89 	bl	8003330 <ext_lld_channel_enable>

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
 800341e:	2d17      	cmp	r5, #23
 8003420:	d1ef      	bne.n	8003402 <ext_lld_start+0x32>
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
      ext_lld_channel_enable(extp, line);
    else
      ext_lld_channel_disable(extp, line);
}
 8003422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
void ext_lld_start(EXTDriver *extp) {
  expchannel_t line;

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();
 8003424:	f000 f984 	bl	8003730 <ext_lld_exti_irq_enable>
 8003428:	e7d7      	b.n	80033da <ext_lld_start+0xa>
 800342a:	bf00      	nop
 800342c:	40013c00 	.word	0x40013c00

08003430 <Vector58>:
OSAL_IRQ_HANDLER(Vector58) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003430:	4a08      	ldr	r2, [pc, #32]	; (8003454 <Vector58+0x24>)
/**
 * @brief   EXTI[0] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector58) {
 8003432:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003434:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 8003436:	6813      	ldr	r3, [r2, #0]
 8003438:	400b      	ands	r3, r1
 800343a:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 800343e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 0))
 8003440:	b123      	cbz	r3, 800344c <Vector58+0x1c>
    EXTD1.config->channels[0].cb(&EXTD1, 0);
 8003442:	4805      	ldr	r0, [pc, #20]	; (8003458 <Vector58+0x28>)
 8003444:	6843      	ldr	r3, [r0, #4]
 8003446:	2100      	movs	r1, #0
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800344c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 0);
  EXTI->PR = pr;
  if (pr & (1U << 0))
    EXTD1.config->channels[0].cb(&EXTD1, 0);

  OSAL_IRQ_EPILOGUE();
 8003450:	f7fe ba56 	b.w	8001900 <_port_irq_epilogue>
 8003454:	40013c00 	.word	0x40013c00
 8003458:	20001010 	.word	0x20001010
 800345c:	00000000 	.word	0x00000000

08003460 <Vector5C>:
OSAL_IRQ_HANDLER(Vector5C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003460:	4a08      	ldr	r2, [pc, #32]	; (8003484 <Vector5C+0x24>)
/**
 * @brief   EXTI[1] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector5C) {
 8003462:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003464:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8003466:	6813      	ldr	r3, [r2, #0]
 8003468:	400b      	ands	r3, r1
 800346a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 800346e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 1))
 8003470:	b123      	cbz	r3, 800347c <Vector5C+0x1c>
    EXTD1.config->channels[1].cb(&EXTD1, 1);
 8003472:	4805      	ldr	r0, [pc, #20]	; (8003488 <Vector5C+0x28>)
 8003474:	6843      	ldr	r3, [r0, #4]
 8003476:	2101      	movs	r1, #1
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800347c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 1);
  EXTI->PR = pr;
  if (pr & (1U << 1))
    EXTD1.config->channels[1].cb(&EXTD1, 1);

  OSAL_IRQ_EPILOGUE();
 8003480:	f7fe ba3e 	b.w	8001900 <_port_irq_epilogue>
 8003484:	40013c00 	.word	0x40013c00
 8003488:	20001010 	.word	0x20001010
 800348c:	00000000 	.word	0x00000000

08003490 <Vector60>:
OSAL_IRQ_HANDLER(Vector60) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003490:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <Vector60+0x24>)
/**
 * @brief   EXTI[2] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector60) {
 8003492:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003494:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	400b      	ands	r3, r1
 800349a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 800349e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 2))
 80034a0:	b123      	cbz	r3, 80034ac <Vector60+0x1c>
    EXTD1.config->channels[2].cb(&EXTD1, 2);
 80034a2:	4805      	ldr	r0, [pc, #20]	; (80034b8 <Vector60+0x28>)
 80034a4:	6843      	ldr	r3, [r0, #4]
 80034a6:	2102      	movs	r1, #2
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80034ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 2);
  EXTI->PR = pr;
  if (pr & (1U << 2))
    EXTD1.config->channels[2].cb(&EXTD1, 2);

  OSAL_IRQ_EPILOGUE();
 80034b0:	f7fe ba26 	b.w	8001900 <_port_irq_epilogue>
 80034b4:	40013c00 	.word	0x40013c00
 80034b8:	20001010 	.word	0x20001010
 80034bc:	00000000 	.word	0x00000000

080034c0 <Vector64>:
OSAL_IRQ_HANDLER(Vector64) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80034c0:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <Vector64+0x24>)
/**
 * @brief   EXTI[3] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector64) {
 80034c2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80034c4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 80034c6:	6813      	ldr	r3, [r2, #0]
 80034c8:	400b      	ands	r3, r1
 80034ca:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 80034ce:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 3))
 80034d0:	b123      	cbz	r3, 80034dc <Vector64+0x1c>
    EXTD1.config->channels[3].cb(&EXTD1, 3);
 80034d2:	4805      	ldr	r0, [pc, #20]	; (80034e8 <Vector64+0x28>)
 80034d4:	6843      	ldr	r3, [r0, #4]
 80034d6:	2103      	movs	r1, #3
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80034dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 3);
  EXTI->PR = pr;
  if (pr & (1U << 3))
    EXTD1.config->channels[3].cb(&EXTD1, 3);

  OSAL_IRQ_EPILOGUE();
 80034e0:	f7fe ba0e 	b.w	8001900 <_port_irq_epilogue>
 80034e4:	40013c00 	.word	0x40013c00
 80034e8:	20001010 	.word	0x20001010
 80034ec:	00000000 	.word	0x00000000

080034f0 <Vector68>:
OSAL_IRQ_HANDLER(Vector68) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80034f0:	4a08      	ldr	r2, [pc, #32]	; (8003514 <Vector68+0x24>)
/**
 * @brief   EXTI[4] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector68) {
 80034f2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80034f4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 80034f6:	6813      	ldr	r3, [r2, #0]
 80034f8:	400b      	ands	r3, r1
 80034fa:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 80034fe:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 4))
 8003500:	b123      	cbz	r3, 800350c <Vector68+0x1c>
    EXTD1.config->channels[4].cb(&EXTD1, 4);
 8003502:	4805      	ldr	r0, [pc, #20]	; (8003518 <Vector68+0x28>)
 8003504:	6843      	ldr	r3, [r0, #4]
 8003506:	2104      	movs	r1, #4
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800350c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 4);
  EXTI->PR = pr;
  if (pr & (1U << 4))
    EXTD1.config->channels[4].cb(&EXTD1, 4);

  OSAL_IRQ_EPILOGUE();
 8003510:	f7fe b9f6 	b.w	8001900 <_port_irq_epilogue>
 8003514:	40013c00 	.word	0x40013c00
 8003518:	20001010 	.word	0x20001010
 800351c:	00000000 	.word	0x00000000

08003520 <Vector9C>:
OSAL_IRQ_HANDLER(Vector9C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <Vector9C+0x68>)
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 8003522:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003524:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4014      	ands	r4, r2
 800352a:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
                     (1U << 9));
  EXTI->PR = pr;
 800352e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 5))
 8003530:	06a3      	lsls	r3, r4, #26
 8003532:	d422      	bmi.n	800357a <Vector9C+0x5a>
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
 8003534:	0660      	lsls	r0, r4, #25
 8003536:	d41a      	bmi.n	800356e <Vector9C+0x4e>
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
 8003538:	0621      	lsls	r1, r4, #24
 800353a:	d412      	bmi.n	8003562 <Vector9C+0x42>
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  if (pr & (1U << 8))
 800353c:	05e2      	lsls	r2, r4, #23
 800353e:	d40a      	bmi.n	8003556 <Vector9C+0x36>
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  if (pr & (1U << 9))
 8003540:	05a3      	lsls	r3, r4, #22
 8003542:	d504      	bpl.n	800354e <Vector9C+0x2e>
    EXTD1.config->channels[9].cb(&EXTD1, 9);
 8003544:	4811      	ldr	r0, [pc, #68]	; (800358c <Vector9C+0x6c>)
 8003546:	6843      	ldr	r3, [r0, #4]
 8003548:	2109      	movs	r1, #9
 800354a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800354e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 8))
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  if (pr & (1U << 9))
    EXTD1.config->channels[9].cb(&EXTD1, 9);

  OSAL_IRQ_EPILOGUE();
 8003552:	f7fe b9d5 	b.w	8001900 <_port_irq_epilogue>
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  if (pr & (1U << 8))
    EXTD1.config->channels[8].cb(&EXTD1, 8);
 8003556:	480d      	ldr	r0, [pc, #52]	; (800358c <Vector9C+0x6c>)
 8003558:	6843      	ldr	r3, [r0, #4]
 800355a:	2108      	movs	r1, #8
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	4798      	blx	r3
 8003560:	e7ee      	b.n	8003540 <Vector9C+0x20>
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
    EXTD1.config->channels[7].cb(&EXTD1, 7);
 8003562:	480a      	ldr	r0, [pc, #40]	; (800358c <Vector9C+0x6c>)
 8003564:	6843      	ldr	r3, [r0, #4]
 8003566:	2107      	movs	r1, #7
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	4798      	blx	r3
 800356c:	e7e6      	b.n	800353c <Vector9C+0x1c>
                     (1U << 9));
  EXTI->PR = pr;
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
 800356e:	4807      	ldr	r0, [pc, #28]	; (800358c <Vector9C+0x6c>)
 8003570:	6843      	ldr	r3, [r0, #4]
 8003572:	2106      	movs	r1, #6
 8003574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003576:	4798      	blx	r3
 8003578:	e7de      	b.n	8003538 <Vector9C+0x18>
  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
                     (1U << 9));
  EXTI->PR = pr;
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
 800357a:	4804      	ldr	r0, [pc, #16]	; (800358c <Vector9C+0x6c>)
 800357c:	6843      	ldr	r3, [r0, #4]
 800357e:	2105      	movs	r1, #5
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	4798      	blx	r3
 8003584:	e7d6      	b.n	8003534 <Vector9C+0x14>
 8003586:	bf00      	nop
 8003588:	40013c00 	.word	0x40013c00
 800358c:	20001010 	.word	0x20001010

08003590 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003590:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <VectorE0+0x78>)
/**
 * @brief   EXTI[10]...EXTI[15] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE0) {
 8003592:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003594:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4014      	ands	r4, r2
 800359a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 800359e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 10))
 80035a0:	0562      	lsls	r2, r4, #21
 80035a2:	d42a      	bmi.n	80035fa <VectorE0+0x6a>
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
 80035a4:	0523      	lsls	r3, r4, #20
 80035a6:	d422      	bmi.n	80035ee <VectorE0+0x5e>
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
 80035a8:	04e0      	lsls	r0, r4, #19
 80035aa:	d41a      	bmi.n	80035e2 <VectorE0+0x52>
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
 80035ac:	04a1      	lsls	r1, r4, #18
 80035ae:	d412      	bmi.n	80035d6 <VectorE0+0x46>
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  if (pr & (1U << 14))
 80035b0:	0462      	lsls	r2, r4, #17
 80035b2:	d40a      	bmi.n	80035ca <VectorE0+0x3a>
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  if (pr & (1U << 15))
 80035b4:	0423      	lsls	r3, r4, #16
 80035b6:	d504      	bpl.n	80035c2 <VectorE0+0x32>
    EXTD1.config->channels[15].cb(&EXTD1, 15);
 80035b8:	4814      	ldr	r0, [pc, #80]	; (800360c <VectorE0+0x7c>)
 80035ba:	6843      	ldr	r3, [r0, #4]
 80035bc:	210f      	movs	r1, #15
 80035be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c0:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80035c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 14))
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  if (pr & (1U << 15))
    EXTD1.config->channels[15].cb(&EXTD1, 15);

  OSAL_IRQ_EPILOGUE();
 80035c6:	f7fe b99b 	b.w	8001900 <_port_irq_epilogue>
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  if (pr & (1U << 14))
    EXTD1.config->channels[14].cb(&EXTD1, 14);
 80035ca:	4810      	ldr	r0, [pc, #64]	; (800360c <VectorE0+0x7c>)
 80035cc:	6843      	ldr	r3, [r0, #4]
 80035ce:	210e      	movs	r1, #14
 80035d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d2:	4798      	blx	r3
 80035d4:	e7ee      	b.n	80035b4 <VectorE0+0x24>
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
    EXTD1.config->channels[13].cb(&EXTD1, 13);
 80035d6:	480d      	ldr	r0, [pc, #52]	; (800360c <VectorE0+0x7c>)
 80035d8:	6843      	ldr	r3, [r0, #4]
 80035da:	210d      	movs	r1, #13
 80035dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035de:	4798      	blx	r3
 80035e0:	e7e6      	b.n	80035b0 <VectorE0+0x20>
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
 80035e2:	480a      	ldr	r0, [pc, #40]	; (800360c <VectorE0+0x7c>)
 80035e4:	6843      	ldr	r3, [r0, #4]
 80035e6:	210c      	movs	r1, #12
 80035e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ea:	4798      	blx	r3
 80035ec:	e7de      	b.n	80035ac <VectorE0+0x1c>
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
 80035ee:	4807      	ldr	r0, [pc, #28]	; (800360c <VectorE0+0x7c>)
 80035f0:	6843      	ldr	r3, [r0, #4]
 80035f2:	210b      	movs	r1, #11
 80035f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f6:	4798      	blx	r3
 80035f8:	e7d6      	b.n	80035a8 <VectorE0+0x18>
  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
 80035fa:	4804      	ldr	r0, [pc, #16]	; (800360c <VectorE0+0x7c>)
 80035fc:	6843      	ldr	r3, [r0, #4]
 80035fe:	210a      	movs	r1, #10
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	4798      	blx	r3
 8003604:	e7ce      	b.n	80035a4 <VectorE0+0x14>
 8003606:	bf00      	nop
 8003608:	40013c00 	.word	0x40013c00
 800360c:	20001010 	.word	0x20001010

08003610 <Vector44>:
OSAL_IRQ_HANDLER(Vector44) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003610:	4a08      	ldr	r2, [pc, #32]	; (8003634 <Vector44+0x24>)
/**
 * @brief   EXTI[16] interrupt handler (PVD).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector44) {
 8003612:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003614:	6953      	ldr	r3, [r2, #20]
  pr = EXTI->IMR & (1U << 16);
 8003616:	6813      	ldr	r3, [r2, #0]
 8003618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  EXTI->PR = pr;
 800361c:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 16))
 800361e:	b12b      	cbz	r3, 800362c <Vector44+0x1c>
    EXTD1.config->channels[16].cb(&EXTD1, 16);
 8003620:	4805      	ldr	r0, [pc, #20]	; (8003638 <Vector44+0x28>)
 8003622:	6843      	ldr	r3, [r0, #4]
 8003624:	2110      	movs	r1, #16
 8003626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800362a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800362c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr = EXTI->IMR & (1U << 16);
  EXTI->PR = pr;
  if (pr & (1U << 16))
    EXTD1.config->channels[16].cb(&EXTD1, 16);

  OSAL_IRQ_EPILOGUE();
 8003630:	f7fe b966 	b.w	8001900 <_port_irq_epilogue>
 8003634:	40013c00 	.word	0x40013c00
 8003638:	20001010 	.word	0x20001010
 800363c:	00000000 	.word	0x00000000

08003640 <VectorE4>:
OSAL_IRQ_HANDLER(VectorE4) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003640:	4a08      	ldr	r2, [pc, #32]	; (8003664 <VectorE4+0x24>)
/**
 * @brief   EXTI[17] interrupt handler (RTC_ALARM).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE4) {
 8003642:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003644:	6953      	ldr	r3, [r2, #20]
  pr = EXTI->IMR & (1U << 17);
 8003646:	6813      	ldr	r3, [r2, #0]
 8003648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  EXTI->PR = pr;
 800364c:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 17))
 800364e:	b12b      	cbz	r3, 800365c <VectorE4+0x1c>
    EXTD1.config->channels[17].cb(&EXTD1, 17);
 8003650:	4805      	ldr	r0, [pc, #20]	; (8003668 <VectorE4+0x28>)
 8003652:	6843      	ldr	r3, [r0, #4]
 8003654:	2111      	movs	r1, #17
 8003656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800365a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800365c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr = EXTI->IMR & (1U << 17);
  EXTI->PR = pr;
  if (pr & (1U << 17))
    EXTD1.config->channels[17].cb(&EXTD1, 17);

  OSAL_IRQ_EPILOGUE();
 8003660:	f7fe b94e 	b.w	8001900 <_port_irq_epilogue>
 8003664:	40013c00 	.word	0x40013c00
 8003668:	20001010 	.word	0x20001010
 800366c:	00000000 	.word	0x00000000

08003670 <VectorE8>:
OSAL_IRQ_HANDLER(VectorE8) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003670:	4a09      	ldr	r2, [pc, #36]	; (8003698 <VectorE8+0x28>)
/**
 * @brief   EXTI[18] interrupt handler (OTG_FS_WKUP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE8) {
 8003672:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003674:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 18);
 8003676:	6813      	ldr	r3, [r2, #0]
 8003678:	400b      	ands	r3, r1
 800367a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  EXTI->PR = pr;
 800367e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 18))
 8003680:	b12b      	cbz	r3, 800368e <VectorE8+0x1e>
    EXTD1.config->channels[18].cb(&EXTD1, 18);
 8003682:	4806      	ldr	r0, [pc, #24]	; (800369c <VectorE8+0x2c>)
 8003684:	6843      	ldr	r3, [r0, #4]
 8003686:	2112      	movs	r1, #18
 8003688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800368e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 18);
  EXTI->PR = pr;
  if (pr & (1U << 18))
    EXTD1.config->channels[18].cb(&EXTD1, 18);

  OSAL_IRQ_EPILOGUE();
 8003692:	f7fe b935 	b.w	8001900 <_port_irq_epilogue>
 8003696:	bf00      	nop
 8003698:	40013c00 	.word	0x40013c00
 800369c:	20001010 	.word	0x20001010

080036a0 <Vector170>:
OSAL_IRQ_HANDLER(Vector170) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80036a0:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <Vector170+0x28>)
/**
 * @brief   EXTI[20] interrupt handler (OTG_HS_WKUP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector170) {
 80036a2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80036a4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 20);
 80036a6:	6813      	ldr	r3, [r2, #0]
 80036a8:	400b      	ands	r3, r1
 80036aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  EXTI->PR = pr;
 80036ae:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 20))
 80036b0:	b12b      	cbz	r3, 80036be <Vector170+0x1e>
    EXTD1.config->channels[20].cb(&EXTD1, 20);
 80036b2:	4806      	ldr	r0, [pc, #24]	; (80036cc <Vector170+0x2c>)
 80036b4:	6843      	ldr	r3, [r0, #4]
 80036b6:	2114      	movs	r1, #20
 80036b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036bc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80036be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 20);
  EXTI->PR = pr;
  if (pr & (1U << 20))
    EXTD1.config->channels[20].cb(&EXTD1, 20);

  OSAL_IRQ_EPILOGUE();
 80036c2:	f7fe b91d 	b.w	8001900 <_port_irq_epilogue>
 80036c6:	bf00      	nop
 80036c8:	40013c00 	.word	0x40013c00
 80036cc:	20001010 	.word	0x20001010

080036d0 <Vector48>:
OSAL_IRQ_HANDLER(Vector48) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80036d0:	4a09      	ldr	r2, [pc, #36]	; (80036f8 <Vector48+0x28>)
/**
 * @brief   EXTI[21] interrupt handler (TAMPER_STAMP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector48) {
 80036d2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80036d4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 21);
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	400b      	ands	r3, r1
 80036da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  EXTI->PR = pr;
 80036de:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 21))
 80036e0:	b12b      	cbz	r3, 80036ee <Vector48+0x1e>
    EXTD1.config->channels[21].cb(&EXTD1, 21);
 80036e2:	4806      	ldr	r0, [pc, #24]	; (80036fc <Vector48+0x2c>)
 80036e4:	6843      	ldr	r3, [r0, #4]
 80036e6:	2115      	movs	r1, #21
 80036e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036ec:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80036ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 21);
  EXTI->PR = pr;
  if (pr & (1U << 21))
    EXTD1.config->channels[21].cb(&EXTD1, 21);

  OSAL_IRQ_EPILOGUE();
 80036f2:	f7fe b905 	b.w	8001900 <_port_irq_epilogue>
 80036f6:	bf00      	nop
 80036f8:	40013c00 	.word	0x40013c00
 80036fc:	20001010 	.word	0x20001010

08003700 <Vector4C>:
OSAL_IRQ_HANDLER(Vector4C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003700:	4a09      	ldr	r2, [pc, #36]	; (8003728 <Vector4C+0x28>)
/**
 * @brief   EXTI[22] interrupt handler (RTC_WKUP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector4C) {
 8003702:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003704:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 22);
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	400b      	ands	r3, r1
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  EXTI->PR = pr;
 800370e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 22))
 8003710:	b12b      	cbz	r3, 800371e <Vector4C+0x1e>
    EXTD1.config->channels[22].cb(&EXTD1, 22);
 8003712:	4806      	ldr	r0, [pc, #24]	; (800372c <Vector4C+0x2c>)
 8003714:	6843      	ldr	r3, [r0, #4]
 8003716:	2116      	movs	r1, #22
 8003718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800371c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800371e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 22);
  EXTI->PR = pr;
  if (pr & (1U << 22))
    EXTD1.config->channels[22].cb(&EXTD1, 22);

  OSAL_IRQ_EPILOGUE();
 8003722:	f7fe b8ed 	b.w	8001900 <_port_irq_epilogue>
 8003726:	bf00      	nop
 8003728:	40013c00 	.word	0x40013c00
 800372c:	20001010 	.word	0x20001010

08003730 <ext_lld_exti_irq_enable>:
 *
 * @notapi
 */
void ext_lld_exti_irq_enable(void) {

  nvicEnableVector(EXTI0_IRQn, STM32_EXT_EXTI0_IRQ_PRIORITY);
 8003730:	2106      	movs	r1, #6
/**
 * @brief   Enables EXTI IRQ sources.
 *
 * @notapi
 */
void ext_lld_exti_irq_enable(void) {
 8003732:	b508      	push	{r3, lr}

  nvicEnableVector(EXTI0_IRQn, STM32_EXT_EXTI0_IRQ_PRIORITY);
 8003734:	4608      	mov	r0, r1
 8003736:	f7ff fa13 	bl	8002b60 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_EXT_EXTI1_IRQ_PRIORITY);
 800373a:	2106      	movs	r1, #6
 800373c:	2007      	movs	r0, #7
 800373e:	f7ff fa0f 	bl	8002b60 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_EXT_EXTI2_IRQ_PRIORITY);
 8003742:	2106      	movs	r1, #6
 8003744:	2008      	movs	r0, #8
 8003746:	f7ff fa0b 	bl	8002b60 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_EXT_EXTI3_IRQ_PRIORITY);
 800374a:	2106      	movs	r1, #6
 800374c:	2009      	movs	r0, #9
 800374e:	f7ff fa07 	bl	8002b60 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_EXT_EXTI4_IRQ_PRIORITY);
 8003752:	2106      	movs	r1, #6
 8003754:	200a      	movs	r0, #10
 8003756:	f7ff fa03 	bl	8002b60 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_EXT_EXTI5_9_IRQ_PRIORITY);
 800375a:	2106      	movs	r1, #6
 800375c:	2017      	movs	r0, #23
 800375e:	f7ff f9ff 	bl	8002b60 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_EXT_EXTI10_15_IRQ_PRIORITY);
 8003762:	2106      	movs	r1, #6
 8003764:	2028      	movs	r0, #40	; 0x28
 8003766:	f7ff f9fb 	bl	8002b60 <nvicEnableVector>
  nvicEnableVector(PVD_IRQn, STM32_EXT_EXTI16_IRQ_PRIORITY);
 800376a:	2106      	movs	r1, #6
 800376c:	2001      	movs	r0, #1
 800376e:	f7ff f9f7 	bl	8002b60 <nvicEnableVector>
  nvicEnableVector(RTC_Alarm_IRQn, STM32_EXT_EXTI17_IRQ_PRIORITY);
 8003772:	210f      	movs	r1, #15
 8003774:	2029      	movs	r0, #41	; 0x29
 8003776:	f7ff f9f3 	bl	8002b60 <nvicEnableVector>
  nvicEnableVector(OTG_FS_WKUP_IRQn, STM32_EXT_EXTI18_IRQ_PRIORITY);
 800377a:	2106      	movs	r1, #6
 800377c:	202a      	movs	r0, #42	; 0x2a
 800377e:	f7ff f9ef 	bl	8002b60 <nvicEnableVector>
#if STM32_HAS_ETH
  nvicEnableVector(ETH_WKUP_IRQn, STM32_EXT_EXTI19_IRQ_PRIORITY);
#endif
#if STM32_HAS_OTG2
  nvicEnableVector(OTG_HS_WKUP_IRQn, STM32_EXT_EXTI20_IRQ_PRIORITY);
 8003782:	2106      	movs	r1, #6
 8003784:	204c      	movs	r0, #76	; 0x4c
 8003786:	f7ff f9eb 	bl	8002b60 <nvicEnableVector>
#endif
#if !defined(STM32F401xx)
  nvicEnableVector(TAMP_STAMP_IRQn, STM32_EXT_EXTI21_IRQ_PRIORITY);
 800378a:	210f      	movs	r1, #15
 800378c:	2002      	movs	r0, #2
 800378e:	f7ff f9e7 	bl	8002b60 <nvicEnableVector>
#endif /* !defined(STM32F401xx) */
  nvicEnableVector(RTC_WKUP_IRQn, STM32_EXT_EXTI22_IRQ_PRIORITY);
 8003792:	210f      	movs	r1, #15
 8003794:	2003      	movs	r0, #3
}
 8003796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  nvicEnableVector(OTG_HS_WKUP_IRQn, STM32_EXT_EXTI20_IRQ_PRIORITY);
#endif
#if !defined(STM32F401xx)
  nvicEnableVector(TAMP_STAMP_IRQn, STM32_EXT_EXTI21_IRQ_PRIORITY);
#endif /* !defined(STM32F401xx) */
  nvicEnableVector(RTC_WKUP_IRQn, STM32_EXT_EXTI22_IRQ_PRIORITY);
 800379a:	f7ff b9e1 	b.w	8002b60 <nvicEnableVector>
 800379e:	bf00      	nop

080037a0 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 80037a0:	b4f0      	push	{r4, r5, r6, r7}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80037a2:	4e54      	ldr	r6, [pc, #336]	; (80038f4 <_pal_lld_init+0x154>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80037a4:	4d54      	ldr	r5, [pc, #336]	; (80038f8 <_pal_lld_init+0x158>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80037a6:	6b37      	ldr	r7, [r6, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80037a8:	4c54      	ldr	r4, [pc, #336]	; (80038fc <_pal_lld_init+0x15c>)
 80037aa:	4955      	ldr	r1, [pc, #340]	; (8003900 <_pal_lld_init+0x160>)
 80037ac:	4a55      	ldr	r2, [pc, #340]	; (8003904 <_pal_lld_init+0x164>)
 80037ae:	4b56      	ldr	r3, [pc, #344]	; (8003908 <_pal_lld_init+0x168>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 80037b0:	f047 07ff 	orr.w	r7, r7, #255	; 0xff
 80037b4:	6337      	str	r7, [r6, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 80037b6:	6d37      	ldr	r7, [r6, #80]	; 0x50
 80037b8:	f047 07ff 	orr.w	r7, r7, #255	; 0xff
 80037bc:	6537      	str	r7, [r6, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80037be:	6846      	ldr	r6, [r0, #4]
 80037c0:	606e      	str	r6, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80037c2:	6886      	ldr	r6, [r0, #8]
 80037c4:	60ae      	str	r6, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80037c6:	68c6      	ldr	r6, [r0, #12]
 80037c8:	60ee      	str	r6, [r5, #12]
  gpiop->ODR     = config->odr;
 80037ca:	6906      	ldr	r6, [r0, #16]
 80037cc:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80037ce:	6946      	ldr	r6, [r0, #20]
 80037d0:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 80037d2:	6986      	ldr	r6, [r0, #24]
 80037d4:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80037d6:	6806      	ldr	r6, [r0, #0]
 80037d8:	602e      	str	r6, [r5, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80037da:	6a05      	ldr	r5, [r0, #32]
 80037dc:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80037de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80037e0:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80037e2:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80037e4:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 80037e6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80037e8:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 80037ea:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80037ec:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80037ee:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80037f0:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80037f2:	69c5      	ldr	r5, [r0, #28]
 80037f4:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80037f6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80037f8:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80037fa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80037fc:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80037fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003800:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8003802:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003804:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8003806:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003808:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800380a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800380c:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800380e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003810:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003812:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003814:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003816:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8003818:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800381a:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800381c:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 800381e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8003820:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8003822:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8003824:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8003826:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8003828:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800382a:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800382c:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800382e:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8003830:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003832:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8003834:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8003836:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8003838:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800383a:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800383e:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8003840:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8003844:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8003846:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800384a:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800384c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800384e:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003854:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003858:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800385a:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800385e:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8003860:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 8003864:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8003866:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800386a:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800386c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8003870:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8003872:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8003876:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003878:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800387c:	601a      	str	r2, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800387e:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 8003882:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 8003886:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 800388a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800388e:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 8003892:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 8003896:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800389a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800389e:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 80038a2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 80038a6:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 80038aa:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 80038ae:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 80038b2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80038b6:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 80038ba:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 80038be:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 80038c2:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 80038c6:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 80038ca:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 80038ce:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 80038d2:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 80038d6:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 80038da:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 80038de:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 80038e2:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 80038e6:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 80038ea:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  initgpio(GPIOJ, &config->PJData);
#endif
#if STM32_HAS_GPIOK
  initgpio(GPIOK, &config->PKData);
#endif
}
 80038ee:	bcf0      	pop	{r4, r5, r6, r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40020000 	.word	0x40020000
 80038fc:	40020400 	.word	0x40020400
 8003900:	40020800 	.word	0x40020800
 8003904:	40020c00 	.word	0x40020c00
 8003908:	40021000 	.word	0x40021000
 800390c:	00000000 	.word	0x00000000

08003910 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8003910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8003914:	f3c2 1c41 	ubfx	ip, r2, #5, #2
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8003918:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800391c:	f3c2 0980 	ubfx	r9, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8003920:	f3c2 08c1 	ubfx	r8, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8003924:	2700      	movs	r7, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8003926:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800392a:	f04f 0b0f 	mov.w	fp, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800392e:	f04f 0a01 	mov.w	sl, #1
 8003932:	e00f      	b.n	8003954 <_pal_lld_setgroupmode+0x44>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8003934:	6a04      	ldr	r4, [r0, #32]
 8003936:	ea24 0303 	bic.w	r3, r4, r3
 800393a:	431d      	orrs	r5, r3
 800393c:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800393e:	0849      	lsrs	r1, r1, #1
 8003940:	d039      	beq.n	80039b6 <_pal_lld_setgroupmode+0xa6>
      return;
    otyper <<= 1;
 8003942:	ea4f 0949 	mov.w	r9, r9, lsl #1
    ospeedr <<= 2;
 8003946:	ea4f 0888 	mov.w	r8, r8, lsl #2
    pupdr <<= 2;
 800394a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    moder <<= 2;
 800394e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8003952:	3701      	adds	r7, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 8003954:	07cb      	lsls	r3, r1, #31
 8003956:	d5f2      	bpl.n	800393e <_pal_lld_setgroupmode+0x2e>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8003958:	6843      	ldr	r3, [r0, #4]
 800395a:	fa0a f407 	lsl.w	r4, sl, r7
 800395e:	ea23 0304 	bic.w	r3, r3, r4
 8003962:	ea43 0309 	orr.w	r3, r3, r9
 8003966:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8003968:	2503      	movs	r5, #3
 800396a:	007c      	lsls	r4, r7, #1
 800396c:	6883      	ldr	r3, [r0, #8]
 800396e:	fa05 f404 	lsl.w	r4, r5, r4
 8003972:	43e4      	mvns	r4, r4
 8003974:	4023      	ands	r3, r4
 8003976:	ea43 0308 	orr.w	r3, r3, r8
 800397a:	6083      	str	r3, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800397c:	68c5      	ldr	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 800397e:	f007 0307 	and.w	r3, r7, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8003982:	4025      	ands	r5, r4
 8003984:	ea45 050c 	orr.w	r5, r5, ip
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8003988:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 800398a:	f1be 0f02 	cmp.w	lr, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800398e:	60c5      	str	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8003990:	fa02 f503 	lsl.w	r5, r2, r3
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8003994:	fa0b f303 	lsl.w	r3, fp, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 8003998:	d00f      	beq.n	80039ba <_pal_lld_setgroupmode+0xaa>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 800399a:	6806      	ldr	r6, [r0, #0]
 800399c:	4034      	ands	r4, r6
 800399e:	ea44 040e 	orr.w	r4, r4, lr
        if (bit < 8)
 80039a2:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80039a4:	6004      	str	r4, [r0, #0]
        if (bit < 8)
 80039a6:	d9c5      	bls.n	8003934 <_pal_lld_setgroupmode+0x24>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80039a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80039aa:	ea24 0303 	bic.w	r3, r4, r3
 80039ae:	431d      	orrs	r5, r3
      }
    }
    mask >>= 1;
    if (!mask)
 80039b0:	0849      	lsrs	r1, r1, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80039b2:	6245      	str	r5, [r0, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 80039b4:	d1c5      	bne.n	8003942 <_pal_lld_setgroupmode+0x32>
 80039b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 80039ba:	2f07      	cmp	r7, #7
 80039bc:	d80a      	bhi.n	80039d4 <_pal_lld_setgroupmode+0xc4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80039be:	6a06      	ldr	r6, [r0, #32]
 80039c0:	ea26 0303 	bic.w	r3, r6, r3
 80039c4:	431d      	orrs	r5, r3
 80039c6:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 80039c8:	6803      	ldr	r3, [r0, #0]
 80039ca:	401c      	ands	r4, r3
 80039cc:	f044 0402 	orr.w	r4, r4, #2
 80039d0:	6004      	str	r4, [r0, #0]
 80039d2:	e7b4      	b.n	800393e <_pal_lld_setgroupmode+0x2e>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80039d4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80039d6:	ea26 0303 	bic.w	r3, r6, r3
 80039da:	431d      	orrs	r5, r3
 80039dc:	6245      	str	r5, [r0, #36]	; 0x24
 80039de:	e7f3      	b.n	80039c8 <_pal_lld_setgroupmode+0xb8>

080039e0 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80039e0:	f011 0f0c 	tst.w	r1, #12
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	4605      	mov	r5, r0
  I2C_TypeDef *dp = i2cp->i2c;
 80039e8:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80039ea:	d112      	bne.n	8003a12 <i2c_lld_serve_tx_end_irq+0x32>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 80039ec:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80039ee:	680a      	ldr	r2, [r1, #0]
 80039f0:	6813      	ldr	r3, [r2, #0]
 80039f2:	f023 031f 	bic.w	r3, r3, #31
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	6813      	ldr	r3, [r2, #0]
 80039fa:	07db      	lsls	r3, r3, #31
 80039fc:	d4fc      	bmi.n	80039f8 <i2c_lld_serve_tx_end_irq+0x18>
 80039fe:	7a08      	ldrb	r0, [r1, #8]
 8003a00:	684a      	ldr	r2, [r1, #4]
 8003a02:	233d      	movs	r3, #61	; 0x3d
 8003a04:	4083      	lsls	r3, r0
 8003a06:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8003a08:	6863      	ldr	r3, [r4, #4]
 8003a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a0e:	6063      	str	r3, [r4, #4]
 8003a10:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8003a12:	4802      	ldr	r0, [pc, #8]	; (8003a1c <i2c_lld_serve_tx_end_irq+0x3c>)
 8003a14:	f7fd fabc 	bl	8000f90 <chSysHalt>
 8003a18:	e7e8      	b.n	80039ec <i2c_lld_serve_tx_end_irq+0xc>
 8003a1a:	bf00      	nop
 8003a1c:	08007ad0 	.word	0x08007ad0

08003a20 <i2c_lld_serve_rx_end_irq>:
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003a20:	f011 0f0c 	tst.w	r1, #12
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	4606      	mov	r6, r0
  I2C_TypeDef *dp = i2cp->i2c;
 8003a28:	6b45      	ldr	r5, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003a2a:	d125      	bne.n	8003a78 <i2c_lld_serve_rx_end_irq+0x58>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmarx);
 8003a2c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003a2e:	6813      	ldr	r3, [r2, #0]
 8003a30:	6819      	ldr	r1, [r3, #0]
 8003a32:	f021 011f 	bic.w	r1, r1, #31
 8003a36:	6019      	str	r1, [r3, #0]
 8003a38:	6819      	ldr	r1, [r3, #0]
 8003a3a:	f011 0401 	ands.w	r4, r1, #1
 8003a3e:	d1fb      	bne.n	8003a38 <i2c_lld_serve_rx_end_irq+0x18>
 8003a40:	7a11      	ldrb	r1, [r2, #8]
 8003a42:	6852      	ldr	r2, [r2, #4]
 8003a44:	233d      	movs	r3, #61	; 0x3d
 8003a46:	408b      	lsls	r3, r1
 8003a48:	6013      	str	r3, [r2, #0]

  dp->CR2 &= ~I2C_CR2_LAST;
 8003a4a:	686b      	ldr	r3, [r5, #4]
 8003a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a50:	606b      	str	r3, [r5, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8003a52:	682b      	ldr	r3, [r5, #0]
 8003a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a58:	602b      	str	r3, [r5, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8003a5a:	682b      	ldr	r3, [r5, #0]
 8003a5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a60:	602b      	str	r3, [r5, #0]
 8003a62:	2320      	movs	r3, #32
 8003a64:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8003a68:	f106 001c 	add.w	r0, r6, #28
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	f7fd fd4f 	bl	8001510 <chThdResumeI>
 8003a72:	f384 8811 	msr	BASEPRI, r4
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8003a78:	4801      	ldr	r0, [pc, #4]	; (8003a80 <i2c_lld_serve_rx_end_irq+0x60>)
 8003a7a:	f7fd fa89 	bl	8000f90 <chSysHalt>
 8003a7e:	e7d5      	b.n	8003a2c <i2c_lld_serve_rx_end_irq+0xc>
 8003a80:	08007ad0 	.word	0x08007ad0
	...

08003a90 <VectorBC>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003a90:	483a      	ldr	r0, [pc, #232]	; (8003b7c <VectorBC+0xec>)
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003a92:	4a3b      	ldr	r2, [pc, #236]	; (8003b80 <VectorBC+0xf0>)
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8003a94:	b570      	push	{r4, r5, r6, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003a96:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 8003a98:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8003a9a:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003a9c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8003aa0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d04c      	beq.n	8003b42 <VectorBC+0xb2>
 8003aa8:	d81e      	bhi.n	8003ae8 <VectorBC+0x58>
 8003aaa:	3a07      	subs	r2, #7
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d03c      	beq.n	8003b2a <VectorBC+0x9a>
 8003ab0:	3201      	adds	r2, #1
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d110      	bne.n	8003ad8 <VectorBC+0x48>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003ab6:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8003ab8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003aba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 8003abe:	681b      	ldr	r3, [r3, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003ac0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8003aca:	6862      	ldr	r2, [r4, #4]
 8003acc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ad0:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d94b      	bls.n	8003b70 <VectorBC+0xe0>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8003ad8:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8003adc:	bf18      	it	ne
 8003ade:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 8003ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8003ae4:	f7fd bf0c 	b.w	8001900 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003ae8:	4a26      	ldr	r2, [pc, #152]	; (8003b84 <VectorBC+0xf4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d012      	beq.n	8003b14 <VectorBC+0x84>
 8003aee:	3202      	adds	r2, #2
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d1f1      	bne.n	8003ad8 <VectorBC+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8003af4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685e      	ldr	r6, [r3, #4]
 8003afa:	b33e      	cbz	r6, 8003b4c <VectorBC+0xbc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003afc:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8003afe:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003b00:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003b0a:	6023      	str	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 8003b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8003b10:	f7fd bef6 	b.w	8001900 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003b14:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8003b16:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8003b1c:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003b1e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8003b20:	6813      	ldr	r3, [r2, #0]
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	e7d6      	b.n	8003ad8 <VectorBC+0x48>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 8003b2a:	8c03      	ldrh	r3, [r0, #32]
 8003b2c:	0a1a      	lsrs	r2, r3, #8
 8003b2e:	d00b      	beq.n	8003b48 <VectorBC+0xb8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003b38:	f002 0206 	and.w	r2, r2, #6
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	6123      	str	r3, [r4, #16]
 8003b40:	e7ca      	b.n	8003ad8 <VectorBC+0x48>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8003b42:	8c03      	ldrh	r3, [r0, #32]
 8003b44:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8003b48:	6123      	str	r3, [r4, #16]
 8003b4a:	e7c5      	b.n	8003ad8 <VectorBC+0x48>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003b4c:	6863      	ldr	r3, [r4, #4]
 8003b4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b52:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b5a:	6023      	str	r3, [r4, #0]
 8003b5c:	2320      	movs	r3, #32
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8003b62:	301c      	adds	r0, #28
 8003b64:	4631      	mov	r1, r6
 8003b66:	f7fd fcd3 	bl	8001510 <chThdResumeI>
 8003b6a:	f386 8811 	msr	BASEPRI, r6
 8003b6e:	e7b3      	b.n	8003ad8 <VectorBC+0x48>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b76:	6023      	str	r3, [r4, #0]
 8003b78:	e7ae      	b.n	8003ad8 <VectorBC+0x48>
 8003b7a:	bf00      	nop
 8003b7c:	20001018 	.word	0x20001018
 8003b80:	00030008 	.word	0x00030008
 8003b84:	00070082 	.word	0x00070082
	...

08003b90 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 8003b90:	4833      	ldr	r0, [pc, #204]	; (8003c60 <VectorC0+0xd0>)
}

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8003b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 8003b94:	6b44      	ldr	r4, [r0, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003b96:	6b07      	ldr	r7, [r0, #48]	; 0x30

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 8003b98:	6966      	ldr	r6, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003b9a:	683a      	ldr	r2, [r7, #0]

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 8003b9c:	b2b1      	uxth	r1, r6

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8003b9e:	f401 435f 	and.w	r3, r1, #57088	; 0xdf00
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	6163      	str	r3, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003ba6:	6813      	ldr	r3, [r2, #0]
 8003ba8:	f023 031f 	bic.w	r3, r3, #31
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	6813      	ldr	r3, [r2, #0]
 8003bb0:	07db      	lsls	r3, r3, #31
 8003bb2:	d4fc      	bmi.n	8003bae <VectorC0+0x1e>
 8003bb4:	7a3a      	ldrb	r2, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 8003bb6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003bb8:	687f      	ldr	r7, [r7, #4]
 8003bba:	233d      	movs	r3, #61	; 0x3d
 8003bbc:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 8003bbe:	682a      	ldr	r2, [r5, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003bc0:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8003bc2:	6813      	ldr	r3, [r2, #0]
 8003bc4:	f023 031f 	bic.w	r3, r3, #31
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	6813      	ldr	r3, [r2, #0]
 8003bcc:	f013 0301 	ands.w	r3, r3, #1
 8003bd0:	d1fb      	bne.n	8003bca <VectorC0+0x3a>
 8003bd2:	7a2f      	ldrb	r7, [r5, #8]
 8003bd4:	686d      	ldr	r5, [r5, #4]
 8003bd6:	223d      	movs	r2, #61	; 0x3d
 8003bd8:	40ba      	lsls	r2, r7

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8003bda:	05cf      	lsls	r7, r1, #23
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 8003bdc:	602a      	str	r2, [r5, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 8003bde:	bf48      	it	mi
 8003be0:	2301      	movmi	r3, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8003be2:	058d      	lsls	r5, r1, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 8003be4:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8003be6:	bf44      	itt	mi
 8003be8:	f043 0302 	orrmi.w	r3, r3, #2
 8003bec:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8003bee:	054a      	lsls	r2, r1, #21
 8003bf0:	d50a      	bpl.n	8003c08 <VectorC0+0x78>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8003bf2:	6862      	ldr	r2, [r4, #4]
 8003bf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bf8:	6062      	str	r2, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8003bfa:	6822      	ldr	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8003bfc:	f043 0304 	orr.w	r3, r3, #4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8003c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c04:	6022      	str	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8003c06:	6083      	str	r3, [r0, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8003c08:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 8003c0a:	bf44      	itt	mi
 8003c0c:	f043 0308 	orrmi.w	r3, r3, #8
 8003c10:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8003c12:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 8003c14:	bf44      	itt	mi
 8003c16:	f043 0320 	orrmi.w	r3, r3, #32
 8003c1a:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8003c1c:	04cc      	lsls	r4, r1, #19
 8003c1e:	d513      	bpl.n	8003c48 <VectorC0+0xb8>
    i2cp->errors |= I2C_PEC_ERROR;
 8003c20:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003c24:	0431      	lsls	r1, r6, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 8003c26:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003c28:	d416      	bmi.n	8003c58 <VectorC0+0xc8>
 8003c2a:	2320      	movs	r3, #32
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f06f 0101 	mvn.w	r1, #1
 8003c34:	480b      	ldr	r0, [pc, #44]	; (8003c64 <VectorC0+0xd4>)
 8003c36:	f7fd fc6b 	bl	8001510 <chThdResumeI>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f383 8811 	msr	BASEPRI, r3

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 8003c40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8003c44:	f7fd be5c 	b.w	8001900 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003c48:	0432      	lsls	r2, r6, #16
 8003c4a:	d405      	bmi.n	8003c58 <VectorC0+0xc8>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1ec      	bne.n	8003c2a <VectorC0+0x9a>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 8003c50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8003c54:	f7fd be54 	b.w	8001900 <_port_irq_epilogue>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 8003c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5c:	6083      	str	r3, [r0, #8]
 8003c5e:	e7e4      	b.n	8003c2a <VectorC0+0x9a>
 8003c60:	20001018 	.word	0x20001018
 8003c64:	20001034 	.word	0x20001034
	...

08003c70 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 8003c70:	b510      	push	{r4, lr}

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
 8003c72:	4c07      	ldr	r4, [pc, #28]	; (8003c90 <i2c_lld_init+0x20>)
 8003c74:	4620      	mov	r0, r4
 8003c76:	f7fe f95b 	bl	8001f30 <i2cObjectInit>
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <i2c_lld_init+0x24>)
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 8003c7c:	4a06      	ldr	r2, [pc, #24]	; (8003c98 <i2c_lld_init+0x28>)
 8003c7e:	6362      	str	r2, [r4, #52]	; 0x34
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 8003c80:	2100      	movs	r1, #0
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8003c82:	f103 0248 	add.w	r2, r3, #72	; 0x48
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 8003c86:	61e1      	str	r1, [r4, #28]
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8003c88:	62e3      	str	r3, [r4, #44]	; 0x2c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8003c8a:	6322      	str	r2, [r4, #48]	; 0x30
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	bf00      	nop
 8003c90:	20001018 	.word	0x20001018
 8003c94:	08007a10 	.word	0x08007a10
 8003c98:	40005400 	.word	0x40005400
 8003c9c:	00000000 	.word	0x00000000

08003ca0 <i2c_lld_start>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8003ca2:	7803      	ldrb	r3, [r0, #0]
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003ca4:	6b45      	ldr	r5, [r0, #52]	; 0x34

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8003ca6:	f240 4256 	movw	r2, #1110	; 0x456
 8003caa:	6282      	str	r2, [r0, #40]	; 0x28
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8003cac:	2b01      	cmp	r3, #1

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8003cae:	f240 4216 	movw	r2, #1046	; 0x416
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8003cb2:	4604      	mov	r4, r0

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8003cb4:	6242      	str	r2, [r0, #36]	; 0x24
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8003cb6:	d03c      	beq.n	8003d32 <i2c_lld_start+0x92>
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003cb8:	462b      	mov	r3, r5
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8003cba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8003cbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003cbe:	6860      	ldr	r0, [r4, #4]
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8003cc0:	680f      	ldr	r7, [r1, #0]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8003cc2:	f8d2 e000 	ldr.w	lr, [r2]
 * @notapi
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
 8003cc6:	6841      	ldr	r1, [r0, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8003cc8:	4e49      	ldr	r6, [pc, #292]	; (8003df0 <i2c_lld_start+0x150>)
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8003cca:	f105 0210 	add.w	r2, r5, #16
 8003cce:	60ba      	str	r2, [r7, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8003cd0:	f44f 6410 	mov.w	r4, #2304	; 0x900
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8003cd4:	f8ce 2008 	str.w	r2, [lr, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8003cd8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  dp->CR1 = 0;
 8003cdc:	2200      	movs	r2, #0
  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8003cde:	602f      	str	r7, [r5, #0]
  dp->CR1 = 0;
 8003ce0:	602a      	str	r2, [r5, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8003ce2:	606c      	str	r4, [r5, #4]
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8003ce4:	685f      	ldr	r7, [r3, #4]
 8003ce6:	f64f 74c0 	movw	r4, #65472	; 0xffc0
 8003cea:	403c      	ands	r4, r7
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 8003cec:	7a07      	ldrb	r7, [r0, #8]
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8003cee:	605c      	str	r4, [r3, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8003cf0:	685c      	ldr	r4, [r3, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8003cf2:	42b1      	cmp	r1, r6
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8003cf4:	f044 042a 	orr.w	r4, r4, #42	; 0x2a
 8003cf8:	605c      	str	r4, [r3, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8003cfa:	dd4e      	ble.n	8003d9a <i2c_lld_start+0xfa>
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
  }
  else if (clock_speed <= 400000) {
 8003cfc:	4c3d      	ldr	r4, [pc, #244]	; (8003df4 <i2c_lld_start+0x154>)
 8003cfe:	42a1      	cmp	r1, r4
 8003d00:	dc07      	bgt.n	8003d12 <i2c_lld_start+0x72>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
 8003d02:	2f02      	cmp	r7, #2
 8003d04:	d068      	beq.n	8003dd8 <i2c_lld_start+0x138>
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8003d06:	2f03      	cmp	r7, #3
 8003d08:	d059      	beq.n	8003dbe <i2c_lld_start+0x11e>
 8003d0a:	f648 72ff 	movw	r2, #36863	; 0x8fff
    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8003d0e:	210d      	movs	r1, #13
 8003d10:	6219      	str	r1, [r3, #32]
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");

  dp->CCR = regCCR;
 8003d12:	61da      	str	r2, [r3, #28]
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
 8003d14:	7801      	ldrb	r1, [r0, #0]
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8003d16:	681a      	ldr	r2, [r3, #0]
  switch (opmode) {
 8003d18:	2902      	cmp	r1, #2
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8003d1a:	b292      	uxth	r2, r2
  switch (opmode) {
 8003d1c:	d049      	beq.n	8003db2 <i2c_lld_start+0x112>
 8003d1e:	2903      	cmp	r1, #3
 8003d20:	d044      	beq.n	8003dac <i2c_lld_start+0x10c>
 8003d22:	2901      	cmp	r1, #1
 8003d24:	d035      	beq.n	8003d92 <i2c_lld_start+0xf2>
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  }
  dp->CR1 = regCR1;
 8003d26:	601a      	str	r2, [r3, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	602b      	str	r3, [r5, #0]
 8003d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
 8003d32:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <i2c_lld_start+0x158>)
 8003d34:	4298      	cmp	r0, r3
 8003d36:	d1bf      	bne.n	8003cb8 <i2c_lld_start+0x18>
      bool b;

      rccResetI2C1();
 8003d38:	4e30      	ldr	r6, [pc, #192]	; (8003dfc <i2c_lld_start+0x15c>)
      b = dmaStreamAllocate(i2cp->dmarx,
 8003d3a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8003d3c:	6a33      	ldr	r3, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 8003d3e:	4a30      	ldr	r2, [pc, #192]	; (8003e00 <i2c_lld_start+0x160>)

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8003d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d44:	2100      	movs	r1, #0
 8003d46:	6233      	str	r3, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 8003d48:	4623      	mov	r3, r4

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8003d4a:	6231      	str	r1, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 8003d4c:	2104      	movs	r1, #4
 8003d4e:	f7ff f97f 	bl	8003050 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(i2cp->dmatx,
 8003d52:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <i2c_lld_start+0x164>)
 8003d54:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003d56:	4623      	mov	r3, r4
 8003d58:	2104      	movs	r1, #4
 8003d5a:	f7ff f979 	bl	8003050 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 8003d5e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d64:	6433      	str	r3, [r6, #64]	; 0x40
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 8003d66:	2104      	movs	r1, #4
 8003d68:	201f      	movs	r0, #31
 8003d6a:	f7fe fef9 	bl	8002b60 <nvicEnableVector>
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 8003d6e:	2104      	movs	r1, #4
 8003d70:	2020      	movs	r0, #32
 8003d72:	f7fe fef5 	bl	8002b60 <nvicEnableVector>

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8003d76:	6a61      	ldr	r1, [r4, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8003d78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8003d7c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8003d80:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8003d84:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8003d88:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8003d8c:	6261      	str	r1, [r4, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8003d8e:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d90:	e793      	b.n	8003cba <i2c_lld_start+0x1a>
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8003d92:	f022 020a 	bic.w	r2, r2, #10
 8003d96:	b292      	uxth	r2, r2
 8003d98:	e7c5      	b.n	8003d26 <i2c_lld_start+0x86>
    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 8003d9a:	242b      	movs	r4, #43	; 0x2b
 8003d9c:	0049      	lsls	r1, r1, #1
 8003d9e:	4a1a      	ldr	r2, [pc, #104]	; (8003e08 <i2c_lld_start+0x168>)
 8003da0:	621c      	str	r4, [r3, #32]
 8003da2:	fbb2 f2f1 	udiv	r2, r2, r1
 8003da6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003daa:	e7b2      	b.n	8003d12 <i2c_lld_start+0x72>
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8003dac:	f042 020a 	orr.w	r2, r2, #10
 8003db0:	e7b9      	b.n	8003d26 <i2c_lld_start+0x86>
 8003db2:	f022 0208 	bic.w	r2, r2, #8
 8003db6:	b292      	uxth	r2, r2
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8003db8:	f042 0202 	orr.w	r2, r2, #2
 8003dbc:	e7b3      	b.n	8003d26 <i2c_lld_start+0x86>
 8003dbe:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8003dc2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003dc6:	4a10      	ldr	r2, [pc, #64]	; (8003e08 <i2c_lld_start+0x168>)
 8003dc8:	fbb2 f2f1 	udiv	r2, r2, r1
 8003dcc:	ea6f 4282 	mvn.w	r2, r2, lsl #18
 8003dd0:	ea6f 4292 	mvn.w	r2, r2, lsr #18
 8003dd4:	b292      	uxth	r2, r2
 8003dd6:	e79a      	b.n	8003d0e <i2c_lld_start+0x6e>
 8003dd8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003ddc:	490a      	ldr	r1, [pc, #40]	; (8003e08 <i2c_lld_start+0x168>)
 8003dde:	fbb1 f2f2 	udiv	r2, r1, r2
 8003de2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003de6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003dea:	b292      	uxth	r2, r2
 8003dec:	e78f      	b.n	8003d0e <i2c_lld_start+0x6e>
 8003dee:	bf00      	nop
 8003df0:	000186a0 	.word	0x000186a0
 8003df4:	00061a80 	.word	0x00061a80
 8003df8:	20001018 	.word	0x20001018
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	08003a21 	.word	0x08003a21
 8003e04:	080039e1 	.word	0x080039e1
 8003e08:	0280de80 	.word	0x0280de80
 8003e0c:	00000000 	.word	0x00000000

08003e10 <i2c_lld_master_transmit_timeout>:
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
 8003e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8003e14:	0049      	lsls	r1, r1, #1
#if defined(STM32F1XX_I2C)
  osalDbgCheck((rxbytes == 0) || ((rxbytes > 1) && (rxbuf != NULL)));
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 8003e16:	2500      	movs	r5, #0
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
 8003e18:	4616      	mov	r6, r2
 8003e1a:	aa07      	add	r2, sp, #28

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8003e1c:	8401      	strh	r1, [r0, #32]
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
 8003e1e:	469c      	mov	ip, r3
  I2C_TypeDef *dp = i2cp->i2c;
 8003e20:	6b44      	ldr	r4, [r0, #52]	; 0x34
#if defined(STM32F1XX_I2C)
  osalDbgCheck((rxbytes == 0) || ((rxbytes > 1) && (rxbuf != NULL)));
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 8003e22:	6085      	str	r5, [r0, #8]
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
 8003e24:	e892 4104 	ldmia.w	r2, {r2, r8, lr}
 8003e28:	f385 8811 	msr	BASEPRI, r5

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8003e2c:	6b01      	ldr	r1, [r0, #48]	; 0x30
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8003e2e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8003e30:	6809      	ldr	r1, [r1, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8003e32:	683f      	ldr	r7, [r7, #0]

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8003e34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003e36:	600b      	str	r3, [r1, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8003e38:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8003e3c:	60ce      	str	r6, [r1, #12]
 8003e3e:	4e16      	ldr	r6, [pc, #88]	; (8003e98 <i2c_lld_master_transmit_timeout+0x88>)
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8003e40:	f8c1 c004 	str.w	ip, [r1, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8003e44:	f8c7 9000 	str.w	r9, [r7]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8003e48:	60fa      	str	r2, [r7, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8003e4a:	f8c7 8004 	str.w	r8, [r7, #4]
 8003e4e:	462a      	mov	r2, r5
 8003e50:	6ab7      	ldr	r7, [r6, #40]	; 0x28
 8003e52:	2520      	movs	r5, #32
 8003e54:	e001      	b.n	8003e5a <i2c_lld_master_transmit_timeout+0x4a>
 8003e56:	f382 8811 	msr	BASEPRI, r2
 8003e5a:	f385 8811 	msr	BASEPRI, r5
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8003e5e:	69a3      	ldr	r3, [r4, #24]
 8003e60:	0799      	lsls	r1, r3, #30
 8003e62:	d402      	bmi.n	8003e6a <i2c_lld_master_transmit_timeout+0x5a>
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	059b      	lsls	r3, r3, #22
 8003e68:	d508      	bpl.n	8003e7c <i2c_lld_master_transmit_timeout+0x6c>
 8003e6a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 8003e6c:	1bdb      	subs	r3, r3, r7
 8003e6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e72:	d3f0      	bcc.n	8003e56 <i2c_lld_master_transmit_timeout+0x46>
  dp->CR2 |= I2C_CR2_ITEVTEN;
  dp->CR1 |= I2C_CR1_START;

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
}
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

    osalSysUnlock();
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8003e7c:	6863      	ldr	r3, [r4, #4]
 8003e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e82:	6063      	str	r3, [r4, #4]
  dp->CR1 |= I2C_CR1_START;
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 * @sclass
 */
static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
                                              systime_t timeout) {

  return chThdSuspendTimeoutS(trp, timeout);
 8003e8a:	4671      	mov	r1, lr
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	301c      	adds	r0, #28

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
}
 8003e90:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e94:	f7fd bb2c 	b.w	80014f0 <chThdSuspendTimeoutS>
 8003e98:	20000c70 	.word	0x20000c70
 8003e9c:	00000000 	.word	0x00000000

08003ea0 <usb_lld_pump>:
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 8003ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8003ea4:	4b7c      	ldr	r3, [pc, #496]	; (8004098 <usb_lld_pump+0x1f8>)
 8003ea6:	497d      	ldr	r1, [pc, #500]	; (800409c <usb_lld_pump+0x1fc>)
 8003ea8:	699a      	ldr	r2, [r3, #24]
  USBDriver *usbp = (USBDriver *)p;
  stm32_otg_t *otgp = usbp->otg;
 8003eaa:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
 8003eae:	6191      	str	r1, [r2, #24]
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	4683      	mov	fp, r0
 8003eb4:	2320      	movs	r3, #32
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f100 0360 	add.w	r3, r0, #96	; 0x60
 8003ebe:	9301      	str	r3, [sp, #4]
  while (true) {
    usbep_t ep;
    uint32_t epmask;

    /* Nothing to do, going to sleep.*/
    if ((usbp->state == USB_STOP) ||
 8003ec0:	f89b 3000 	ldrb.w	r3, [fp]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d006      	beq.n	8003ed6 <usb_lld_pump+0x36>
 8003ec8:	f8db 305c 	ldr.w	r3, [fp, #92]	; 0x5c
 8003ecc:	b963      	cbnz	r3, 8003ee8 <usb_lld_pump+0x48>
        ((usbp->txpending == 0) && !(otgp->GINTSTS & GINTSTS_RXFLVL))) {
 8003ece:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003ed2:	06de      	lsls	r6, r3, #27
 8003ed4:	d408      	bmi.n	8003ee8 <usb_lld_pump+0x48>
      otgp->GINTMSK |= GINTMSK_RXFLVLM;
 8003ed6:	f8da 3018 	ldr.w	r3, [sl, #24]
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 8003eda:	9801      	ldr	r0, [sp, #4]
 8003edc:	f043 0310 	orr.w	r3, r3, #16
 8003ee0:	f8ca 3018 	str.w	r3, [sl, #24]
 8003ee4:	f7fd faf4 	bl	80014d0 <chThdSuspendS>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	469e      	mov	lr, r3

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 8003ef0:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003ef4:	f013 0310 	ands.w	r3, r3, #16
 8003ef8:	d050      	beq.n	8003f9c <usb_lld_pump+0xfc>
 * @notapi
 */
static void otg_rxfifo_handler(USBDriver *usbp) {
  uint32_t sts, cnt, ep;

  sts = usbp->otg->GRXSTSP;
 8003efa:	f8db 3050 	ldr.w	r3, [fp, #80]	; 0x50
 8003efe:	6a1a      	ldr	r2, [r3, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8003f00:	f402 11f0 	and.w	r1, r2, #1966080	; 0x1e0000
 8003f04:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8003f08:	d01e      	beq.n	8003f48 <usb_lld_pump+0xa8>
 8003f0a:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8003f0e:	d1ef      	bne.n	8003ef0 <usb_lld_pump+0x50>
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8003f10:	f002 010f 	and.w	r1, r2, #15
 8003f14:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
  sts = usbp->otg->GRXSTSP;
  switch (sts & GRXSTSP_PKTSTS_MASK) {
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8003f18:	f3c2 120a 	ubfx	r2, r2, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8003f1c:	68c9      	ldr	r1, [r1, #12]
 8003f1e:	6a0c      	ldr	r4, [r1, #32]
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8003f20:	2a00      	cmp	r2, #0
 8003f22:	d0e5      	beq.n	8003ef0 <usb_lld_pump+0x50>
 8003f24:	2100      	movs	r1, #0
    if ((i & 3) == 0){
      w = *fifop;
 8003f26:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	e001      	b.n	8003f32 <usb_lld_pump+0x92>
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d0de      	beq.n	8003ef0 <usb_lld_pump+0x50>
    if ((i & 3) == 0){
 8003f32:	079d      	lsls	r5, r3, #30
      w = *fifop;
 8003f34:	bf08      	it	eq
 8003f36:	6801      	ldreq	r1, [r0, #0]
    }
    if (i < max) {
 8003f38:	2b07      	cmp	r3, #7
      *buf++ = (uint8_t)w;
      w >>= 8;
    }
    i++;
 8003f3a:	f103 0301 	add.w	r3, r3, #1

  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
 8003f3e:	d8f6      	bhi.n	8003f2e <usb_lld_pump+0x8e>
      *buf++ = (uint8_t)w;
 8003f40:	7021      	strb	r1, [r4, #0]
      w >>= 8;
 8003f42:	0a09      	lsrs	r1, r1, #8
  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
      *buf++ = (uint8_t)w;
 8003f44:	3401      	adds	r4, #1
 8003f46:	e7f2      	b.n	8003f2e <usb_lld_pump+0x8e>
 8003f48:	f002 060f 	and.w	r6, r2, #15
 8003f4c:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8003f50:	f3c2 120a 	ubfx	r2, r2, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
 8003f54:	68f1      	ldr	r1, [r6, #12]
 8003f56:	6989      	ldr	r1, [r1, #24]
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
 8003f58:	684c      	ldr	r4, [r1, #4]
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8003f5a:	680d      	ldr	r5, [r1, #0]
 8003f5c:	6888      	ldr	r0, [r1, #8]
 8003f5e:	1b2d      	subs	r5, r5, r4
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8003f60:	b38a      	cbz	r2, 8003fc6 <usb_lld_pump+0x126>
 8003f62:	2100      	movs	r1, #0
    if ((i & 3) == 0){
      w = *fifop;
 8003f64:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8003f68:	460b      	mov	r3, r1
    if ((i & 3) == 0){
 8003f6a:	079f      	lsls	r7, r3, #30
      w = *fifop;
 8003f6c:	bf08      	it	eq
 8003f6e:	6821      	ldreq	r1, [r4, #0]
    }
    if (i < max) {
 8003f70:	429d      	cmp	r5, r3
      *buf++ = (uint8_t)w;
      w >>= 8;
    }
    i++;
 8003f72:	f103 0301 	add.w	r3, r3, #1

  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
 8003f76:	d902      	bls.n	8003f7e <usb_lld_pump+0xde>
      *buf++ = (uint8_t)w;
 8003f78:	7001      	strb	r1, [r0, #0]
      w >>= 8;
 8003f7a:	0a09      	lsrs	r1, r1, #8
  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
      *buf++ = (uint8_t)w;
 8003f7c:	3001      	adds	r0, #1
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d1f3      	bne.n	8003f6a <usb_lld_pump+0xca>
 8003f82:	68f3      	ldr	r3, [r6, #12]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	6898      	ldr	r0, [r3, #8]
 8003f88:	685c      	ldr	r4, [r3, #4]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
    usbp->epc[ep]->out_state->rxbuf += cnt;
 8003f8a:	4410      	add	r0, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 8003f8c:	4422      	add	r2, r4
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
    usbp->epc[ep]->out_state->rxbuf += cnt;
 8003f8e:	6098      	str	r0, [r3, #8]
    usbp->epc[ep]->out_state->rxcnt += cnt;
 8003f90:	605a      	str	r2, [r3, #4]

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 8003f92:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003f96:	f013 0310 	ands.w	r3, r3, #16
 8003f9a:	d1ae      	bne.n	8003efa <usb_lld_pump+0x5a>
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
      if (usbp->txpending & epmask) {
 8003f9c:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	fa01 f10e 	lsl.w	r1, r1, lr
      if (usbp->txpending & epmask) {
 8003fa6:	4211      	tst	r1, r2
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 8003fa8:	9100      	str	r1, [sp, #0]
      if (usbp->txpending & epmask) {
 8003faa:	d10e      	bne.n	8003fca <usb_lld_pump+0x12a>
 8003fac:	f10e 0e01 	add.w	lr, lr, #1
      osalThreadSuspendS(&usbp->wait);
    }
    osalSysUnlock();

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8003fb0:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	fa5f fe8e 	uxtb.w	lr, lr
 8003fba:	459e      	cmp	lr, r3
 8003fbc:	d998      	bls.n	8003ef0 <usb_lld_pump+0x50>
 8003fbe:	2320      	movs	r3, #32
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	e77c      	b.n	8003ec0 <usb_lld_pump+0x20>
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	e7df      	b.n	8003f8a <usb_lld_pump+0xea>
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f382 8811 	msr	BASEPRI, r2
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 8003fd0:	f8da 1008 	ldr.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 8003fd4:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 8003fd8:	9800      	ldr	r0, [sp, #0]
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 8003fda:	f021 0101 	bic.w	r1, r1, #1
        usbp->txpending &= ~epmask;
 8003fde:	ea22 0200 	bic.w	r2, r2, r0
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 8003fe2:	f8ca 1008 	str.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 8003fe6:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 8003fea:	f383 8811 	msr	BASEPRI, r3
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 8003fee:	eb0b 038e 	add.w	r3, fp, lr, lsl #2
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	695f      	ldr	r7, [r3, #20]
 8003ff6:	687d      	ldr	r5, [r7, #4]
 8003ff8:	f8d7 c000 	ldr.w	ip, [r7]
 8003ffc:	45ac      	cmp	ip, r5
 8003ffe:	d947      	bls.n	8004090 <usb_lld_pump+0x1f0>
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8004000:	f8db 0050 	ldr.w	r0, [fp, #80]	; 0x50
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return true;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
    if (n > usbp->epc[ep]->in_maxsize)
 8004004:	f8b3 9010 	ldrh.w	r9, [r3, #16]
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8004008:	eb00 184e 	add.w	r8, r0, lr, lsl #5
    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return true;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800400c:	ebc5 040c 	rsb	r4, r5, ip
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8004010:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
 8004014:	454c      	cmp	r4, r9
 8004016:	bf28      	it	cs
 8004018:	464c      	movcs	r4, r9
 800401a:	b29b      	uxth	r3, r3
 800401c:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8004020:	f10e 0e01 	add.w	lr, lr, #1
 8004024:	d81f      	bhi.n	8004066 <usb_lld_pump+0x1c6>
 8004026:	68be      	ldr	r6, [r7, #8]
 8004028:	eb00 300e 	add.w	r0, r0, lr, lsl #12
                                       size_t n) {

  osalDbgAssert(n > 0, "is zero");

  while (true) {
    *fifop = *((uint32_t *)buf);
 800402c:	6833      	ldr	r3, [r6, #0]
 800402e:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 8004030:	2c04      	cmp	r4, #4
 8004032:	d907      	bls.n	8004044 <usb_lld_pump+0x1a4>
 8004034:	4623      	mov	r3, r4
 8004036:	4632      	mov	r2, r6
      break;
    }
    n -= 4;
 8004038:	3b04      	subs	r3, #4
                                       size_t n) {

  osalDbgAssert(n > 0, "is zero");

  while (true) {
    *fifop = *((uint32_t *)buf);
 800403a:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800403e:	6001      	str	r1, [r0, #0]
    if (n <= 4) {
 8004040:	2b04      	cmp	r3, #4
 8004042:	d8f9      	bhi.n	8004038 <usb_lld_pump+0x198>
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 8004044:	4425      	add	r5, r4
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
 8004046:	4426      	add	r6, r4
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 8004048:	4565      	cmp	r5, ip
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
 800404a:	60be      	str	r6, [r7, #8]
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 800404c:	607d      	str	r5, [r7, #4]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800404e:	d221      	bcs.n	8004094 <usb_lld_pump+0x1f4>
      return true;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 8004050:	ebc5 040c 	rsb	r4, r5, ip
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8004054:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
 8004058:	454c      	cmp	r4, r9
 800405a:	b29b      	uxth	r3, r3
 800405c:	bf28      	it	cs
 800405e:	464c      	movcs	r4, r9
 8004060:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8004064:	d9e2      	bls.n	800402c <usb_lld_pump+0x18c>
      return false;
 8004066:	2200      	movs	r2, #0
 8004068:	2320      	movs	r3, #32
 800406a:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();

        done = otg_txfifo_handler(usbp, ep);

        osalSysLock();
        otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800406e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	f8ca 3008 	str.w	r3, [sl, #8]
        if (!done)
 800407a:	b92a      	cbnz	r2, 8004088 <usb_lld_pump+0x1e8>
          otgp->DIEPEMPMSK |= epmask;
 800407c:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
 8004080:	9a00      	ldr	r2, [sp, #0]
 8004082:	431a      	orrs	r2, r3
 8004084:	f8ca 2834 	str.w	r2, [sl, #2100]	; 0x834
 8004088:	2300      	movs	r3, #0
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	e78f      	b.n	8003fb0 <usb_lld_pump+0x110>
 8004090:	f10e 0e01 	add.w	lr, lr, #1
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return true;
 8004094:	2201      	movs	r2, #1
 8004096:	e7e7      	b.n	8004068 <usb_lld_pump+0x1c8>
 8004098:	20000c70 	.word	0x20000c70
 800409c:	08007af0 	.word	0x08007af0

080040a0 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 80040a0:	b510      	push	{r4, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 80040a2:	4c06      	ldr	r4, [pc, #24]	; (80040bc <usb_lld_init+0x1c>)
 80040a4:	4620      	mov	r0, r4
 80040a6:	f7fe fa6b 	bl	8002580 <usbObjectInit>
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 80040aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 80040ae:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <usb_lld_init+0x20>)

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 80040b0:	6523      	str	r3, [r4, #80]	; 0x50
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 80040b2:	2300      	movs	r3, #0
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;
 80040b4:	6562      	str	r2, [r4, #84]	; 0x54
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 80040b6:	6623      	str	r3, [r4, #96]	; 0x60
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
 80040b8:	6663      	str	r3, [r4, #100]	; 0x64
 80040ba:	bd10      	pop	{r4, pc}
 80040bc:	20001050 	.word	0x20001050
 80040c0:	08007ae0 	.word	0x08007ae0
	...

080040d0 <usb_lld_start>:
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
 80040d0:	7803      	ldrb	r3, [r0, #0]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d000      	beq.n	80040d8 <usb_lld_start+0x8>
 80040d6:	4770      	bx	lr
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 80040d8:	b5f0      	push	{r4, r5, r6, r7, lr}

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 80040da:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <usb_lld_start+0x108>)
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 80040dc:	6d06      	ldr	r6, [r0, #80]	; 0x50

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 80040de:	4298      	cmp	r0, r3
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 80040e0:	b083      	sub	sp, #12
 80040e2:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
 80040e4:	bf18      	it	ne
 80040e6:	4634      	movne	r4, r6

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 80040e8:	d050      	beq.n	800418c <usb_lld_start+0xbc>
#endif
    }
#endif

    /* Clearing mask of TXFIFOs to be filled.*/
    usbp->txpending = 0;
 80040ea:	2300      	movs	r3, #0

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;

    /* VBUS sensing and transceiver enabled.*/
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80040ec:	21c0      	movs	r1, #192	; 0xc0
    if (&USBD2 == usbp) {
      otgp->GCCFG = 0;
    }
#endif
#else
    otgp->GCCFG = GCCFG_INIT_VALUE;
 80040ee:	f44f 1234 	mov.w	r2, #2949120	; 0x2d0000
#endif
    }
#endif

    /* Clearing mask of TXFIFOs to be filled.*/
    usbp->txpending = 0;
 80040f2:	65eb      	str	r3, [r5, #92]	; 0x5c
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 80040f4:	2020      	movs	r0, #32

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;
 80040f6:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00

    /* VBUS sensing and transceiver enabled.*/
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80040fa:	6031      	str	r1, [r6, #0]
    if (&USBD2 == usbp) {
      otgp->GCCFG = 0;
    }
#endif
#else
    otgp->GCCFG = GCCFG_INIT_VALUE;
 80040fc:	63b2      	str	r2, [r6, #56]	; 0x38
 80040fe:	f7fc ff7f 	bl	8001000 <chSysPolledDelayX>
  stm32_otg_t *otgp = usbp->otg;

  osalSysPolledDelayX(32);

  /* Core reset and delay of at least 3 PHY cycles.*/
  otgp->GRSTCTL = GRSTCTL_CSRST;
 8004102:	2301      	movs	r3, #1
 8004104:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	07db      	lsls	r3, r3, #31
 800410a:	d4fc      	bmi.n	8004106 <usb_lld_start+0x36>
 800410c:	2012      	movs	r0, #18
 800410e:	f7fc ff77 	bl	8001000 <chSysPolledDelayX>
    ;

  osalSysPolledDelayX(18);

  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 8004112:	6923      	ldr	r3, [r4, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	dafc      	bge.n	8004112 <usb_lld_start+0x42>

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004118:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800411a:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800411c:	f8d3 e008 	ldr.w	lr, [r3, #8]

    /* Soft core reset.*/
    otg_core_reset(usbp);

    /* Interrupts on TXFIFOs half empty.*/
    otgp->GAHBCFG = 0;
 8004120:	2300      	movs	r3, #0

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004122:	461a      	mov	r2, r3

    /* Soft core reset.*/
    otg_core_reset(usbp);

    /* Interrupts on TXFIFOs half empty.*/
    otgp->GAHBCFG = 0;
 8004124:	60b3      	str	r3, [r6, #8]
static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
    otgp->ie[i].DIEPCTL = 0;
 8004126:	4619      	mov	r1, r3
    otgp->ie[i].DIEPTSIZ = 0;
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004128:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800412c:	eb07 1342 	add.w	r3, r7, r2, lsl #5

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004130:	3201      	adds	r2, #1
 8004132:	4572      	cmp	r2, lr
    otgp->ie[i].DIEPCTL = 0;
 8004134:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
 8004138:	f04f 0000 	mov.w	r0, #0
    otgp->ie[i].DIEPTSIZ = 0;
 800413c:	f8c3 1910 	str.w	r1, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004140:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

    otgp->oe[i].DOEPCTL = 0;
 8004144:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 8004148:	f8c3 1b10 	str.w	r1, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800414c:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004150:	d9ec      	bls.n	800412c <usb_lld_start+0x5c>
    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
 8004152:	686b      	ldr	r3, [r5, #4]
 8004154:	68db      	ldr	r3, [r3, #12]

    otgp->oe[i].DOEPCTL = 0;
    otgp->oe[i].DOEPTSIZ = 0;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8004156:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800415a:	f8c7 281c 	str.w	r2, [r7, #2076]	; 0x81c
    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
 800415e:	f8c6 0810 	str.w	r0, [r6, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 8004162:	f8c6 0814 	str.w	r0, [r6, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8004166:	f8c6 081c 	str.w	r0, [r6, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 800416a:	b163      	cbz	r3, 8004186 <usb_lld_start+0xb6>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM | GINTMSK_SRQM | GINTMSK_WKUM |
                       GINTMSK_IISOIXFRM | GINTMSK_IISOOXFRM;
    else
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 800416c:	4b1b      	ldr	r3, [pc, #108]	; (80041dc <usb_lld_start+0x10c>)
 800416e:	61b3      	str	r3, [r6, #24]
    /* Clears all pending IRQs, if any. */
    otgp->GINTSTS  = 0xFFFFFFFF;

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 8004170:	6e6b      	ldr	r3, [r5, #100]	; 0x64
                       GINTMSK_ESUSPM | GINTMSK_SRQM | GINTMSK_WKUM |
                       GINTMSK_IISOIXFRM | GINTMSK_IISOOXFRM |
                       GINTMSK_SOFM;

    /* Clears all pending IRQs, if any. */
    otgp->GINTSTS  = 0xFFFFFFFF;
 8004172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004176:	6172      	str	r2, [r6, #20]

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 8004178:	b1f3      	cbz	r3, 80041b8 <usb_lld_start+0xe8>
      chSchRescheduleS();
  }
#endif

    /* Global interrupts enable.*/
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800417a:	68b3      	ldr	r3, [r6, #8]
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	60b3      	str	r3, [r6, #8]
  }
}
 8004182:	b003      	add	sp, #12
 8004184:	bdf0      	pop	{r4, r5, r6, r7, pc}
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8004186:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <usb_lld_start+0x110>)
 8004188:	61b3      	str	r3, [r6, #24]
 800418a:	e7f1      	b.n	8004170 <usb_lld_start+0xa0>
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(false);
 800418c:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <usb_lld_start+0x114>)
 800418e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004194:	635a      	str	r2, [r3, #52]	; 0x34
      rccResetOTG_FS();
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	2000      	movs	r0, #0
 800419a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800419e:	615a      	str	r2, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 80041a0:	210e      	movs	r1, #14

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(false);
      rccResetOTG_FS();
 80041a2:	6158      	str	r0, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 80041a4:	2043      	movs	r0, #67	; 0x43
 80041a6:	f7fe fcdb 	bl	8002b60 <nvicEnableVector>

      /* - Forced device mode.
         - USB turn-around time = TRDT_VALUE_FS.
         - Full Speed 1.1 PHY.*/
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 80041aa:	4a0f      	ldr	r2, [pc, #60]	; (80041e8 <usb_lld_start+0x118>)
                      GUSBCFG_PHYSEL;

      /* 48MHz 1.1 PHY.*/
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <usb_lld_start+0x11c>)
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);

      /* - Forced device mode.
         - USB turn-around time = TRDT_VALUE_FS.
         - Full Speed 1.1 PHY.*/
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 80041ae:	60f2      	str	r2, [r6, #12]
 80041b0:	6d2c      	ldr	r4, [r5, #80]	; 0x50
                      GUSBCFG_PHYSEL;

      /* 48MHz 1.1 PHY.*/
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 80041b2:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
 80041b6:	e798      	b.n	80040ea <usb_lld_start+0x1a>
    otgp->GINTSTS  = 0xFFFFFFFF;

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
      usbp->tr = chThdCreateI(usbp->wa_pump, sizeof usbp->wa_pump,
 80041b8:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <usb_lld_start+0x120>)
 80041ba:	9500      	str	r5, [sp, #0]
 80041bc:	2202      	movs	r2, #2
 80041be:	f44f 7106 	mov.w	r1, #536	; 0x218
 80041c2:	f105 0068 	add.w	r0, r5, #104	; 0x68
 80041c6:	f7fd f8e3 	bl	8001390 <chThdCreateI>
 80041ca:	6668      	str	r0, [r5, #100]	; 0x64
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 80041cc:	f7fc ffb8 	bl	8001140 <chSchReadyI>
                              STM32_USB_OTG_THREAD_PRIO,
                              usb_lld_pump, usbp);
      chThdStartI(usbp->tr);
      chSchRescheduleS();
 80041d0:	f7fd f896 	bl	8001300 <chSchRescheduleS>
 80041d4:	e7d1      	b.n	800417a <usb_lld_start+0xaa>
 80041d6:	bf00      	nop
 80041d8:	20001050 	.word	0x20001050
 80041dc:	c0303c08 	.word	0xc0303c08
 80041e0:	c0303c00 	.word	0xc0303c00
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40001440 	.word	0x40001440
 80041ec:	02200003 	.word	0x02200003
 80041f0:	08003ea1 	.word	0x08003ea1
	...

08004200 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 8004202:	6d05      	ldr	r5, [r0, #80]	; 0x50
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004204:	2320      	movs	r3, #32
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 8004206:	4607      	mov	r7, r0
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004208:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800420a:	692b      	ldr	r3, [r5, #16]
 800420c:	f013 0420 	ands.w	r4, r3, #32
 8004210:	d1fb      	bne.n	800420a <usb_lld_reset+0xa>
 8004212:	2012      	movs	r0, #18
 8004214:	f7fc fef4 	bl	8001000 <chSysPolledDelayX>
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004218:	f8d7 e054 	ldr.w	lr, [r7, #84]	; 0x54

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
 800421c:	f8c5 4834 	str.w	r4, [r5, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8004220:	f04f 1201 	mov.w	r2, #65537	; 0x10001

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8004224:	f8de 6008 	ldr.w	r6, [lr, #8]
  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8004228:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800422c:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800422e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004232:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004236:	eb05 1243 	add.w	r2, r5, r3, lsl #5
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800423a:	3301      	adds	r3, #1
 800423c:	42b3      	cmp	r3, r6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800423e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8004242:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8004246:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800424a:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800424e:	d9f2      	bls.n	8004236 <usb_lld_reset+0x36>
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8004250:	f8de 3000 	ldr.w	r3, [lr]
 8004254:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8004256:	f8de 3000 	ldr.w	r3, [lr]
 800425a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800425c:	626b      	str	r3, [r5, #36]	; 0x24
}

static void otg_rxfifo_flush(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 800425e:	2310      	movs	r3, #16
 8004260:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8004262:	6913      	ldr	r3, [r2, #16]
 8004264:	f013 0410 	ands.w	r4, r3, #16
 8004268:	d1fb      	bne.n	8004262 <usb_lld_reset+0x62>
 800426a:	2012      	movs	r0, #18
 800426c:	f7fc fec8 	bl	8001000 <chSysPolledDelayX>
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8004270:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8004274:	4a10      	ldr	r2, [pc, #64]	; (80042b8 <usb_lld_reset+0xb8>)
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 8004276:	4811      	ldr	r0, [pc, #68]	; (80042bc <usb_lld_reset+0xbc>)
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8004278:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800427c:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8004280:	69ab      	ldr	r3, [r5, #24]
 8004282:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8004286:	f043 0310 	orr.w	r3, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800428a:	2109      	movs	r1, #9

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800428c:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800428e:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8004292:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 8004296:	60f8      	str	r0, [r7, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 8004298:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800429c:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 80042a0:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 80042a4:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 80042a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  usbp->pmnext += size;
 80042aa:	f103 0210 	add.w	r2, r3, #16
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 80042ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 80042b2:	65ba      	str	r2, [r7, #88]	; 0x58
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 80042b4:	62ab      	str	r3, [r5, #40]	; 0x28
 80042b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b8:	10008040 	.word	0x10008040
 80042bc:	08007b00 	.word	0x08007b00

080042c0 <usb_lld_set_address>:
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 80042c0:	6d02      	ldr	r2, [r0, #80]	; 0x50

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 80042c2:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 80042c6:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80042ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042ce:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80042d2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 80042d6:	4770      	bx	lr
	...

080042e0 <usb_lld_init_endpoint>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 80042e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e4:	fa0f f881 	sxth.w	r8, r1
 80042e8:	eb00 0788 	add.w	r7, r0, r8, lsl #2
 80042ec:	460d      	mov	r5, r1
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;

  /* IN and OUT common parameters.*/
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	f002 0203 	and.w	r2, r2, #3
 80042f6:	2a02      	cmp	r2, #2
 80042f8:	d05e      	beq.n	80043b8 <usb_lld_init_endpoint+0xd8>
 80042fa:	2a03      	cmp	r2, #3
 80042fc:	d05e      	beq.n	80043bc <usb_lld_init_endpoint+0xdc>
  case USB_EP_MODE_TYPE_CTRL:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 80042fe:	4e4c      	ldr	r6, [pc, #304]	; (8004430 <usb_lld_init_endpoint+0x150>)
 8004300:	494c      	ldr	r1, [pc, #304]	; (8004434 <usb_lld_init_endpoint+0x154>)
 8004302:	2a01      	cmp	r2, #1
 8004304:	bf18      	it	ne
 8004306:	460e      	movne	r6, r1
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;
 8004308:	6d04      	ldr	r4, [r0, #80]	; 0x50
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
  if (usbp->epc[ep]->out_state != NULL) {
 800430a:	6999      	ldr	r1, [r3, #24]
  default:
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
 800430c:	016a      	lsls	r2, r5, #5
 800430e:	eb04 0e02 	add.w	lr, r4, r2
 8004312:	f04f 0c00 	mov.w	ip, #0
 8004316:	f8ce cb10 	str.w	ip, [lr, #2832]	; 0xb10
  if (usbp->epc[ep]->out_state != NULL) {
 800431a:	2900      	cmp	r1, #0
 800431c:	d073      	beq.n	8004406 <usb_lld_init_endpoint+0x126>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 800431e:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8004322:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8004326:	0149      	lsls	r1, r1, #5
 8004328:	ea4e 0e06 	orr.w	lr, lr, r6
 800432c:	f844 e001 	str.w	lr, [r4, r1]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8004330:	f105 0c10 	add.w	ip, r5, #16
 8004334:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 8004338:	f04f 0e01 	mov.w	lr, #1
 800433c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004340:	ea4e 0101 	orr.w	r1, lr, r1
 8004344:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 8004348:	4422      	add	r2, r4
  if (usbp->epc[ep]->in_state != NULL) {
 800434a:	6959      	ldr	r1, [r3, #20]
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 800434c:	f04f 0e00 	mov.w	lr, #0
 8004350:	f8c2 e910 	str.w	lr, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
 8004354:	2900      	cmp	r1, #0
 8004356:	d033      	beq.n	80043c0 <usb_lld_init_endpoint+0xe0>
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
 8004358:	8b99      	ldrh	r1, [r3, #28]

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800435a:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 800435c:	2901      	cmp	r1, #1

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800435e:	ea4f 0392 	mov.w	r3, r2, lsr #2
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8004362:	6d82      	ldr	r2, [r0, #88]	; 0x58
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
 8004364:	bf88      	it	hi
 8004366:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8004368:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800436c:	eb03 0e02 	add.w	lr, r3, r2
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8004370:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004374:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004378:	01aa      	lsls	r2, r5, #6
 800437a:	f042 0220 	orr.w	r2, r2, #32
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800437e:	f8c0 e058 	str.w	lr, [r0, #88]	; 0x58
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8004382:	604b      	str	r3, [r1, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004384:	6122      	str	r2, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	069a      	lsls	r2, r3, #26
 800438a:	d4fc      	bmi.n	8004386 <usb_lld_init_endpoint+0xa6>
 800438c:	2012      	movs	r0, #18
 800438e:	f7fc fe37 	bl	8001000 <chSysPolledDelayX>
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8004392:	68fb      	ldr	r3, [r7, #12]
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
 8004394:	8a1a      	ldrh	r2, [r3, #16]
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 8004396:	f105 0348 	add.w	r3, r5, #72	; 0x48
                           DIEPCTL_TXFNUM(ep) |
 800439a:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 800439e:	015b      	lsls	r3, r3, #5
                           DIEPCTL_TXFNUM(ep) |
 80043a0:	4332      	orrs	r2, r6
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 80043a2:	50e2      	str	r2, [r4, r3]
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 80043a4:	2101      	movs	r1, #1
 80043a6:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 80043aa:	fa01 f505 	lsl.w	r5, r1, r5
 80043ae:	431d      	orrs	r5, r3
 80043b0:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
 80043b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    break;
  case USB_EP_MODE_TYPE_ISOC:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_ISO;
    break;
  case USB_EP_MODE_TYPE_BULK:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 80043b8:	4e1f      	ldr	r6, [pc, #124]	; (8004438 <usb_lld_init_endpoint+0x158>)
    break;
 80043ba:	e7a5      	b.n	8004308 <usb_lld_init_endpoint+0x28>
  case USB_EP_MODE_TYPE_INTR:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 80043bc:	4e1f      	ldr	r6, [pc, #124]	; (800443c <usb_lld_init_endpoint+0x15c>)
    break;
 80043be:	e7a3      	b.n	8004308 <usb_lld_init_endpoint+0x28>
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 80043c0:	f105 023f 	add.w	r2, r5, #63	; 0x3f
 80043c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80043c8:	01ab      	lsls	r3, r5, #6
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 80043ca:	491d      	ldr	r1, [pc, #116]	; (8004440 <usb_lld_init_endpoint+0x160>)
 80043cc:	6051      	str	r1, [r2, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80043ce:	f043 0320 	orr.w	r3, r3, #32
 80043d2:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80043d4:	6923      	ldr	r3, [r4, #16]
 80043d6:	069b      	lsls	r3, r3, #26
 80043d8:	d4fc      	bmi.n	80043d4 <usb_lld_init_endpoint+0xf4>
 80043da:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 80043de:	2012      	movs	r0, #18
 80043e0:	f7fc fe0e 	bl	8001000 <chSysPolledDelayX>
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
    otg_txfifo_flush(usbp, ep);
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 80043e4:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
 80043e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043ec:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 80043f0:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
 80043f4:	2201      	movs	r2, #1
 80043f6:	fa02 f505 	lsl.w	r5, r2, r5
 80043fa:	ea23 0305 	bic.w	r3, r3, r5
 80043fe:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
 8004402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004406:	eb04 1148 	add.w	r1, r4, r8, lsl #5
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 800440a:	f105 0910 	add.w	r9, r5, #16
  if (usbp->epc[ep]->out_state != NULL) {
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 800440e:	f8d1 cb00 	ldr.w	ip, [r1, #2816]	; 0xb00
 8004412:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8004416:	f8c1 cb00 	str.w	ip, [r1, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 800441a:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 800441e:	f04f 0e01 	mov.w	lr, #1
 8004422:	fa0e fe09 	lsl.w	lr, lr, r9
 8004426:	ea21 010e 	bic.w	r1, r1, lr
 800442a:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
 800442e:	e78b      	b.n	8004348 <usb_lld_init_endpoint+0x68>
 8004430:	10048000 	.word	0x10048000
 8004434:	10008000 	.word	0x10008000
 8004438:	10088000 	.word	0x10088000
 800443c:	100c8000 	.word	0x100c8000
 8004440:	02000400 	.word	0x02000400
	...

08004450 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 8004450:	3158      	adds	r1, #88	; 0x58
 8004452:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004454:	0149      	lsls	r1, r1, #5
 8004456:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8004458:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800445c:	d004      	beq.n	8004468 <usb_lld_get_status_out+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DOEPCTL_STALL)
 800445e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 8004462:	bf14      	ite	ne
 8004464:	2001      	movne	r0, #1
 8004466:	2002      	moveq	r0, #2
}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	0000      	movs	r0, r0
	...

08004470 <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 8004470:	3148      	adds	r1, #72	; 0x48
 8004472:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004474:	0149      	lsls	r1, r1, #5
 8004476:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 8004478:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800447c:	d004      	beq.n	8004488 <usb_lld_get_status_in+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DIEPCTL_STALL)
 800447e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 8004482:	bf14      	ite	ne
 8004484:	2001      	movne	r0, #1
 8004486:	2002      	moveq	r0, #2
}
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	0000      	movs	r0, r0
	...

08004490 <usb_lld_read_setup>:
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8004490:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004494:	68cb      	ldr	r3, [r1, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	6819      	ldr	r1, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	6053      	str	r3, [r2, #4]
 800449e:	6011      	str	r1, [r2, #0]
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
	...

080044b0 <usb_lld_start_out>:
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt, rxsize;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80044b0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 80044b4:	b430      	push	{r4, r5}
  uint32_t pcnt, rxsize;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80044b6:	68dc      	ldr	r4, [r3, #12]
 80044b8:	69a2      	ldr	r2, [r4, #24]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 80044ba:	6813      	ldr	r3, [r2, #0]
 80044bc:	60d3      	str	r3, [r2, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 80044be:	b909      	cbnz	r1, 80044c4 <usb_lld_start_out+0x14>
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d822      	bhi.n	800450a <usb_lld_start_out+0x5a>
 80044c4:	1e5a      	subs	r2, r3, #1
  /* Transaction size is rounded to a multiple of packet size because the
     following requirement in the RM:
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 80044c6:	8a63      	ldrh	r3, [r4, #18]
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80044c8:	6d00      	ldr	r0, [r0, #80]	; 0x50
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80044ca:	6824      	ldr	r4, [r4, #0]
  /* Transaction size is rounded to a multiple of packet size because the
     following requirement in the RM:
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 80044cc:	441a      	add	r2, r3
 80044ce:	fbb2 f2f3 	udiv	r2, r2, r3
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80044d2:	fb02 f303 	mul.w	r3, r2, r3
 80044d6:	3303      	adds	r3, #3
 80044d8:	f023 0303 	bic.w	r3, r3, #3
 80044dc:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 80044e0:	eb00 1541 	add.w	r5, r0, r1, lsl #5
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80044e4:	f004 0203 	and.w	r2, r4, #3
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80044e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80044ec:	2a01      	cmp	r2, #1
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 80044ee:	f8c5 3b10 	str.w	r3, [r5, #2832]	; 0xb10
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80044f2:	d00e      	beq.n	8004512 <usb_lld_start_out+0x62>
 80044f4:	b209      	sxth	r1, r1
 80044f6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
}
 80044fa:	bc30      	pop	{r4, r5}
    else
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 80044fc:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8004500:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004504:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8004508:	4770      	bx	lr
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;
 800450a:	2340      	movs	r3, #64	; 0x40
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	223f      	movs	r2, #63	; 0x3f
 8004510:	e7d9      	b.n	80044c6 <usb_lld_start_out+0x16>
 8004512:	b209      	sxth	r1, r1
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
    /* Odd/even bit toggling for isochronous endpoint.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8004514:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8004518:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 800451c:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 8004520:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8004524:	bf14      	ite	ne
 8004526:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
    else
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 800452a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 800452e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8004532:	e7e0      	b.n	80044f6 <usb_lld_start_out+0x46>
	...

08004540 <otg_epout_handler.constprop.9>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8004540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8004544:	4d24      	ldr	r5, [pc, #144]	; (80045d8 <otg_epout_handler.constprop.9+0x98>)
 8004546:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8004548:	eb07 1340 	add.w	r3, r7, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800454c:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800454e:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 8004552:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8004556:	0720      	lsls	r0, r4, #28
 8004558:	d503      	bpl.n	8004562 <otg_epout_handler.constprop.9+0x22>
 800455a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800455e:	0719      	lsls	r1, r3, #28
 8004560:	d431      	bmi.n	80045c6 <otg_epout_handler.constprop.9+0x86>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);

  }
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8004562:	07e2      	lsls	r2, r4, #31
 8004564:	d51b      	bpl.n	800459e <otg_epout_handler.constprop.9+0x5e>
 8004566:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800456a:	07db      	lsls	r3, r3, #31
 800456c:	d517      	bpl.n	800459e <otg_epout_handler.constprop.9+0x5e>
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800456e:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	6991      	ldr	r1, [r2, #24]

    /* A short packet always terminates a transaction.*/
    if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8004576:	8a50      	ldrh	r0, [r2, #18]
 8004578:	684c      	ldr	r4, [r1, #4]
 800457a:	fbb4 f3f0 	udiv	r3, r4, r0
 800457e:	fb00 4413 	mls	r4, r0, r3, r4
 8004582:	b174      	cbz	r4, 80045a2 <otg_epout_handler.constprop.9+0x62>
      usb_lld_start_out(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 8004584:	8969      	ldrh	r1, [r5, #10]
 8004586:	68d2      	ldr	r2, [r2, #12]
 8004588:	2301      	movs	r3, #1
 800458a:	40b3      	lsls	r3, r6
 800458c:	ea21 0303 	bic.w	r3, r1, r3
 8004590:	816b      	strh	r3, [r5, #10]
 8004592:	b122      	cbz	r2, 800459e <otg_epout_handler.constprop.9+0x5e>
 8004594:	4631      	mov	r1, r6
 8004596:	4810      	ldr	r0, [pc, #64]	; (80045d8 <otg_epout_handler.constprop.9+0x98>)
    }
  }
}
 8004598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      usb_lld_start_out(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800459c:	4710      	bx	r2
 800459e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;

    /* A short packet always terminates a transaction.*/
    if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
        (osp->rxsize < osp->totsize)) {
 80045a2:	6808      	ldr	r0, [r1, #0]
 80045a4:	68cb      	ldr	r3, [r1, #12]
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;

    /* A short packet always terminates a transaction.*/
    if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 80045a6:	4298      	cmp	r0, r3
 80045a8:	d2ec      	bcs.n	8004584 <otg_epout_handler.constprop.9+0x44>
        (osp->rxsize < osp->totsize)) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 80045aa:	1a1b      	subs	r3, r3, r0
      osp->rxcnt  = 0;
 80045ac:	e881 0018 	stmia.w	r1, {r3, r4}
 80045b0:	2320      	movs	r3, #32
 80045b2:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usb_lld_start_out(usbp, ep);
 80045b6:	4808      	ldr	r0, [pc, #32]	; (80045d8 <otg_epout_handler.constprop.9+0x98>)
 80045b8:	4631      	mov	r1, r6
 80045ba:	f7ff ff79 	bl	80044b0 <usb_lld_start_out>
 80045be:	f384 8811 	msr	BASEPRI, r4
 80045c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  otgp->oe[ep].DOEPINT = epint;

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 80045c6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 80045ca:	4631      	mov	r1, r6
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	4628      	mov	r0, r5
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4798      	blx	r3
 80045d4:	e7c5      	b.n	8004562 <otg_epout_handler.constprop.9+0x22>
 80045d6:	bf00      	nop
 80045d8:	20001050 	.word	0x20001050
 80045dc:	00000000 	.word	0x00000000

080045e0 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80045e0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 80045e4:	b4f0      	push	{r4, r5, r6, r7}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80045e6:	68dc      	ldr	r4, [r3, #12]
 80045e8:	6965      	ldr	r5, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 80045ea:	682b      	ldr	r3, [r5, #0]
 80045ec:	60eb      	str	r3, [r5, #12]
  if (isp->txsize == 0) {
 80045ee:	b9f3      	cbnz	r3, 800462e <usb_lld_start_in+0x4e>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 80045f0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80045f2:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80045f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80045fa:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	2b01      	cmp	r3, #1
 8004606:	d026      	beq.n	8004656 <usb_lld_start_in+0x76>
 8004608:	b20b      	sxth	r3, r1
 800460a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800460e:	2201      	movs	r2, #1
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8004610:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8004614:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8004618:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800461c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8004620:	fa02 f101 	lsl.w	r1, r2, r1
 8004624:	4319      	orrs	r1, r3
 8004626:	f8c0 1834 	str.w	r1, [r0, #2100]	; 0x834
}
 800462a:	bcf0      	pop	{r4, r5, r6, r7}
 800462c:	4770      	bx	lr
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 800462e:	b319      	cbz	r1, 8004678 <usb_lld_start_in+0x98>
 8004630:	1e5d      	subs	r5, r3, #1
 8004632:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    /* TODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8004636:	6d00      	ldr	r0, [r0, #80]	; 0x50
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8004638:	8a26      	ldrh	r6, [r4, #16]
                    usbp->epc[ep]->in_maxsize;
    /* TODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 800463a:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 800463e:	1973      	adds	r3, r6, r5
 8004640:	fbb3 f3f6 	udiv	r3, r3, r6
 8004644:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 8004648:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d1d8      	bne.n	8004608 <usb_lld_start_in+0x28>
    /* Odd/even bit toggling.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8004656:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800465a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800465e:	b20b      	sxth	r3, r1
 8004660:	eb00 1443 	add.w	r4, r0, r3, lsl #5
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8004664:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
 8004668:	bf14      	ite	ne
 800466a:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 800466e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8004672:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
 8004676:	e7c8      	b.n	800460a <usb_lld_start_in+0x2a>
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8004678:	2b40      	cmp	r3, #64	; 0x40
 800467a:	d9d9      	bls.n	8004630 <usb_lld_start_in+0x50>
      isp->txsize = EP0_MAX_INSIZE;
 800467c:	2340      	movs	r3, #64	; 0x40
 800467e:	602b      	str	r3, [r5, #0]
 8004680:	4a01      	ldr	r2, [pc, #4]	; (8004688 <usb_lld_start_in+0xa8>)
 8004682:	253f      	movs	r5, #63	; 0x3f
 8004684:	e7d7      	b.n	8004636 <usb_lld_start_in+0x56>
 8004686:	bf00      	nop
 8004688:	20000040 	.word	0x20000040
 800468c:	00000000 	.word	0x00000000

08004690 <otg_epin_handler.constprop.10>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8004690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8004694:	4e29      	ldr	r6, [pc, #164]	; (800473c <otg_epin_handler.constprop.10+0xac>)
 8004696:	6d35      	ldr	r5, [r6, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8004698:	eb05 1340 	add.w	r3, r5, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800469c:	4607      	mov	r7, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800469e:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908

  otgp->ie[ep].DIEPINT = epint;
 80046a2:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 80046a6:	07e1      	lsls	r1, r4, #31
 80046a8:	d503      	bpl.n	80046b2 <otg_epin_handler.constprop.10+0x22>
 80046aa:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 80046ae:	07da      	lsls	r2, r3, #31
 80046b0:	d409      	bmi.n	80046c6 <otg_epin_handler.constprop.10+0x36>
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 80046b2:	0623      	lsls	r3, r4, #24
 80046b4:	d505      	bpl.n	80046c2 <otg_epin_handler.constprop.10+0x32>
 80046b6:	2101      	movs	r1, #1
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 80046b8:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 80046bc:	40b9      	lsls	r1, r7
 80046be:	4219      	tst	r1, r3
 80046c0:	d118      	bne.n	80046f4 <otg_epin_handler.constprop.10+0x64>
 80046c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80046c6:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 80046ca:	68d9      	ldr	r1, [r3, #12]
 80046cc:	694b      	ldr	r3, [r1, #20]

    if (isp->txsize < isp->totsize) {
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	4290      	cmp	r0, r2
 80046d4:	d323      	bcc.n	800471e <otg_epin_handler.constprop.10+0x8e>
      usb_lld_start_in(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 80046d6:	8932      	ldrh	r2, [r6, #8]
 80046d8:	f8d1 8008 	ldr.w	r8, [r1, #8]
 80046dc:	2301      	movs	r3, #1
 80046de:	40bb      	lsls	r3, r7
 80046e0:	ea22 0303 	bic.w	r3, r2, r3
 80046e4:	8133      	strh	r3, [r6, #8]
 80046e6:	f1b8 0f00 	cmp.w	r8, #0
 80046ea:	d0e2      	beq.n	80046b2 <otg_epin_handler.constprop.10+0x22>
 80046ec:	4639      	mov	r1, r7
 80046ee:	4630      	mov	r0, r6
 80046f0:	47c0      	blx	r8
 80046f2:	e7de      	b.n	80046b2 <otg_epin_handler.constprop.10+0x22>
 80046f4:	2320      	movs	r3, #32
 80046f6:	f383 8811 	msr	BASEPRI, r3
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
    otgp->DIEPEMPMSK &= ~(1 << ep);
 80046fa:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 80046fe:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8004700:	480f      	ldr	r0, [pc, #60]	; (8004740 <otg_epin_handler.constprop.10+0xb0>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8004702:	ea22 0201 	bic.w	r2, r2, r1
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 8004706:	430b      	orrs	r3, r1
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8004708:	f8c5 2834 	str.w	r2, [r5, #2100]	; 0x834
 800470c:	2100      	movs	r1, #0
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800470e:	65f3      	str	r3, [r6, #92]	; 0x5c
 8004710:	f7fc fefe 	bl	8001510 <chThdResumeI>
 8004714:	2300      	movs	r3, #0
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if (isp->txsize < isp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 800471e:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 8004720:	f04f 0800 	mov.w	r8, #0
 8004724:	e883 0104 	stmia.w	r3, {r2, r8}
 8004728:	2320      	movs	r3, #32
 800472a:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usb_lld_start_in(usbp, ep);
 800472e:	4639      	mov	r1, r7
 8004730:	4630      	mov	r0, r6
 8004732:	f7ff ff55 	bl	80045e0 <usb_lld_start_in>
 8004736:	f388 8811 	msr	BASEPRI, r8
 800473a:	e7ba      	b.n	80046b2 <otg_epin_handler.constprop.10+0x22>
 800473c:	20001050 	.word	0x20001050
 8004740:	200010b0 	.word	0x200010b0
	...

08004750 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8004750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 8004754:	4e95      	ldr	r6, [pc, #596]	; (80049ac <Vector14C+0x25c>)
 8004756:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 8004758:	697d      	ldr	r5, [r7, #20]
  sts &= otgp->GINTMSK;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	401d      	ands	r5, r3
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 800475e:	f415 5980 	ands.w	r9, r5, #4096	; 0x1000
  stm32_otg_t *otgp = usbp->otg;
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;
 8004762:	617d      	str	r5, [r7, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 8004764:	f040 80c8 	bne.w	80048f8 <Vector14C+0x1a8>
    /* Preventing execution of more handlers, the core has been reset.*/
    return;
  }

  /* Wake-up handling.*/
  if (sts & GINTSTS_WKUPINT) {
 8004768:	2d00      	cmp	r5, #0
 800476a:	db55      	blt.n	8004818 <Vector14C+0xc8>

    _usb_wakeup(usbp);
  }

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {
 800476c:	052b      	lsls	r3, r5, #20
 800476e:	d44d      	bmi.n	800480c <Vector14C+0xbc>
    /* Default suspend action.*/
    _usb_suspend(usbp);
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 8004770:	04ac      	lsls	r4, r5, #18
 8004772:	d50c      	bpl.n	800478e <Vector14C+0x3e>
    /* Full or High speed timing selection.*/
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8004774:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004778:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8004782:	bf0c      	ite	eq
 8004784:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
                      GUSBCFG_TRDT(TRDT_VALUE_HS);
    }
    else {
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8004788:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 800478c:	60fb      	str	r3, [r7, #12]
                      GUSBCFG_TRDT(TRDT_VALUE_FS);
    }
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 800478e:	0728      	lsls	r0, r5, #28
 8004790:	d504      	bpl.n	800479c <Vector14C+0x4c>
    _usb_isr_invoke_sof_cb(usbp);
 8004792:	6873      	ldr	r3, [r6, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	b10b      	cbz	r3, 800479c <Vector14C+0x4c>
 8004798:	4884      	ldr	r0, [pc, #528]	; (80049ac <Vector14C+0x25c>)
 800479a:	4798      	blx	r3
  }

  /* Isochronous IN failed handling */
  if (sts & GINTSTS_IISOIXFR) {
 800479c:	02ea      	lsls	r2, r5, #11
 800479e:	d44f      	bmi.n	8004840 <Vector14C+0xf0>
    otg_isoc_in_failed_handler(usbp);
  }

  /* Isochronous OUT failed handling */
  if (sts & GINTSTS_IISOOXFR) {
 80047a0:	02aa      	lsls	r2, r5, #10
 80047a2:	f100 80b9 	bmi.w	8004918 <Vector14C+0x1c8>
    otg_isoc_out_failed_handler(usbp);
  }

  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
 80047a6:	06eb      	lsls	r3, r5, #27
 80047a8:	d421      	bmi.n	80047ee <Vector14C+0x9e>
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
 80047aa:	036e      	lsls	r6, r5, #13
    osalThreadResumeI(&usbp->wait, MSG_OK);
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 80047ac:	f8d7 4818 	ldr.w	r4, [r7, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 80047b0:	d50b      	bpl.n	80047ca <Vector14C+0x7a>
    if (src & (1 << 0))
 80047b2:	07e0      	lsls	r0, r4, #31
 80047b4:	f100 80f5 	bmi.w	80049a2 <Vector14C+0x252>
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
 80047b8:	07a1      	lsls	r1, r4, #30
 80047ba:	f100 80ee 	bmi.w	800499a <Vector14C+0x24a>
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
 80047be:	0762      	lsls	r2, r4, #29
 80047c0:	f100 80e7 	bmi.w	8004992 <Vector14C+0x242>
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
 80047c4:	0723      	lsls	r3, r4, #28
 80047c6:	f100 80d1 	bmi.w	800496c <Vector14C+0x21c>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 80047ca:	032f      	lsls	r7, r5, #12
 80047cc:	d50b      	bpl.n	80047e6 <Vector14C+0x96>
    if (src & (1 << 16))
 80047ce:	03e6      	lsls	r6, r4, #15
 80047d0:	f100 80db 	bmi.w	800498a <Vector14C+0x23a>
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
 80047d4:	03a5      	lsls	r5, r4, #14
 80047d6:	f100 80d4 	bmi.w	8004982 <Vector14C+0x232>
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
 80047da:	0360      	lsls	r0, r4, #13
 80047dc:	f100 80cd 	bmi.w	800497a <Vector14C+0x22a>
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
 80047e0:	0321      	lsls	r1, r4, #12
 80047e2:	f100 8092 	bmi.w	800490a <Vector14C+0x1ba>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 80047e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 80047ea:	f7fd b889 	b.w	8001900 <_port_irq_epilogue>
 80047ee:	2320      	movs	r3, #32
 80047f0:	f383 8811 	msr	BASEPRI, r3
  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
    /* The interrupt is masked while the thread has control or it would
       be triggered again.*/
    osalSysLockFromISR();
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	486e      	ldr	r0, [pc, #440]	; (80049b0 <Vector14C+0x260>)
 80047f8:	f023 0310 	bic.w	r3, r3, #16
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	2100      	movs	r1, #0
 8004800:	f7fc fe86 	bl	8001510 <chThdResumeI>
 8004804:	2300      	movs	r3, #0
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	e7ce      	b.n	80047aa <Vector14C+0x5a>

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 800480c:	2300      	movs	r3, #0

    /* Default suspend action.*/
    _usb_suspend(usbp);
 800480e:	4867      	ldr	r0, [pc, #412]	; (80049ac <Vector14C+0x25c>)

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 8004810:	65f3      	str	r3, [r6, #92]	; 0x5c

    /* Default suspend action.*/
    _usb_suspend(usbp);
 8004812:	f7fd ff45 	bl	80026a0 <_usb_suspend>
 8004816:	e7ab      	b.n	8004770 <Vector14C+0x20>

  /* Wake-up handling.*/
  if (sts & GINTSTS_WKUPINT) {
    /* If clocks are gated off, turn them back on (may be the case if
       coming out of suspend mode).*/
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8004818:	f8d7 3e00 	ldr.w	r3, [r7, #3584]	; 0xe00
 800481c:	079a      	lsls	r2, r3, #30
 800481e:	d005      	beq.n	800482c <Vector14C+0xdc>
      /* Set to zero to un-gate the USB core clocks.*/
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 8004820:	f8d7 3e00 	ldr.w	r3, [r7, #3584]	; 0xe00
 8004824:	f023 0303 	bic.w	r3, r3, #3
 8004828:	f8c7 3e00 	str.w	r3, [r7, #3584]	; 0xe00
    }

    /* Clear the Remote Wake-up Signaling.*/
    otgp->DCTL |= DCTL_RWUSIG;
 800482c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804

    _usb_wakeup(usbp);
 8004830:	485e      	ldr	r0, [pc, #376]	; (80049ac <Vector14C+0x25c>)
      /* Set to zero to un-gate the USB core clocks.*/
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
    }

    /* Clear the Remote Wake-up Signaling.*/
    otgp->DCTL |= DCTL_RWUSIG;
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804

    _usb_wakeup(usbp);
 800483a:	f7fd ff39 	bl	80026b0 <_usb_wakeup>
 800483e:	e795      	b.n	800476c <Vector14C+0x1c>
 *
 * @notapi
 */
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 8004840:	f8d6 8050 	ldr.w	r8, [r6, #80]	; 0x50
 8004844:	2400      	movs	r4, #0
 8004846:	e007      	b.n	8004858 <Vector14C+0x108>

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8004848:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800484a:	4a58      	ldr	r2, [pc, #352]	; (80049ac <Vector14C+0x25c>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	3401      	adds	r4, #1
 8004850:	b2e4      	uxtb	r4, r4
 8004852:	429c      	cmp	r4, r3
 8004854:	46a1      	mov	r9, r4
 8004856:	d849      	bhi.n	80048ec <Vector14C+0x19c>
 8004858:	eb08 1244 	add.w	r2, r8, r4, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 800485c:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8004860:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004864:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004868:	d1ee      	bne.n	8004848 <Vector14C+0xf8>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 800486a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 800486e:	2b00      	cmp	r3, #0
 8004870:	daea      	bge.n	8004848 <Vector14C+0xf8>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
      /* Endpoint enabled -> ISOC IN transfer failed */
      /* Disable endpoint */
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8004872:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8004876:	f043 4390 	orr.w	r3, r3, #1207959552	; 0x48000000
 800487a:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 800487e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8004882:	2b00      	cmp	r3, #0
 8004884:	dbfb      	blt.n	800487e <Vector14C+0x12e>
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004886:	ea4f 1989 	mov.w	r9, r9, lsl #6
 800488a:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800488c:	f049 0320 	orr.w	r3, r9, #32
 8004890:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8004892:	6913      	ldr	r3, [r2, #16]
 8004894:	0699      	lsls	r1, r3, #26
 8004896:	d4fc      	bmi.n	8004892 <Vector14C+0x142>
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 8004898:	2012      	movs	r0, #18
 800489a:	f7fc fbb1 	bl	8001000 <chSysPolledDelayX>

      /* Flush FIFO */
      otg_txfifo_flush(usbp, ep);

      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);
 800489e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80048a2:	f04f 0901 	mov.w	r9, #1
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	8933      	ldrh	r3, [r6, #8]
 80048aa:	6892      	ldr	r2, [r2, #8]
 80048ac:	fa09 f904 	lsl.w	r9, r9, r4
 80048b0:	ea6f 0a09 	mvn.w	sl, r9
 80048b4:	ea0a 0303 	and.w	r3, sl, r3
 80048b8:	8133      	strh	r3, [r6, #8]
 80048ba:	b112      	cbz	r2, 80048c2 <Vector14C+0x172>
 80048bc:	4621      	mov	r1, r4
 80048be:	483b      	ldr	r0, [pc, #236]	; (80049ac <Vector14C+0x25c>)
 80048c0:	4790      	blx	r2
 80048c2:	2320      	movs	r3, #32
 80048c4:	f383 8811 	msr	BASEPRI, r3

      /* Pump out data for next frame */
      osalSysLockFromISR();
      otgp->DIEPEMPMSK &= ~(1 << ep);
 80048c8:	f8d8 2834 	ldr.w	r2, [r8, #2100]	; 0x834
      usbp->txpending |= (1 << ep);
 80048cc:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 80048ce:	4838      	ldr	r0, [pc, #224]	; (80049b0 <Vector14C+0x260>)
      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);

      /* Pump out data for next frame */
      osalSysLockFromISR();
      otgp->DIEPEMPMSK &= ~(1 << ep);
 80048d0:	ea0a 0202 	and.w	r2, sl, r2
      usbp->txpending |= (1 << ep);
 80048d4:	ea43 0309 	orr.w	r3, r3, r9
      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);

      /* Pump out data for next frame */
      osalSysLockFromISR();
      otgp->DIEPEMPMSK &= ~(1 << ep);
 80048d8:	f8c8 2834 	str.w	r2, [r8, #2100]	; 0x834
 80048dc:	2100      	movs	r1, #0
      usbp->txpending |= (1 << ep);
 80048de:	65f3      	str	r3, [r6, #92]	; 0x5c
 80048e0:	f7fc fe16 	bl	8001510 <chThdResumeI>
 80048e4:	2300      	movs	r3, #0
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	e7ad      	b.n	8004848 <Vector14C+0xf8>
  if (sts & GINTSTS_IISOIXFR) {
    otg_isoc_in_failed_handler(usbp);
  }

  /* Isochronous OUT failed handling */
  if (sts & GINTSTS_IISOOXFR) {
 80048ec:	02ab      	lsls	r3, r5, #10
 80048ee:	f57f af5a 	bpl.w	80047a6 <Vector14C+0x56>
 *
 * @notapi
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 80048f2:	f8d2 8050 	ldr.w	r8, [r2, #80]	; 0x50
 80048f6:	e011      	b.n	800491c <Vector14C+0x1cc>

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 80048f8:	2300      	movs	r3, #0

    /* Default reset action.*/
    _usb_reset(usbp);
 80048fa:	4630      	mov	r0, r6

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 80048fc:	65f3      	str	r3, [r6, #92]	; 0x5c

    /* Default reset action.*/
    _usb_reset(usbp);
 80048fe:	f7fd feaf 	bl	8002660 <_usb_reset>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 8004902:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 8004906:	f7fc bffb 	b.w	8001900 <_port_irq_epilogue>
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
      otg_epout_handler(usbp, 3);
 800490a:	2003      	movs	r0, #3
 800490c:	f7ff fe18 	bl	8004540 <otg_epout_handler.constprop.9>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 8004910:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 8004914:	f7fc bff4 	b.w	8001900 <_port_irq_epilogue>
 *
 * @notapi
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 8004918:	f8d6 8050 	ldr.w	r8, [r6, #80]	; 0x50
 *
 * @notapi
 */
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 800491c:	2400      	movs	r4, #0
      /* FIXME: Core stucks here */
      /*otgp->oe[ep].DOEPCTL |= (DOEPCTL_EPDIS | DOEPCTL_SNAK);
      while (otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA)
        ;*/
      /* Prepare transfer for next frame */
      _usb_isr_invoke_out_cb(usbp, ep);
 800491e:	f04f 0901 	mov.w	r9, #1
 8004922:	e006      	b.n	8004932 <Vector14C+0x1e2>
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8004924:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004926:	3401      	adds	r4, #1
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	b2e4      	uxtb	r4, r4
 800492c:	429c      	cmp	r4, r3
 800492e:	f63f af3a 	bhi.w	80047a6 <Vector14C+0x56>
 8004932:	eb08 1244 	add.w	r2, r8, r4, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8004936:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800493a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800493e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004942:	d1ef      	bne.n	8004924 <Vector14C+0x1d4>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 8004944:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8004948:	2b00      	cmp	r3, #0
 800494a:	daeb      	bge.n	8004924 <Vector14C+0x1d4>
      /* FIXME: Core stucks here */
      /*otgp->oe[ep].DOEPCTL |= (DOEPCTL_EPDIS | DOEPCTL_SNAK);
      while (otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA)
        ;*/
      /* Prepare transfer for next frame */
      _usb_isr_invoke_out_cb(usbp, ep);
 800494c:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 8004950:	8973      	ldrh	r3, [r6, #10]
 8004952:	68d2      	ldr	r2, [r2, #12]
 8004954:	4815      	ldr	r0, [pc, #84]	; (80049ac <Vector14C+0x25c>)
 8004956:	68d2      	ldr	r2, [r2, #12]
 8004958:	fa09 f104 	lsl.w	r1, r9, r4
 800495c:	ea23 0301 	bic.w	r3, r3, r1
 8004960:	8173      	strh	r3, [r6, #10]
 8004962:	4621      	mov	r1, r4
 8004964:	2a00      	cmp	r2, #0
 8004966:	d0dd      	beq.n	8004924 <Vector14C+0x1d4>
 8004968:	4790      	blx	r2
 800496a:	e7db      	b.n	8004924 <Vector14C+0x1d4>
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
      otg_epin_handler(usbp, 3);
 800496c:	2003      	movs	r0, #3
 800496e:	f7ff fe8f 	bl	8004690 <otg_epin_handler.constprop.10>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 8004972:	032f      	lsls	r7, r5, #12
 8004974:	f57f af37 	bpl.w	80047e6 <Vector14C+0x96>
 8004978:	e729      	b.n	80047ce <Vector14C+0x7e>
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
 800497a:	2002      	movs	r0, #2
 800497c:	f7ff fde0 	bl	8004540 <otg_epout_handler.constprop.9>
 8004980:	e72e      	b.n	80047e0 <Vector14C+0x90>
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
 8004982:	2001      	movs	r0, #1
 8004984:	f7ff fddc 	bl	8004540 <otg_epout_handler.constprop.9>
 8004988:	e727      	b.n	80047da <Vector14C+0x8a>
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
 800498a:	2000      	movs	r0, #0
 800498c:	f7ff fdd8 	bl	8004540 <otg_epout_handler.constprop.9>
 8004990:	e720      	b.n	80047d4 <Vector14C+0x84>
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
      otg_epin_handler(usbp, 2);
 8004992:	2002      	movs	r0, #2
 8004994:	f7ff fe7c 	bl	8004690 <otg_epin_handler.constprop.10>
 8004998:	e714      	b.n	80047c4 <Vector14C+0x74>
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
 800499a:	2001      	movs	r0, #1
 800499c:	f7ff fe78 	bl	8004690 <otg_epin_handler.constprop.10>
 80049a0:	e70d      	b.n	80047be <Vector14C+0x6e>

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
 80049a2:	2000      	movs	r0, #0
 80049a4:	f7ff fe74 	bl	8004690 <otg_epin_handler.constprop.10>
 80049a8:	e706      	b.n	80047b8 <Vector14C+0x68>
 80049aa:	bf00      	nop
 80049ac:	20001050 	.word	0x20001050
 80049b0:	200010b0 	.word	0x200010b0
	...

080049c0 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 80049c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80049c2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80049c6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 80049ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049ce:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 80049d2:	4770      	bx	lr
	...

080049e0 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 80049e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80049e2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 80049e6:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 80049ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049ee:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 80049f2:	4770      	bx	lr
	...

08004a00 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 8004a00:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004a02:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8004a06:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8004a0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a0e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8004a12:	4770      	bx	lr
	...

08004a20 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8004a20:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004a22:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8004a26:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 8004a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a2e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 8004a32:	4770      	bx	lr
	...

08004a40 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004a40:	f011 0f0c 	tst.w	r1, #12
 8004a44:	d100      	bne.n	8004a48 <spi_lld_serve_tx_interrupt+0x8>
 8004a46:	4770      	bx	lr
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8004a48:	4801      	ldr	r0, [pc, #4]	; (8004a50 <spi_lld_serve_tx_interrupt+0x10>)
 8004a4a:	f7fc baa1 	b.w	8000f90 <chSysHalt>
 8004a4e:	bf00      	nop
 8004a50:	08007ad0 	.word	0x08007ad0
	...

08004a60 <spi_lld_serve_rx_interrupt>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004a60:	f011 0f0c 	tst.w	r1, #12
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	4604      	mov	r4, r0

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004a68:	d134      	bne.n	8004ad4 <spi_lld_serve_rx_interrupt+0x74>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004a6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004a6c:	6802      	ldr	r2, [r0, #0]
 8004a6e:	6813      	ldr	r3, [r2, #0]
 8004a70:	f023 031f 	bic.w	r3, r3, #31
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	6813      	ldr	r3, [r2, #0]
 8004a78:	07d9      	lsls	r1, r3, #31
 8004a7a:	d4fc      	bmi.n	8004a76 <spi_lld_serve_rx_interrupt+0x16>
 8004a7c:	7a05      	ldrb	r5, [r0, #8]
  dmaStreamDisable(spip->dmarx);
 8004a7e:	6a21      	ldr	r1, [r4, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004a80:	6840      	ldr	r0, [r0, #4]
  dmaStreamDisable(spip->dmarx);
 8004a82:	680a      	ldr	r2, [r1, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004a84:	233d      	movs	r3, #61	; 0x3d
 8004a86:	40ab      	lsls	r3, r5
 8004a88:	6003      	str	r3, [r0, #0]
  dmaStreamDisable(spip->dmarx);
 8004a8a:	6813      	ldr	r3, [r2, #0]
 8004a8c:	f023 031f 	bic.w	r3, r3, #31
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	6813      	ldr	r3, [r2, #0]
 8004a94:	07db      	lsls	r3, r3, #31
 8004a96:	d4fc      	bmi.n	8004a92 <spi_lld_serve_rx_interrupt+0x32>

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004a98:	6863      	ldr	r3, [r4, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8004a9a:	7a08      	ldrb	r0, [r1, #8]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004a9c:	681a      	ldr	r2, [r3, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8004a9e:	6849      	ldr	r1, [r1, #4]
 8004aa0:	233d      	movs	r3, #61	; 0x3d
 8004aa2:	4083      	lsls	r3, r0
 8004aa4:	600b      	str	r3, [r1, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004aa6:	b192      	cbz	r2, 8004ace <spi_lld_serve_rx_interrupt+0x6e>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	7023      	strb	r3, [r4, #0]
 8004aac:	4620      	mov	r0, r4
 8004aae:	4790      	blx	r2
 8004ab0:	7823      	ldrb	r3, [r4, #0]
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d00b      	beq.n	8004ace <spi_lld_serve_rx_interrupt+0x6e>
 8004ab6:	2320      	movs	r3, #32
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8004abc:	2100      	movs	r1, #0
 8004abe:	f104 0008 	add.w	r0, r4, #8
 8004ac2:	f7fc fd25 	bl	8001510 <chThdResumeI>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	bd38      	pop	{r3, r4, r5, pc}
 8004ace:	2302      	movs	r3, #2
 8004ad0:	7023      	strb	r3, [r4, #0]
 8004ad2:	e7f0      	b.n	8004ab6 <spi_lld_serve_rx_interrupt+0x56>
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8004ad4:	4801      	ldr	r0, [pc, #4]	; (8004adc <spi_lld_serve_rx_interrupt+0x7c>)
 8004ad6:	f7fc fa5b 	bl	8000f90 <chSysHalt>
 8004ada:	e7c6      	b.n	8004a6a <spi_lld_serve_rx_interrupt+0xa>
 8004adc:	08007ad0 	.word	0x08007ad0

08004ae0 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 8004ae0:	b510      	push	{r4, lr}

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8004ae2:	4c0a      	ldr	r4, [pc, #40]	; (8004b0c <spi_lld_init+0x2c>)
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <spi_lld_init+0x30>)
 8004ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8004aea:	4620      	mov	r0, r4
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8004aec:	801a      	strh	r2, [r3, #0]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8004aee:	f7fd fcbf 	bl	8002470 <spiObjectInit>
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8004af2:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <spi_lld_init+0x34>)

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8004af4:	4808      	ldr	r0, [pc, #32]	; (8004b18 <spi_lld_init+0x38>)
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8004af6:	4909      	ldr	r1, [pc, #36]	; (8004b1c <spi_lld_init+0x3c>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <spi_lld_init+0x40>)

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8004afa:	61e0      	str	r0, [r4, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8004afc:	f103 0024 	add.w	r0, r3, #36	; 0x24
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8004b00:	6223      	str	r3, [r4, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8004b02:	6260      	str	r0, [r4, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8004b04:	62a1      	str	r1, [r4, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8004b06:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004b08:	bd10      	pop	{r4, pc}
 8004b0a:	bf00      	nop
 8004b0c:	200012ec 	.word	0x200012ec
 8004b10:	200012e8 	.word	0x200012e8
 8004b14:	08007a70 	.word	0x08007a70
 8004b18:	40013000 	.word	0x40013000
 8004b1c:	06010016 	.word	0x06010016
 8004b20:	06010046 	.word	0x06010046
	...

08004b30 <spi_lld_start>:
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8004b30:	7803      	ldrb	r3, [r0, #0]
 8004b32:	2b01      	cmp	r3, #1
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8004b34:	b510      	push	{r4, lr}
 8004b36:	4604      	mov	r4, r0

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8004b38:	d01d      	beq.n	8004b76 <spi_lld_start+0x46>
 8004b3a:	69c3      	ldr	r3, [r0, #28]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004b3c:	6862      	ldr	r2, [r4, #4]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004b3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004b40:	8952      	ldrh	r2, [r2, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004b42:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004b44:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004b48:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004b4c:	f412 6f00 	tst.w	r2, #2048	; 0x800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004b50:	bf1c      	itt	ne
 8004b52:	f440 5020 	orrne.w	r0, r0, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004b56:	f441 5120 	orrne.w	r1, r1, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004b5a:	62a0      	str	r0, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004b5c:	62e1      	str	r1, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8004b5e:	f442 7241 	orr.w	r2, r2, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8004b62:	2000      	movs	r0, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8004b64:	2107      	movs	r1, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8004b66:	6018      	str	r0, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8004b68:	601a      	str	r2, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8004b6a:	6059      	str	r1, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	bd10      	pop	{r4, pc}
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
 8004b76:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <spi_lld_start+0x84>)
 8004b78:	4298      	cmp	r0, r3
 8004b7a:	d009      	beq.n	8004b90 <spi_lld_start+0x60>
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004b7c:	6a21      	ldr	r1, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004b7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004b80:	69e3      	ldr	r3, [r4, #28]
 8004b82:	6808      	ldr	r0, [r1, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004b84:	6811      	ldr	r1, [r2, #0]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004b86:	f103 020c 	add.w	r2, r3, #12
 8004b8a:	6082      	str	r2, [r0, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004b8c:	608a      	str	r2, [r1, #8]
 8004b8e:	e7d5      	b.n	8004b3c <spi_lld_start+0xc>
  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8004b90:	4603      	mov	r3, r0
 8004b92:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <spi_lld_start+0x88>)
 8004b94:	6a00      	ldr	r0, [r0, #32]
 8004b96:	210a      	movs	r1, #10
 8004b98:	f7fe fa5a 	bl	8003050 <dmaStreamAllocate>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	4a07      	ldr	r2, [pc, #28]	; (8004bbc <spi_lld_start+0x8c>)
 8004ba0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ba2:	210a      	movs	r1, #10
 8004ba4:	f7fe fa54 	bl	8003050 <dmaStreamAllocate>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8004ba8:	4a05      	ldr	r2, [pc, #20]	; (8004bc0 <spi_lld_start+0x90>)
 8004baa:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8004bb2:	e7e3      	b.n	8004b7c <spi_lld_start+0x4c>
 8004bb4:	200012ec 	.word	0x200012ec
 8004bb8:	08004a61 	.word	0x08004a61
 8004bbc:	08004a41 	.word	0x08004a41
 8004bc0:	40023800 	.word	0x40023800
	...

08004bd0 <spi_lld_select>:
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8004bd0:	6842      	ldr	r2, [r0, #4]
 8004bd2:	8911      	ldrh	r1, [r2, #8]
 8004bd4:	6852      	ldr	r2, [r2, #4]
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	408b      	lsls	r3, r1
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	8353      	strh	r3, [r2, #26]
 8004bde:	4770      	bx	lr

08004be0 <spi_lld_unselect>:
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8004be0:	6842      	ldr	r2, [r0, #4]
 8004be2:	8911      	ldrh	r1, [r2, #8]
 8004be4:	6852      	ldr	r2, [r2, #4]
 8004be6:	2301      	movs	r3, #1
 8004be8:	408b      	lsls	r3, r1
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	8313      	strh	r3, [r2, #24]
 8004bee:	4770      	bx	lr

08004bf0 <spi_lld_exchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {
 8004bf0:	b4f0      	push	{r4, r5, r6, r7}

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004bf2:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004bf4:	6a47      	ldr	r7, [r0, #36]	; 0x24
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8004bf6:	6a86      	ldr	r6, [r0, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004bf8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004bfa:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004bfc:	6838      	ldr	r0, [r7, #0]
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004bfe:	60e3      	str	r3, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8004c00:	f446 6680 	orr.w	r6, r6, #1024	; 0x400

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004c04:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8004c08:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8004c0a:	6026      	str	r6, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004c0c:	60c2      	str	r2, [r0, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8004c0e:	6041      	str	r1, [r0, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004c10:	6005      	str	r5, [r0, #0]

  dmaStreamEnable(spip->dmarx);
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	6023      	str	r3, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 8004c1a:	6803      	ldr	r3, [r0, #0]
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	6003      	str	r3, [r0, #0]
}
 8004c22:	bcf0      	pop	{r4, r5, r6, r7}
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
	...

08004c30 <spi_lld_send>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {
 8004c30:	b470      	push	{r4, r5, r6}

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004c32:	6a43      	ldr	r3, [r0, #36]	; 0x24
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8004c34:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004c36:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8004c38:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004c3a:	681b      	ldr	r3, [r3, #0]
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8004c3c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8004c3e:	4e09      	ldr	r6, [pc, #36]	; (8004c64 <spi_lld_send+0x34>)
 8004c40:	60e6      	str	r6, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004c42:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8004c46:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8004c48:	6020      	str	r0, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004c4a:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8004c4c:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004c4e:	601d      	str	r5, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8004c50:	6822      	ldr	r2, [r4, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	6022      	str	r2, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
}
 8004c60:	bc70      	pop	{r4, r5, r6}
 8004c62:	4770      	bx	lr
 8004c64:	2000131c 	.word	0x2000131c
	...

08004c70 <spi_lld_receive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {
 8004c70:	b470      	push	{r4, r5, r6}

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8004c72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004c74:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8004c76:	6a85      	ldr	r5, [r0, #40]	; 0x28
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004c78:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8004c7a:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8004c7c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8004c7e:	4e09      	ldr	r6, [pc, #36]	; (8004ca4 <spi_lld_receive+0x34>)
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004c80:	60e2      	str	r2, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8004c82:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8004c86:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8004c88:	6025      	str	r5, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8004c8a:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8004c8c:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8004c8e:	6018      	str	r0, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8004c90:	6822      	ldr	r2, [r4, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	6022      	str	r2, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	bc70      	pop	{r4, r5, r6}
 8004ca2:	4770      	bx	lr
 8004ca4:	200012e8 	.word	0x200012e8
	...

08004cb0 <pwm_lld_init>:
/**
 * @brief   Low level PWM driver initialization.
 *
 * @notapi
 */
void pwm_lld_init(void) {
 8004cb0:	b510      	push	{r4, lr}
  PWMD4.tim = STM32_TIM4;
#endif

#if STM32_PWM_USE_TIM5
  /* Driver initialization.*/
  pwmObjectInit(&PWMD5);
 8004cb2:	4c04      	ldr	r4, [pc, #16]	; (8004cc4 <pwm_lld_init+0x14>)
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f7fd f98b 	bl	8001fd0 <pwmObjectInit>
  PWMD5.channels = STM32_TIM5_CHANNELS;
 8004cba:	2204      	movs	r2, #4
  PWMD5.tim = STM32_TIM5;
 8004cbc:	4b02      	ldr	r3, [pc, #8]	; (8004cc8 <pwm_lld_init+0x18>)
#endif

#if STM32_PWM_USE_TIM5
  /* Driver initialization.*/
  pwmObjectInit(&PWMD5);
  PWMD5.channels = STM32_TIM5_CHANNELS;
 8004cbe:	7422      	strb	r2, [r4, #16]
  PWMD5.tim = STM32_TIM5;
 8004cc0:	61a3      	str	r3, [r4, #24]
 8004cc2:	bd10      	pop	{r4, pc}
 8004cc4:	20001320 	.word	0x20001320
 8004cc8:	40000c00 	.word	0x40000c00
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <pwm_lld_start>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8004cd2:	7803      	ldrb	r3, [r0, #0]
 8004cd4:	2b01      	cmp	r3, #1
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
 8004cd6:	4604      	mov	r4, r0
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8004cd8:	d04b      	beq.n	8004d72 <pwm_lld_start+0xa2>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8004cda:	6983      	ldr	r3, [r0, #24]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8004ce4:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8004ce8:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8004cea:	6861      	ldr	r1, [r4, #4]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 8004cec:	68a5      	ldr	r5, [r4, #8]
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8004cee:	68ca      	ldr	r2, [r1, #12]
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8004cf0:	6960      	ldr	r0, [r4, #20]
 8004cf2:	680f      	ldr	r7, [r1, #0]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;
 8004cf4:	6ace      	ldr	r6, [r1, #44]	; 0x2c
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8004cf6:	fbb0 f0f7 	udiv	r0, r0, r7
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8004cfa:	f002 020f 	and.w	r2, r2, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 8004cfe:	1e6c      	subs	r4, r5, #1
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8004d00:	3801      	subs	r0, #1
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8004d02:	2a01      	cmp	r2, #1
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8004d04:	6298      	str	r0, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8004d06:	62dc      	str	r4, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8004d08:	605e      	str	r6, [r3, #4]

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8004d0a:	d003      	beq.n	8004d14 <pwm_lld_start+0x44>
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
 8004d0c:	2a02      	cmp	r2, #2
 8004d0e:	bf0c      	ite	eq
 8004d10:	2203      	moveq	r2, #3
 8004d12:	2200      	movne	r2, #0
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC1E;
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8004d14:	6948      	ldr	r0, [r1, #20]
 8004d16:	f000 000f 	and.w	r0, r0, #15
 8004d1a:	2801      	cmp	r0, #1
 8004d1c:	d026      	beq.n	8004d6c <pwm_lld_start+0x9c>
 8004d1e:	2802      	cmp	r0, #2
 8004d20:	d022      	beq.n	8004d68 <pwm_lld_start+0x98>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8004d22:	69c8      	ldr	r0, [r1, #28]
 8004d24:	f000 000f 	and.w	r0, r0, #15
 8004d28:	2801      	cmp	r0, #1
 8004d2a:	d01a      	beq.n	8004d62 <pwm_lld_start+0x92>
 8004d2c:	2802      	cmp	r0, #2
 8004d2e:	d016      	beq.n	8004d5e <pwm_lld_start+0x8e>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8004d30:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004d32:	f000 000f 	and.w	r0, r0, #15
 8004d36:	2801      	cmp	r0, #1
 8004d38:	d003      	beq.n	8004d42 <pwm_lld_start+0x72>
 8004d3a:	2802      	cmp	r0, #2
 8004d3c:	d103      	bne.n	8004d46 <pwm_lld_start+0x76>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC4P;
 8004d3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC4E;
 8004d42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8004d46:	6b09      	ldr	r1, [r1, #48]	; 0x30
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 8004d48:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8004d4a:	2401      	movs	r4, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8004d4c:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8004d50:	2000      	movs	r0, #0
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8004d52:	2185      	movs	r1, #133	; 0x85
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8004d54:	615c      	str	r4, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8004d56:	6118      	str	r0, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8004d58:	60da      	str	r2, [r3, #12]
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8004d5a:	6019      	str	r1, [r3, #0]
 8004d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC3P;
 8004d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
 8004d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d66:	e7e3      	b.n	8004d30 <pwm_lld_start+0x60>
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC2P;
 8004d68:	f042 0220 	orr.w	r2, r2, #32
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
 8004d6c:	f042 0210 	orr.w	r2, r2, #16
 8004d70:	e7d7      	b.n	8004d22 <pwm_lld_start+0x52>
#endif
    }
#endif

#if STM32_PWM_USE_TIM5
    if (&PWMD5 == pwmp) {
 8004d72:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <pwm_lld_start+0xd8>)
 8004d74:	4298      	cmp	r0, r3
 8004d76:	d005      	beq.n	8004d84 <pwm_lld_start+0xb4>
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8004d78:	69a3      	ldr	r3, [r4, #24]
 8004d7a:	f646 0268 	movw	r2, #26728	; 0x6868
 8004d7e:	619a      	str	r2, [r3, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8004d80:	61da      	str	r2, [r3, #28]
 8004d82:	e7b2      	b.n	8004cea <pwm_lld_start+0x1a>
    }
#endif

#if STM32_PWM_USE_TIM5
    if (&PWMD5 == pwmp) {
      rccEnableTIM5(FALSE);
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <pwm_lld_start+0xdc>)
 8004d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d88:	f042 0208 	orr.w	r2, r2, #8
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
      rccResetTIM5();
 8004d8e:	6a1a      	ldr	r2, [r3, #32]
 8004d90:	2000      	movs	r0, #0
 8004d92:	f042 0208 	orr.w	r2, r2, #8
 8004d96:	621a      	str	r2, [r3, #32]
#if !defined(STM32_TIM5_SUPPRESS_ISR)
      nvicEnableVector(STM32_TIM5_NUMBER, STM32_PWM_TIM5_IRQ_PRIORITY);
 8004d98:	2107      	movs	r1, #7
#endif

#if STM32_PWM_USE_TIM5
    if (&PWMD5 == pwmp) {
      rccEnableTIM5(FALSE);
      rccResetTIM5();
 8004d9a:	6218      	str	r0, [r3, #32]
#if !defined(STM32_TIM5_SUPPRESS_ISR)
      nvicEnableVector(STM32_TIM5_NUMBER, STM32_PWM_TIM5_IRQ_PRIORITY);
 8004d9c:	2032      	movs	r0, #50	; 0x32
 8004d9e:	f7fd fedf 	bl	8002b60 <nvicEnableVector>
#endif
#if defined(STM32_TIM5CLK)
      pwmp->clock = STM32_TIM5CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 8004da2:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <pwm_lld_start+0xe0>)
 8004da4:	6163      	str	r3, [r4, #20]
 8004da6:	e7e7      	b.n	8004d78 <pwm_lld_start+0xa8>
 8004da8:	20001320 	.word	0x20001320
 8004dac:	40023800 	.word	0x40023800
 8004db0:	0501bd00 	.word	0x0501bd00
	...

08004dc0 <pwm_lld_enable_channel>:
                            pwmchannel_t channel,
                            pwmcnt_t width) {

  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
 8004dc0:	6983      	ldr	r3, [r0, #24]
 8004dc2:	310c      	adds	r1, #12
 8004dc4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004dc8:	605a      	str	r2, [r3, #4]
 8004dca:	4770      	bx	lr
 8004dcc:	0000      	movs	r0, r0
	...

08004dd0 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8004dd0:	6983      	ldr	r3, [r0, #24]
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8004dd2:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8004dd4:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	4014      	ands	r4, r2
  pwmp->tim->SR = ~sr;
 8004dda:	b2e2      	uxtb	r2, r4
 8004ddc:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004dde:	07a6      	lsls	r6, r4, #30
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8004de0:	4605      	mov	r5, r0
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
 8004de2:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004de4:	d503      	bpl.n	8004dee <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 8004de6:	6843      	ldr	r3, [r0, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004dea:	b103      	cbz	r3, 8004dee <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 8004dec:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004dee:	0760      	lsls	r0, r4, #29
 8004df0:	d504      	bpl.n	8004dfc <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 8004df2:	686b      	ldr	r3, [r5, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004df6:	b10b      	cbz	r3, 8004dfc <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 8004df8:	4628      	mov	r0, r5
 8004dfa:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8004dfc:	0721      	lsls	r1, r4, #28
 8004dfe:	d504      	bpl.n	8004e0a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 8004e00:	686b      	ldr	r3, [r5, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8004e04:	b10b      	cbz	r3, 8004e0a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 8004e06:	4628      	mov	r0, r5
 8004e08:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8004e0a:	06e2      	lsls	r2, r4, #27
 8004e0c:	d504      	bpl.n	8004e18 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 8004e0e:	686b      	ldr	r3, [r5, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8004e12:	b10b      	cbz	r3, 8004e18 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 8004e14:	4628      	mov	r0, r5
 8004e16:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8004e18:	07e3      	lsls	r3, r4, #31
 8004e1a:	d506      	bpl.n	8004e2a <pwm_lld_serve_interrupt+0x5a>
 8004e1c:	686b      	ldr	r3, [r5, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	b11b      	cbz	r3, 8004e2a <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 8004e22:	4628      	mov	r0, r5
}
 8004e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
    pwmp->config->callback(pwmp);
 8004e28:	4718      	bx	r3
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
 8004e2c:	0000      	movs	r0, r0
	...

08004e30 <Vector108>:
/**
 * @brief   TIM5 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 8004e30:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD5);
 8004e32:	4803      	ldr	r0, [pc, #12]	; (8004e40 <Vector108+0x10>)
 8004e34:	f7ff ffcc 	bl	8004dd0 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8004e38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD5);

  OSAL_IRQ_EPILOGUE();
 8004e3c:	f7fc bd60 	b.w	8001900 <_port_irq_epilogue>
 8004e40:	20001320 	.word	0x20001320
	...

08004e50 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 8004e50:	f7fd bee6 	b.w	8002c20 <stm32_clock_init>
	...

08004e60 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
	...

08004e70 <ch_ltoa>:
  while (--i);

  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {
 8004e70:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8004e72:	f100 070b 	add.w	r7, r0, #11
 8004e76:	463c      	mov	r4, r7
 8004e78:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8004e7a:	fbb1 f6f2 	udiv	r6, r1, r2
 8004e7e:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8004e82:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8004e86:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8004e88:	bfc8      	it	gt
 8004e8a:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 8004e94:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 8004e98:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8004e9a:	2d00      	cmp	r5, #0
 8004e9c:	d1ed      	bne.n	8004e7a <ch_ltoa+0xa>
 8004e9e:	1b3a      	subs	r2, r7, r4
 8004ea0:	4402      	add	r2, r0
 8004ea2:	e001      	b.n	8004ea8 <ch_ltoa+0x38>
 8004ea4:	f814 3f01 	ldrb.w	r3, [r4, #1]!

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 8004ea8:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8004eac:	4290      	cmp	r0, r2
 8004eae:	d1f9      	bne.n	8004ea4 <ch_ltoa+0x34>
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
}
 8004eb0:	bcf0      	pop	{r4, r5, r6, r7}
 8004eb2:	4770      	bx	lr
	...

08004ec0 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8004ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec4:	ed2d 8b02 	vpush	{d8}
 8004ec8:	b091      	sub	sp, #68	; 0x44
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8004eca:	2300      	movs	r3, #0
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8004ecc:	4606      	mov	r6, r0
 8004ece:	468b      	mov	fp, r1
 8004ed0:	4692      	mov	sl, r2
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8004ed2:	9300      	str	r3, [sp, #0]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004ed4:	f89b 1000 	ldrb.w	r1, [fp]
 8004ed8:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8004edc:	b179      	cbz	r1, 8004efe <chvprintf+0x3e>
      return n;
    if (c != '%') {
 8004ede:	2925      	cmp	r1, #37	; 0x25
 8004ee0:	d013      	beq.n	8004f0a <chvprintf+0x4a>
      streamPut(chp, (uint8_t)c);
      n++;
 8004ee2:	9c00      	ldr	r4, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8004ee4:	6832      	ldr	r2, [r6, #0]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004ee6:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8004ee8:	6892      	ldr	r2, [r2, #8]
 8004eea:	4630      	mov	r0, r6
      n++;
 8004eec:	3401      	adds	r4, #1
 8004eee:	9400      	str	r4, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8004ef0:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004ef2:	f89b 1000 	ldrb.w	r1, [fp]
 8004ef6:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8004efa:	2900      	cmp	r1, #0
 8004efc:	d1ef      	bne.n	8004ede <chvprintf+0x1e>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8004efe:	9800      	ldr	r0, [sp, #0]
 8004f00:	b011      	add	sp, #68	; 0x44
 8004f02:	ecbd 8b02 	vpop	{d8}
 8004f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8004f0a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8004f0e:	2a2d      	cmp	r2, #45	; 0x2d
 8004f10:	bf03      	ittte	eq
 8004f12:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 8004f16:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 8004f1a:	2101      	moveq	r1, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8004f1c:	2100      	movne	r1, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8004f1e:	2a30      	cmp	r2, #48	; 0x30
 8004f20:	bf08      	it	eq
 8004f22:	785a      	ldrbeq	r2, [r3, #1]
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8004f24:	9101      	str	r1, [sp, #4]
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
 8004f26:	bf06      	itte	eq
 8004f28:	3301      	addeq	r3, #1
      filler = '0';
 8004f2a:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8004f2c:	2720      	movne	r7, #32
 8004f2e:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8004f30:	2400      	movs	r4, #0
 8004f32:	e008      	b.n	8004f46 <chvprintf+0x86>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8004f34:	f89a 3000 	ldrb.w	r3, [sl]
 8004f38:	f10a 0a04 	add.w	sl, sl, #4
 8004f3c:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 8004f40:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 8004f44:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8004f46:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8004f4e:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8004f50:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8004f54:	d9f2      	bls.n	8004f3c <chvprintf+0x7c>
        c -= '0';
      else if (c == '*')
 8004f56:	2a2a      	cmp	r2, #42	; 0x2a
 8004f58:	d0ec      	beq.n	8004f34 <chvprintf+0x74>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8004f5a:	2a2e      	cmp	r2, #46	; 0x2e
 8004f5c:	f04f 0800 	mov.w	r8, #0
 8004f60:	d045      	beq.n	8004fee <chvprintf+0x12e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8004f62:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8004f66:	2b4c      	cmp	r3, #76	; 0x4c
 8004f68:	d050      	beq.n	800500c <chvprintf+0x14c>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8004f6a:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 8004f6e:	2b34      	cmp	r3, #52	; 0x34
 8004f70:	f200 81c9 	bhi.w	8005306 <chvprintf+0x446>
 8004f74:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f78:	01c701b7 	.word	0x01c701b7
 8004f7c:	01c701c7 	.word	0x01c701c7
 8004f80:	01b701c7 	.word	0x01b701c7
 8004f84:	01c701c7 	.word	0x01c701c7
 8004f88:	01c701c7 	.word	0x01c701c7
 8004f8c:	01b501c7 	.word	0x01b501c7
 8004f90:	01c701c7 	.word	0x01c701c7
 8004f94:	01c701c7 	.word	0x01c701c7
 8004f98:	010601c7 	.word	0x010601c7
 8004f9c:	01c701c7 	.word	0x01c701c7
 8004fa0:	01c7008d 	.word	0x01c7008d
 8004fa4:	01c701c7 	.word	0x01c701c7
 8004fa8:	01c701c7 	.word	0x01c701c7
 8004fac:	01c701c7 	.word	0x01c701c7
 8004fb0:	01c701c7 	.word	0x01c701c7
 8004fb4:	01a701c7 	.word	0x01a701c7
 8004fb8:	01c701b7 	.word	0x01c701b7
 8004fbc:	01c70108 	.word	0x01c70108
 8004fc0:	01b701c7 	.word	0x01b701c7
 8004fc4:	01c701c7 	.word	0x01c701c7
 8004fc8:	01c701c7 	.word	0x01c701c7
 8004fcc:	01b501c7 	.word	0x01b501c7
 8004fd0:	01c701c7 	.word	0x01c701c7
 8004fd4:	00db01c7 	.word	0x00db01c7
 8004fd8:	010601c7 	.word	0x010601c7
 8004fdc:	01c701c7 	.word	0x01c701c7
 8004fe0:	008d      	.short	0x008d
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8004fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe6:	f10a 0a04 	add.w	sl, sl, #4
        else
          break;
        precision *= 10;
        precision += c;
 8004fea:	eb03 0841 	add.w	r8, r3, r1, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8004fee:	f81b 2b01 	ldrb.w	r2, [fp], #1
        if (c >= '0' && c <= '9')
 8004ff2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8004ffa:	eb08 0188 	add.w	r1, r8, r8, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8004ffe:	d9f4      	bls.n	8004fea <chvprintf+0x12a>
          c -= '0';
        else if (c == '*')
 8005000:	2a2a      	cmp	r2, #42	; 0x2a
 8005002:	d0ee      	beq.n	8004fe2 <chvprintf+0x122>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8005004:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8005008:	2b4c      	cmp	r3, #76	; 0x4c
 800500a:	d1ae      	bne.n	8004f6a <chvprintf+0xaa>
      is_long = TRUE;
      if (*fmt)
 800500c:	f89b 1000 	ldrb.w	r1, [fp]
 8005010:	2900      	cmp	r1, #0
 8005012:	f000 8178 	beq.w	8005306 <chvprintf+0x446>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8005016:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 800501a:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800501e:	2b34      	cmp	r3, #52	; 0x34
 8005020:	f200 8170 	bhi.w	8005304 <chvprintf+0x444>
 8005024:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005028:	016e015f 	.word	0x016e015f
 800502c:	016e016e 	.word	0x016e016e
 8005030:	015f016e 	.word	0x015f016e
 8005034:	016e016e 	.word	0x016e016e
 8005038:	016e016e 	.word	0x016e016e
 800503c:	015d016e 	.word	0x015d016e
 8005040:	016e016e 	.word	0x016e016e
 8005044:	016e016e 	.word	0x016e016e
 8005048:	00ae016e 	.word	0x00ae016e
 800504c:	016e016e 	.word	0x016e016e
 8005050:	016e0035 	.word	0x016e0035
 8005054:	016e016e 	.word	0x016e016e
 8005058:	016e016e 	.word	0x016e016e
 800505c:	016e016e 	.word	0x016e016e
 8005060:	016e016e 	.word	0x016e016e
 8005064:	014f016e 	.word	0x014f016e
 8005068:	016e015f 	.word	0x016e015f
 800506c:	016e00b0 	.word	0x016e00b0
 8005070:	015f016e 	.word	0x015f016e
 8005074:	016e016e 	.word	0x016e016e
 8005078:	016e016e 	.word	0x016e016e
 800507c:	015d016e 	.word	0x015d016e
 8005080:	016e016e 	.word	0x016e016e
 8005084:	0083016e 	.word	0x0083016e
 8005088:	00ae016e 	.word	0x00ae016e
 800508c:	016e016e 	.word	0x016e016e
 8005090:	0035      	.short	0x0035
 8005092:	2210      	movs	r2, #16
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
 8005094:	ad0a      	add	r5, sp, #40	; 0x28
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8005096:	f8da 1000 	ldr.w	r1, [sl]
      p = ch_ltoa(p, l, c);
 800509a:	4628      	mov	r0, r5
 800509c:	f7ff fee8 	bl	8004e70 <ch_ltoa>
 80050a0:	1b40      	subs	r0, r0, r5
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 80050a2:	f10a 0a04 	add.w	sl, sl, #4
 80050a6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80050aa:	9b01      	ldr	r3, [sp, #4]
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80050ac:	1a24      	subs	r4, r4, r0
 80050ae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      width = 0;
    if (left_align == FALSE)
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d162      	bne.n	800517c <chvprintf+0x2bc>
      width = -width;
 80050b6:	f1c4 0900 	rsb	r9, r4, #0
    if (width < 0) {
 80050ba:	f1b9 0f00 	cmp.w	r9, #0
 80050be:	f000 812b 	beq.w	8005318 <chvprintf+0x458>
      if (*s == '-' && filler == '0') {
 80050c2:	7829      	ldrb	r1, [r5, #0]
 80050c4:	292d      	cmp	r1, #45	; 0x2d
 80050c6:	f000 813a 	beq.w	800533e <chvprintf+0x47e>
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 80050ca:	6833      	ldr	r3, [r6, #0]
 80050cc:	4639      	mov	r1, r7
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4630      	mov	r0, r6
 80050d2:	4798      	blx	r3
        n++;
      } while (++width != 0);
 80050d4:	f119 0901 	adds.w	r9, r9, #1
 80050d8:	d1f7      	bne.n	80050ca <chvprintf+0x20a>
 80050da:	9b00      	ldr	r3, [sp, #0]
    }
    while (--i >= 0) {
 80050dc:	f1b8 0f00 	cmp.w	r8, #0
 80050e0:	4423      	add	r3, r4
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	f6ff aef6 	blt.w	8004ed4 <chvprintf+0x14>
 80050e8:	464c      	mov	r4, r9
 80050ea:	46c1      	mov	r9, r8
      streamPut(chp, (uint8_t)*s++);
 80050ec:	6833      	ldr	r3, [r6, #0]
 80050ee:	f815 1b01 	ldrb.w	r1, [r5], #1
 80050f2:	689b      	ldr	r3, [r3, #8]
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80050f4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 80050f8:	4630      	mov	r0, r6
 80050fa:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80050fc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005100:	d1f4      	bne.n	80050ec <chvprintf+0x22c>
 8005102:	9b00      	ldr	r3, [sp, #0]
 8005104:	3301      	adds	r3, #1
 8005106:	f1b8 0f00 	cmp.w	r8, #0
 800510a:	bfa8      	it	ge
 800510c:	4443      	addge	r3, r8
 800510e:	9300      	str	r3, [sp, #0]
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8005110:	2c00      	cmp	r4, #0
 8005112:	f43f aedf 	beq.w	8004ed4 <chvprintf+0x14>
 8005116:	4625      	mov	r5, r4
      streamPut(chp, (uint8_t)filler);
 8005118:	6833      	ldr	r3, [r6, #0]
 800511a:	4639      	mov	r1, r7
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	4630      	mov	r0, r6
 8005120:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8005122:	3d01      	subs	r5, #1
 8005124:	d1f8      	bne.n	8005118 <chvprintf+0x258>
 8005126:	9b00      	ldr	r3, [sp, #0]
 8005128:	4423      	add	r3, r4
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	e6d2      	b.n	8004ed4 <chvprintf+0x14>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800512e:	f8da 5000 	ldr.w	r5, [sl]
        s = "(null)";
 8005132:	4b9b      	ldr	r3, [pc, #620]	; (80053a0 <chvprintf+0x4e0>)
 8005134:	2d00      	cmp	r5, #0
 8005136:	bf08      	it	eq
 8005138:	461d      	moveq	r5, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800513a:	f10a 0a04 	add.w	sl, sl, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800513e:	782b      	ldrb	r3, [r5, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8005140:	f1b8 0f00 	cmp.w	r8, #0
 8005144:	f000 80ee 	beq.w	8005324 <chvprintf+0x464>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80f0 	beq.w	800532e <chvprintf+0x46e>
 800514e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005152:	4628      	mov	r0, r5
 8005154:	e002      	b.n	800515c <chvprintf+0x29c>
 8005156:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800515a:	d005      	beq.n	8005168 <chvprintf+0x2a8>
 800515c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8005160:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1f6      	bne.n	8005156 <chvprintf+0x296>
 8005168:	1b40      	subs	r0, r0, r5
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800516a:	9b01      	ldr	r3, [sp, #4]
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 800516c:	1a24      	subs	r4, r4, r0
 800516e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8005172:	2720      	movs	r7, #32
 8005174:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8005178:	2b00      	cmp	r3, #0
 800517a:	d09c      	beq.n	80050b6 <chvprintf+0x1f6>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800517c:	f1b8 0f00 	cmp.w	r8, #0
 8005180:	dab3      	bge.n	80050ea <chvprintf+0x22a>
 8005182:	e7c5      	b.n	8005110 <chvprintf+0x250>
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
 8005184:	220a      	movs	r2, #10
 8005186:	e785      	b.n	8005094 <chvprintf+0x1d4>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8005188:	f10a 0a07 	add.w	sl, sl, #7
 800518c:	f02a 0a07 	bic.w	sl, sl, #7
 8005190:	e9da 0100 	ldrd	r0, r1, [sl]
 8005194:	f7fb fd54 	bl	8000c40 <__aeabi_d2f>
 8005198:	ee08 0a10 	vmov	s16, r0
      if (f < 0) {
 800519c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80051a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 80051a4:	f10a 0a08 	add.w	sl, sl, #8
      if (f < 0) {
 80051a8:	f100 80e8 	bmi.w	800537c <chvprintf+0x4bc>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80051ac:	ad0a      	add	r5, sp, #40	; 0x28
 80051ae:	462a      	mov	r2, r5
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 80051b0:	ee18 0a10 	vmov	r0, s16
 80051b4:	9204      	str	r2, [sp, #16]
 80051b6:	f7fb fa07 	bl	80005c8 <__aeabi_f2d>
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 80051ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80051be:	f1b8 0f08 	cmp.w	r8, #8
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 80051c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 80051c6:	9a04      	ldr	r2, [sp, #16]
 80051c8:	f200 80c7 	bhi.w	800535a <chvprintf+0x49a>
 80051cc:	4b75      	ldr	r3, [pc, #468]	; (80053a4 <chvprintf+0x4e4>)
 80051ce:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 80051d2:	4640      	mov	r0, r8
 80051d4:	f7fb f9d6 	bl	8000584 <__aeabi_ui2d>
 80051d8:	4b73      	ldr	r3, [pc, #460]	; (80053a8 <chvprintf+0x4e8>)
 80051da:	9a04      	ldr	r2, [sp, #16]
 80051dc:	fba3 3808 	umull	r3, r8, r3, r8
 80051e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80051e4:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 80051e8:	9309      	str	r3, [sp, #36]	; 0x24
 80051ea:	4698      	mov	r8, r3
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 80051ec:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 80051f0:	f102 030b 	add.w	r3, r2, #11
 80051f4:	ee17 1a90 	vmov	r1, s15
                                         long divisor) {
  int i;
  char *q;
  long l, ll;

  l = num;
 80051f8:	ee17 ea90 	vmov	lr, s15

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 80051fc:	edcd 7a04 	vstr	s15, [sp, #16]
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8005200:	9305      	str	r3, [sp, #20]
 8005202:	4618      	mov	r0, r3
 8005204:	9208      	str	r2, [sp, #32]
  do {
    i = (int)(l % radix);
 8005206:	4b68      	ldr	r3, [pc, #416]	; (80053a8 <chvprintf+0x4e8>)
 8005208:	fba3 230e 	umull	r2, r3, r3, lr
 800520c:	08db      	lsrs	r3, r3, #3
 800520e:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 8005212:	4a65      	ldr	r2, [pc, #404]	; (80053a8 <chvprintf+0x4e8>)
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8005214:	469c      	mov	ip, r3
 8005216:	ebae 0349 	sub.w	r3, lr, r9, lsl #1
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800521a:	3330      	adds	r3, #48	; 0x30
    l /= radix;
  } while ((ll /= radix) != 0);
 800521c:	fba2 2101 	umull	r2, r1, r2, r1
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8005220:	b2db      	uxtb	r3, r3
    l /= radix;
  } while ((ll /= radix) != 0);
 8005222:	08c9      	lsrs	r1, r1, #3
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8005224:	f800 3d01 	strb.w	r3, [r0, #-1]!
    l /= radix;
 8005228:	46e6      	mov	lr, ip
  } while ((ll /= radix) != 0);
 800522a:	d1ec      	bne.n	8005206 <chvprintf+0x346>
 800522c:	9905      	ldr	r1, [sp, #20]
 800522e:	9a08      	ldr	r2, [sp, #32]
 8005230:	ebc0 0901 	rsb	r9, r0, r1
 8005234:	4491      	add	r9, r2
 8005236:	e001      	b.n	800523c <chvprintf+0x37c>
 8005238:	f810 3f01 	ldrb.w	r3, [r0, #1]!

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 800523c:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 8005240:	454a      	cmp	r2, r9
 8005242:	d1f9      	bne.n	8005238 <chvprintf+0x378>
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 8005244:	464a      	mov	r2, r9
 8005246:	232e      	movs	r3, #46	; 0x2e
 8005248:	f802 3b0c 	strb.w	r3, [r2], #12
  l = (long)((num - l) * precision);
 800524c:	9804      	ldr	r0, [sp, #16]
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 800524e:	9204      	str	r2, [sp, #16]
  l = (long)((num - l) * precision);
 8005250:	f7fb f9a8 	bl	80005a4 <__aeabi_i2d>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800525c:	f7fb f854 	bl	8000308 <__aeabi_dsub>
 8005260:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005264:	f7fb fa04 	bl	8000670 <__aeabi_dmul>
 8005268:	f7fb fca2 	bl	8000bb0 <__aeabi_d2iz>
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 800526c:	9909      	ldr	r1, [sp, #36]	; 0x24
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800526e:	9a04      	ldr	r2, [sp, #16]
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 8005270:	2900      	cmp	r1, #0
 8005272:	bf08      	it	eq
 8005274:	4680      	moveq	r8, r0
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 8005276:	f109 0e01 	add.w	lr, r9, #1
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 800527a:	4b4b      	ldr	r3, [pc, #300]	; (80053a8 <chvprintf+0x4e8>)
 800527c:	fba3 1300 	umull	r1, r3, r3, r0
 8005280:	08db      	lsrs	r3, r3, #3
 8005282:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8005286:	4619      	mov	r1, r3
 8005288:	eba0 034c 	sub.w	r3, r0, ip, lsl #1
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 800528c:	4846      	ldr	r0, [pc, #280]	; (80053a8 <chvprintf+0x4e8>)
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800528e:	3330      	adds	r3, #48	; 0x30
    l /= radix;
  } while ((ll /= radix) != 0);
 8005290:	fba0 0808 	umull	r0, r8, r0, r8
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8005294:	b2db      	uxtb	r3, r3
    l /= radix;
  } while ((ll /= radix) != 0);
 8005296:	ea5f 08d8 	movs.w	r8, r8, lsr #3
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800529a:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 800529e:	4608      	mov	r0, r1
  } while ((ll /= radix) != 0);
 80052a0:	d1eb      	bne.n	800527a <chvprintf+0x3ba>
 80052a2:	9904      	ldr	r1, [sp, #16]
 80052a4:	1a89      	subs	r1, r1, r2
 80052a6:	1c48      	adds	r0, r1, #1
 80052a8:	4481      	add	r9, r0

  i = (int)(p + MAX_FILLER - q);
 80052aa:	4670      	mov	r0, lr
 80052ac:	e001      	b.n	80052b2 <chvprintf+0x3f2>
 80052ae:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  do
    *p++ = *q++;
 80052b2:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 80052b6:	4581      	cmp	r9, r0
 80052b8:	d1f9      	bne.n	80052ae <chvprintf+0x3ee>
 80052ba:	eb0e 0001 	add.w	r0, lr, r1
 80052be:	1b40      	subs	r0, r0, r5
 80052c0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80052c4:	e6f1      	b.n	80050aa <chvprintf+0x1ea>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80052c6:	ad10      	add	r5, sp, #64	; 0x40
 80052c8:	f8da 3000 	ldr.w	r3, [sl]
 80052cc:	f805 3d18 	strb.w	r3, [r5, #-24]!
 80052d0:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 80052d4:	1b40      	subs	r0, r0, r5
 80052d6:	f10a 0a04 	add.w	sl, sl, #4
 80052da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80052de:	2720      	movs	r7, #32
      *p++ = va_arg(ap, int);
      break;
 80052e0:	e6e3      	b.n	80050aa <chvprintf+0x1ea>
 80052e2:	2208      	movs	r2, #8
 80052e4:	e6d6      	b.n	8005094 <chvprintf+0x1d4>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 80052e6:	f8da 1000 	ldr.w	r1, [sl]
      if (l < 0) {
 80052ea:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 80052ec:	f10a 0a04 	add.w	sl, sl, #4
      if (l < 0) {
 80052f0:	db3c      	blt.n	800536c <chvprintf+0x4ac>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80052f2:	ad0a      	add	r5, sp, #40	; 0x28
 80052f4:	4628      	mov	r0, r5
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
        l = -l;
      }
      p = ch_ltoa(p, l, 10);
 80052f6:	220a      	movs	r2, #10
 80052f8:	f7ff fdba 	bl	8004e70 <ch_ltoa>
 80052fc:	1b40      	subs	r0, r0, r5
 80052fe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      break;
 8005302:	e6d2      	b.n	80050aa <chvprintf+0x1ea>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8005304:	460a      	mov	r2, r1
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8005306:	ad10      	add	r5, sp, #64	; 0x40
 8005308:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 800530c:	f805 2d18 	strb.w	r2, [r5, #-24]!
 8005310:	1b40      	subs	r0, r0, r5
 8005312:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
      break;
 8005316:	e6c8      	b.n	80050aa <chvprintf+0x1ea>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8005318:	f1b8 0f00 	cmp.w	r8, #0
 800531c:	f6ff adda 	blt.w	8004ed4 <chvprintf+0x14>
 8005320:	464c      	mov	r4, r9
 8005322:	e6e2      	b.n	80050ea <chvprintf+0x22a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8005324:	f647 78fe 	movw	r8, #32766	; 0x7ffe
 8005328:	2b00      	cmp	r3, #0
 800532a:	f47f af12 	bne.w	8005152 <chvprintf+0x292>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800532e:	9b01      	ldr	r3, [sp, #4]
 8005330:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005334:	bb5b      	cbnz	r3, 800538e <chvprintf+0x4ce>
 8005336:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800533a:	2720      	movs	r7, #32
 800533c:	e6bb      	b.n	80050b6 <chvprintf+0x1f6>
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 800533e:	2f30      	cmp	r7, #48	; 0x30
 8005340:	f47f aec3 	bne.w	80050ca <chvprintf+0x20a>
        streamPut(chp, (uint8_t)*s++);
 8005344:	6833      	ldr	r3, [r6, #0]
 8005346:	4630      	mov	r0, r6
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	4798      	blx	r3
        n++;
 800534c:	9b00      	ldr	r3, [sp, #0]
 800534e:	3301      	adds	r3, #1
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        streamPut(chp, (uint8_t)*s++);
 8005350:	3501      	adds	r5, #1
        n++;
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005358:	e6b7      	b.n	80050ca <chvprintf+0x20a>
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800535a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8005398 <chvprintf+0x4d8>
 800535e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80053ac <chvprintf+0x4ec>
 8005362:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005366:	ed8d 7b06 	vstr	d7, [sp, #24]
 800536a:	e73f      	b.n	80051ec <chvprintf+0x32c>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 800536c:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 800536e:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8005370:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8005374:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 8005378:	ad0a      	add	r5, sp, #40	; 0x28
 800537a:	e7bc      	b.n	80052f6 <chvprintf+0x436>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 800537c:	232d      	movs	r3, #45	; 0x2d
        f = -f;
 800537e:	eeb1 8a48 	vneg.f32	s16, s16
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8005382:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8005386:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 800538a:	ad0a      	add	r5, sp, #40	; 0x28
 800538c:	e710      	b.n	80051b0 <chvprintf+0x2f0>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800538e:	2720      	movs	r7, #32
 8005390:	e6be      	b.n	8005110 <chvprintf+0x250>
 8005392:	bf00      	nop
 8005394:	f3af 8000 	nop.w
 8005398:	00000000 	.word	0x00000000
 800539c:	41cdcd65 	.word	0x41cdcd65
 80053a0:	08007c10 	.word	0x08007c10
 80053a4:	08007c20 	.word	0x08007c20
 80053a8:	cccccccd 	.word	0xcccccccd
 80053ac:	05f5e100 	.word	0x05f5e100

080053b0 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80053b0:	b40e      	push	{r1, r2, r3}
 80053b2:	b500      	push	{lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	aa03      	add	r2, sp, #12
 80053b8:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80053bc:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80053be:	f7ff fd7f 	bl	8004ec0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80053c2:	b002      	add	sp, #8
 80053c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053c8:	b003      	add	sp, #12
 80053ca:	4770      	bx	lr
 80053cc:	0000      	movs	r0, r0
	...

080053d0 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80053d0:	6802      	ldr	r2, [r0, #0]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80053d2:	4937      	ldr	r1, [pc, #220]	; (80054b0 <DMA_DeInit+0xe0>)

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80053d4:	2300      	movs	r3, #0
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80053d6:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80053d8:	f022 0201 	bic.w	r2, r2, #1

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80053dc:	2421      	movs	r4, #33	; 0x21

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80053de:	4288      	cmp	r0, r1
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80053e0:	6002      	str	r2, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80053e2:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80053e4:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80053e6:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80053e8:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80053ea:	6103      	str	r3, [r0, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80053ec:	6144      	str	r4, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80053ee:	d04d      	beq.n	800548c <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80053f0:	4b30      	ldr	r3, [pc, #192]	; (80054b4 <DMA_DeInit+0xe4>)
 80053f2:	4298      	cmp	r0, r3
 80053f4:	d035      	beq.n	8005462 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 80053f6:	4b30      	ldr	r3, [pc, #192]	; (80054b8 <DMA_DeInit+0xe8>)
 80053f8:	4298      	cmp	r0, r3
 80053fa:	d039      	beq.n	8005470 <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 80053fc:	4b2f      	ldr	r3, [pc, #188]	; (80054bc <DMA_DeInit+0xec>)
 80053fe:	4298      	cmp	r0, r3
 8005400:	d03d      	beq.n	800547e <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8005402:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <DMA_DeInit+0xf0>)
 8005404:	4298      	cmp	r0, r3
 8005406:	d047      	beq.n	8005498 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8005408:	4b2e      	ldr	r3, [pc, #184]	; (80054c4 <DMA_DeInit+0xf4>)
 800540a:	4298      	cmp	r0, r3
 800540c:	d048      	beq.n	80054a0 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800540e:	4b2e      	ldr	r3, [pc, #184]	; (80054c8 <DMA_DeInit+0xf8>)
 8005410:	4298      	cmp	r0, r3
 8005412:	d01d      	beq.n	8005450 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8005414:	4b2d      	ldr	r3, [pc, #180]	; (80054cc <DMA_DeInit+0xfc>)
 8005416:	4298      	cmp	r0, r3
 8005418:	d01e      	beq.n	8005458 <DMA_DeInit+0x88>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800541a:	4b2d      	ldr	r3, [pc, #180]	; (80054d0 <DMA_DeInit+0x100>)
 800541c:	4298      	cmp	r0, r3
 800541e:	d043      	beq.n	80054a8 <DMA_DeInit+0xd8>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8005420:	4b2c      	ldr	r3, [pc, #176]	; (80054d4 <DMA_DeInit+0x104>)
 8005422:	4298      	cmp	r0, r3
 8005424:	d01d      	beq.n	8005462 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8005426:	4b2c      	ldr	r3, [pc, #176]	; (80054d8 <DMA_DeInit+0x108>)
 8005428:	4298      	cmp	r0, r3
 800542a:	d021      	beq.n	8005470 <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800542c:	4b2b      	ldr	r3, [pc, #172]	; (80054dc <DMA_DeInit+0x10c>)
 800542e:	4298      	cmp	r0, r3
 8005430:	d025      	beq.n	800547e <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8005432:	4b2b      	ldr	r3, [pc, #172]	; (80054e0 <DMA_DeInit+0x110>)
 8005434:	4298      	cmp	r0, r3
 8005436:	d02f      	beq.n	8005498 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8005438:	4b2a      	ldr	r3, [pc, #168]	; (80054e4 <DMA_DeInit+0x114>)
 800543a:	4298      	cmp	r0, r3
 800543c:	d030      	beq.n	80054a0 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800543e:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <DMA_DeInit+0x118>)
 8005440:	4298      	cmp	r0, r3
 8005442:	d005      	beq.n	8005450 <DMA_DeInit+0x80>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8005444:	4b29      	ldr	r3, [pc, #164]	; (80054ec <DMA_DeInit+0x11c>)
 8005446:	4298      	cmp	r0, r3
 8005448:	d006      	beq.n	8005458 <DMA_DeInit+0x88>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800544a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800544e:	4770      	bx	lr
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8005450:	4a27      	ldr	r2, [pc, #156]	; (80054f0 <DMA_DeInit+0x120>)
 8005452:	f843 2c94 	str.w	r2, [r3, #-148]
 8005456:	e7f8      	b.n	800544a <DMA_DeInit+0x7a>
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8005458:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800545c:	f843 2cac 	str.w	r2, [r3, #-172]
    }
  }
}
 8005460:	e7f3      	b.n	800544a <DMA_DeInit+0x7a>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8005462:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005466:	f843 2c20 	str.w	r2, [r3, #-32]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800546a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800546e:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8005470:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005474:	f843 2c38 	str.w	r2, [r3, #-56]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005478:	f85d 4b04 	ldr.w	r4, [sp], #4
 800547c:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 800547e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005482:	f843 2c50 	str.w	r2, [r3, #-80]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800548a:	4770      	bx	lr

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800548c:	4b19      	ldr	r3, [pc, #100]	; (80054f4 <DMA_DeInit+0x124>)
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800548e:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8005492:	223d      	movs	r2, #61	; 0x3d
 8005494:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005496:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8005498:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <DMA_DeInit+0x128>)
 800549a:	f843 2c64 	str.w	r2, [r3, #-100]
 800549e:	e7d4      	b.n	800544a <DMA_DeInit+0x7a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80054a0:	4a16      	ldr	r2, [pc, #88]	; (80054fc <DMA_DeInit+0x12c>)
 80054a2:	f843 2c7c 	str.w	r2, [r3, #-124]
 80054a6:	e7d0      	b.n	800544a <DMA_DeInit+0x7a>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80054a8:	223d      	movs	r2, #61	; 0x3d
 80054aa:	f843 2c08 	str.w	r2, [r3, #-8]
 80054ae:	e7cc      	b.n	800544a <DMA_DeInit+0x7a>
 80054b0:	40026010 	.word	0x40026010
 80054b4:	40026028 	.word	0x40026028
 80054b8:	40026040 	.word	0x40026040
 80054bc:	40026058 	.word	0x40026058
 80054c0:	40026070 	.word	0x40026070
 80054c4:	40026088 	.word	0x40026088
 80054c8:	400260a0 	.word	0x400260a0
 80054cc:	400260b8 	.word	0x400260b8
 80054d0:	40026410 	.word	0x40026410
 80054d4:	40026428 	.word	0x40026428
 80054d8:	40026440 	.word	0x40026440
 80054dc:	40026458 	.word	0x40026458
 80054e0:	40026470 	.word	0x40026470
 80054e4:	40026488 	.word	0x40026488
 80054e8:	400264a0 	.word	0x400264a0
 80054ec:	400264b8 	.word	0x400264b8
 80054f0:	203d0000 	.word	0x203d0000
 80054f4:	40026000 	.word	0x40026000
 80054f8:	2000003d 	.word	0x2000003d
 80054fc:	20000f40 	.word	0x20000f40

08005500 <DMA_Init>:
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005500:	f101 0218 	add.w	r2, r1, #24
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8005504:	b4f0      	push	{r4, r5, r6, r7}
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005506:	ca8c      	ldmia	r2, {r2, r3, r7}
 8005508:	68cd      	ldr	r5, [r1, #12]
 800550a:	680e      	ldr	r6, [r1, #0]
 800550c:	694c      	ldr	r4, [r1, #20]
 800550e:	432e      	orrs	r6, r5
 8005510:	4326      	orrs	r6, r4
 8005512:	4316      	orrs	r6, r2
 8005514:	431e      	orrs	r6, r3
 8005516:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8005518:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800551a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800551c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800551e:	433e      	orrs	r6, r7
 8005520:	4316      	orrs	r6, r2
 8005522:	431e      	orrs	r6, r3
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005524:	4a0b      	ldr	r2, [pc, #44]	; (8005554 <DMA_Init+0x54>)
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8005526:	6803      	ldr	r3, [r0, #0]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8005528:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800552a:	4335      	orrs	r5, r6
 800552c:	432c      	orrs	r4, r5
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800552e:	401a      	ands	r2, r3
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005530:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8005532:	6002      	str	r2, [r0, #0]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8005534:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8005536:	6942      	ldr	r2, [r0, #20]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8005538:	690d      	ldr	r5, [r1, #16]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800553a:	684c      	ldr	r4, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800553c:	6889      	ldr	r1, [r1, #8]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800553e:	433b      	orrs	r3, r7
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005540:	f022 0207 	bic.w	r2, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8005544:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8005546:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8005548:	6045      	str	r5, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800554a:	6084      	str	r4, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800554c:	60c1      	str	r1, [r0, #12]
}
 800554e:	bcf0      	pop	{r4, r5, r6, r7}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	f01c803f 	.word	0xf01c803f
	...

08005560 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8005560:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005562:	b919      	cbnz	r1, 800556c <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	6003      	str	r3, [r0, #0]
 800556a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800556c:	f043 0301 	orr.w	r3, r3, #1
 8005570:	6003      	str	r3, [r0, #0]
 8005572:	4770      	bx	lr
	...

08005580 <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005580:	b929      	cbnz	r1, 800558e <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8005582:	4a05      	ldr	r2, [pc, #20]	; (8005598 <RCC_AHB1PeriphClockCmd+0x18>)
 8005584:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005586:	ea23 0000 	bic.w	r0, r3, r0
 800558a:	6310      	str	r0, [r2, #48]	; 0x30
 800558c:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800558e:	4b02      	ldr	r3, [pc, #8]	; (8005598 <RCC_AHB1PeriphClockCmd+0x18>)
 8005590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005592:	4310      	orrs	r0, r2
 8005594:	6318      	str	r0, [r3, #48]	; 0x30
 8005596:	4770      	bx	lr
 8005598:	40023800 	.word	0x40023800
 800559c:	00000000 	.word	0x00000000

080055a0 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80055a0:	b929      	cbnz	r1, 80055ae <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80055a2:	4a05      	ldr	r2, [pc, #20]	; (80055b8 <RCC_APB1PeriphClockCmd+0x18>)
 80055a4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80055a6:	ea23 0000 	bic.w	r0, r3, r0
 80055aa:	6410      	str	r0, [r2, #64]	; 0x40
 80055ac:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80055ae:	4b02      	ldr	r3, [pc, #8]	; (80055b8 <RCC_APB1PeriphClockCmd+0x18>)
 80055b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055b2:	4310      	orrs	r0, r2
 80055b4:	6418      	str	r0, [r3, #64]	; 0x40
 80055b6:	4770      	bx	lr
 80055b8:	40023800 	.word	0x40023800
 80055bc:	00000000 	.word	0x00000000

080055c0 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80055c0:	4a22      	ldr	r2, [pc, #136]	; (800564c <TIM_TimeBaseInit+0x8c>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80055c2:	6803      	ldr	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80055c4:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80055c6:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80055c8:	d012      	beq.n	80055f0 <TIM_TimeBaseInit+0x30>
 80055ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ce:	4290      	cmp	r0, r2
 80055d0:	d00e      	beq.n	80055f0 <TIM_TimeBaseInit+0x30>
 80055d2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055d6:	d00b      	beq.n	80055f0 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80055d8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80055dc:	4290      	cmp	r0, r2
 80055de:	d007      	beq.n	80055f0 <TIM_TimeBaseInit+0x30>
 80055e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055e4:	4290      	cmp	r0, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80055e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ec:	4290      	cmp	r0, r2
 80055ee:	d103      	bne.n	80055f8 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80055f0:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80055f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80055f6:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80055f8:	4a15      	ldr	r2, [pc, #84]	; (8005650 <TIM_TimeBaseInit+0x90>)
 80055fa:	4290      	cmp	r0, r2
 80055fc:	d01e      	beq.n	800563c <TIM_TimeBaseInit+0x7c>
 80055fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005602:	4290      	cmp	r0, r2
 8005604:	d01a      	beq.n	800563c <TIM_TimeBaseInit+0x7c>
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8005606:	890a      	ldrh	r2, [r1, #8]
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8005608:	b470      	push	{r4, r5, r6}
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800560a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800560e:	4c0f      	ldr	r4, [pc, #60]	; (800564c <TIM_TimeBaseInit+0x8c>)
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8005610:	684e      	ldr	r6, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005612:	880d      	ldrh	r5, [r1, #0]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8005614:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8005616:	4313      	orrs	r3, r2
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8005618:	42a0      	cmp	r0, r4
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800561a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800561c:	62c6      	str	r6, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800561e:	6285      	str	r5, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8005620:	d006      	beq.n	8005630 <TIM_TimeBaseInit+0x70>
 8005622:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <TIM_TimeBaseInit+0x94>)
 8005624:	4298      	cmp	r0, r3
 8005626:	d003      	beq.n	8005630 <TIM_TimeBaseInit+0x70>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8005628:	2301      	movs	r3, #1
 800562a:	6143      	str	r3, [r0, #20]
}
 800562c:	bc70      	pop	{r4, r5, r6}
 800562e:	4770      	bx	lr
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8005630:	7a8b      	ldrb	r3, [r1, #10]
 8005632:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8005634:	2301      	movs	r3, #1
 8005636:	6143      	str	r3, [r0, #20]
}
 8005638:	bc70      	pop	{r4, r5, r6}
 800563a:	4770      	bx	lr
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800563c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800563e:	684a      	ldr	r2, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005640:	880b      	ldrh	r3, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8005642:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005644:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8005646:	2301      	movs	r3, #1
 8005648:	6143      	str	r3, [r0, #20]
 800564a:	4770      	bx	lr
 800564c:	40010000 	.word	0x40010000
 8005650:	40001000 	.word	0x40001000
 8005654:	40010400 	.word	0x40010400
	...

08005660 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005660:	b929      	cbnz	r1, 800566e <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8005662:	6802      	ldr	r2, [r0, #0]
 8005664:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005668:	4013      	ands	r3, r2
 800566a:	6003      	str	r3, [r0, #0]
 800566c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800566e:	6803      	ldr	r3, [r0, #0]
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	6003      	str	r3, [r0, #0]
 8005676:	4770      	bx	lr
	...

08005680 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8005680:	6a02      	ldr	r2, [r0, #32]
 8005682:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8005686:	4013      	ands	r3, r2
 8005688:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800568a:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800568c:	884a      	ldrh	r2, [r1, #2]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568e:	f8d0 e020 	ldr.w	lr, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8005692:	898c      	ldrh	r4, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005694:	6845      	ldr	r5, [r0, #4]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005696:	4e1a      	ldr	r6, [pc, #104]	; (8005700 <TIM_OC3Init+0x80>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005698:	69c7      	ldr	r7, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800569a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800569e:	4314      	orrs	r4, r2
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80056a0:	ea0e 0303 	and.w	r3, lr, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80056a4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80056a8:	f64f 728c 	movw	r2, #65420	; 0xff8c
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80056ac:	880c      	ldrh	r4, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80056ae:	403a      	ands	r2, r7
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80056b0:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80056b2:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b4:	b2ad      	uxth	r5, r5
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80056b6:	ea42 0204 	orr.w	r2, r2, r4
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80056ba:	d009      	beq.n	80056d0 <TIM_OC3Init+0x50>
 80056bc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80056c0:	42b0      	cmp	r0, r6
 80056c2:	d005      	beq.n	80056d0 <TIM_OC3Init+0x50>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80056c4:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c6:	6045      	str	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c8:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80056ca:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056cc:	6203      	str	r3, [r0, #32]
 80056ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80056d0:	89ce      	ldrh	r6, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80056d2:	8a0c      	ldrh	r4, [r1, #16]
 80056d4:	f8b1 e012 	ldrh.w	lr, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80056d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80056dc:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80056e0:	f64f 36ff 	movw	r6, #64511	; 0xfbff
 80056e4:	401e      	ands	r6, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80056e6:	888b      	ldrh	r3, [r1, #4]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80056e8:	f425 5740 	bic.w	r7, r5, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80056ec:	ea44 050e 	orr.w	r5, r4, lr
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80056f0:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80056f4:	ea47 1505 	orr.w	r5, r7, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80056f8:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80056fa:	b2ad      	uxth	r5, r5
 80056fc:	e7e2      	b.n	80056c4 <TIM_OC3Init+0x44>
 80056fe:	bf00      	nop
 8005700:	40010000 	.word	0x40010000
	...

08005710 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005710:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8005712:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8005716:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005718:	4319      	orrs	r1, r3
 800571a:	61c1      	str	r1, [r0, #28]
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop

08005720 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8005720:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005722:	b919      	cbnz	r1, 800572c <TIM_CtrlPWMOutputs+0xc>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8005724:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005728:	6443      	str	r3, [r0, #68]	; 0x44
 800572a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800572c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005730:	6443      	str	r3, [r0, #68]	; 0x44
 8005732:	4770      	bx	lr
	...

08005740 <TIM_DMACmd>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005740:	b92a      	cbnz	r2, 800574e <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8005742:	68c3      	ldr	r3, [r0, #12]
 8005744:	43c9      	mvns	r1, r1
 8005746:	b289      	uxth	r1, r1
 8005748:	4019      	ands	r1, r3
 800574a:	60c1      	str	r1, [r0, #12]
 800574c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800574e:	68c3      	ldr	r3, [r0, #12]
 8005750:	4319      	orrs	r1, r3
 8005752:	60c1      	str	r1, [r0, #12]
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
	...

08005760 <main>:
#include "chprintf.h"
#include <stdio.h>
#include <string.h>
#include "math.h"

int main(void) {
 8005760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	b08b      	sub	sp, #44	; 0x2c
	halInit();
 8005766:	f7fc f8fb 	bl	8001960 <halInit>
	chSysInit();
 800576a:	f7fb fbb9 	bl	8000ee0 <chSysInit>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800576e:	2101      	movs	r1, #1
 8005770:	4608      	mov	r0, r1
 8005772:	f7ff ff05 	bl	8005580 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8005776:	2101      	movs	r1, #1
 8005778:	2002      	movs	r0, #2
 800577a:	f7ff ff01 	bl	8005580 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800577e:	2101      	movs	r1, #1
 8005780:	2004      	movs	r0, #4
 8005782:	f7ff fefd 	bl	8005580 <RCC_AHB1PeriphClockCmd>
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT |
			PAL_STM32_OSPEED_HIGHEST);
 8005786:	2218      	movs	r2, #24
 8005788:	2104      	movs	r1, #4
 800578a:	4853      	ldr	r0, [pc, #332]	; (80058d8 <main+0x178>)
 800578c:	f8df b16c 	ldr.w	fp, [pc, #364]	; 80058fc <main+0x19c>
 8005790:	4f52      	ldr	r7, [pc, #328]	; (80058dc <main+0x17c>)
 8005792:	f7fe f8bd 	bl	8003910 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT |
			PAL_STM32_OSPEED_HIGHEST);
 8005796:	2218      	movs	r2, #24
 8005798:	2102      	movs	r1, #2
 800579a:	484f      	ldr	r0, [pc, #316]	; (80058d8 <main+0x178>)
 800579c:	f7fe f8b8 	bl	8003910 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 9, PAL_MODE_INPUT |
			PAL_STM32_OSPEED_HIGHEST);
 80057a0:	2218      	movs	r2, #24
 80057a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057a6:	484e      	ldr	r0, [pc, #312]	; (80058e0 <main+0x180>)
 80057a8:	f7fe f8b2 	bl	8003910 <_pal_lld_setgroupmode>
	esc_init();
 80057ac:	f001 f890 	bl	80068d0 <_Z8esc_initv>
	chThdSleepMilliseconds(1000);
 80057b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80057b4:	f7fb fe54 	bl	8001460 <chThdSleep>
 80057b8:	f10d 0a10 	add.w	sl, sp, #16

	comm_usb_serial_init();
 80057bc:	f000 f8f8 	bl	80059b0 <_Z20comm_usb_serial_initv>
	controller_init();
	for(;;)
	{
		if (comm_usb_serial_is_active())
		{
			uint8_t test[20] = "Hello world";
 80057c0:	2600      	movs	r6, #0
			PAL_STM32_OSPEED_HIGHEST);
	esc_init();
	chThdSleepMilliseconds(1000);

	comm_usb_serial_init();
	ws2812b_init();
 80057c2:	f000 f93d 	bl	8005a40 <_Z12ws2812b_initv>
	uint32_t r = 0;
	uint32_t g = 85;
	uint32_t b = 170;
	bno055_init();
 80057c6:	f000 fb7b 	bl	8005ec0 <_Z11bno055_initv>
	initNRF24L01();
 80057ca:	f000 ff81 	bl	80066d0 <_Z12initNRF24L01v>
	controller_init();
 80057ce:	f001 f8d7 	bl	8006980 <_Z15controller_initv>
 80057d2:	e070      	b.n	80058b6 <main+0x156>
		{
			uint8_t test[20] = "Hello world";
			chprintf((BaseSequentialStream *)&SDU1, "%s\n", test);
		}
        unsigned long res = 0;
        size_t s = chnReadTimeout(&nrf24l01.channels[1], (uint8_t*)&res, sizeof(unsigned long), MS2ST(100));
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		if (comm_usb_serial_is_active())
		{
			uint8_t test[20] = "Hello world";
			chprintf((BaseSequentialStream *)&SDU1, "%s\n", test);
		}
        unsigned long res = 0;
 80057d6:	9603      	str	r6, [sp, #12]
        size_t s = chnReadTimeout(&nrf24l01.channels[1], (uint8_t*)&res, sizeof(unsigned long), MS2ST(100));
 80057d8:	69dc      	ldr	r4, [r3, #28]
 80057da:	4842      	ldr	r0, [pc, #264]	; (80058e4 <main+0x184>)
 80057dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057e0:	2204      	movs	r2, #4
 80057e2:	a903      	add	r1, sp, #12
 80057e4:	47a0      	blx	r4
        chnWriteTimeout(&nrf24l01.channels[0], (uint8_t*)&res, sizeof(unsigned long), MS2ST(250));
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	483c      	ldr	r0, [pc, #240]	; (80058dc <main+0x17c>)
 80057ea:	699c      	ldr	r4, [r3, #24]
 80057ec:	2204      	movs	r2, #4
 80057ee:	a903      	add	r1, sp, #12
 80057f0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80057f4:	47a0      	blx	r4
        if (res > 100)
 80057f6:	9b03      	ldr	r3, [sp, #12]
        {
        	res = 0;
        }
        vector3 vector = bno055_get_vector(VECTOR_EULER);
 80057f8:	201a      	movs	r0, #26
			chprintf((BaseSequentialStream *)&SDU1, "%s\n", test);
		}
        unsigned long res = 0;
        size_t s = chnReadTimeout(&nrf24l01.channels[1], (uint8_t*)&res, sizeof(unsigned long), MS2ST(100));
        chnWriteTimeout(&nrf24l01.channels[0], (uint8_t*)&res, sizeof(unsigned long), MS2ST(250));
        if (res > 100)
 80057fa:	2b64      	cmp	r3, #100	; 0x64
        {
        	res = 0;
 80057fc:	bf88      	it	hi
 80057fe:	9603      	strhi	r6, [sp, #12]
        }
        vector3 vector = bno055_get_vector(VECTOR_EULER);
 8005800:	f000 fa7e 	bl	8005d00 <_Z17bno055_get_vectorh>
 8005804:	ed8d 2b08 	vstr	d2, [sp, #32]
 8005808:	ec55 4b10 	vmov	r4, r5, d0
 800580c:	ed8d 1b06 	vstr	d1, [sp, #24]
 8005810:	ed8d 1b00 	vstr	d1, [sp]
 8005814:	ed8d 0b04 	vstr	d0, [sp, #16]
        uint8_t stat = bno055_get_status();
 8005818:	f000 fa42 	bl	8005ca0 <_Z17bno055_get_statusv>
        uint8_t err = bno055_get_error(); 
 800581c:	f000 fa48 	bl	8005cb0 <_Z16bno055_get_errorv>
        controller_update(res / 100.0);
 8005820:	9803      	ldr	r0, [sp, #12]
 8005822:	f7fa feaf 	bl	8000584 <__aeabi_ui2d>
 8005826:	2200      	movs	r2, #0
 8005828:	4b2f      	ldr	r3, [pc, #188]	; (80058e8 <main+0x188>)
 800582a:	f7fb f84b 	bl	80008c4 <__aeabi_ddiv>
 800582e:	ec41 0b10 	vmov	d0, r0, r1
 8005832:	f001 f96d 	bl	8006b10 <_Z17controller_updated>
		//esc_set_all(res / 100.0);
		ws2812b_set_led_color(0, (uint32_t)(128 + 3 * vector.y));
 8005836:	ed9d 1b00 	vldr	d1, [sp]
 800583a:	2200      	movs	r2, #0
 800583c:	ec51 0b11 	vmov	r0, r1, d1
 8005840:	4b2a      	ldr	r3, [pc, #168]	; (80058ec <main+0x18c>)
 8005842:	f7fa ff15 	bl	8000670 <__aeabi_dmul>
 8005846:	2200      	movs	r2, #0
 8005848:	4b29      	ldr	r3, [pc, #164]	; (80058f0 <main+0x190>)
 800584a:	4680      	mov	r8, r0
 800584c:	4689      	mov	r9, r1
 800584e:	f7fa fd5d 	bl	800030c <__adddf3>
 8005852:	f7fb f9d5 	bl	8000c00 <__aeabi_d2uiz>
 8005856:	4601      	mov	r1, r0
 8005858:	2000      	movs	r0, #0
 800585a:	f000 f9d1 	bl	8005c00 <_Z21ws2812b_set_led_colorim>
		ws2812b_set_led_color(1, (uint32_t)(128 - 3 * vector.x));
 800585e:	4620      	mov	r0, r4
 8005860:	4629      	mov	r1, r5
 8005862:	2200      	movs	r2, #0
 8005864:	4b21      	ldr	r3, [pc, #132]	; (80058ec <main+0x18c>)
 8005866:	f7fa ff03 	bl	8000670 <__aeabi_dmul>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4604      	mov	r4, r0
 8005870:	460d      	mov	r5, r1
 8005872:	2000      	movs	r0, #0
 8005874:	491e      	ldr	r1, [pc, #120]	; (80058f0 <main+0x190>)
 8005876:	f7fa fd47 	bl	8000308 <__aeabi_dsub>
 800587a:	f7fb f9c1 	bl	8000c00 <__aeabi_d2uiz>
 800587e:	4601      	mov	r1, r0
 8005880:	2001      	movs	r0, #1
 8005882:	f000 f9bd 	bl	8005c00 <_Z21ws2812b_set_led_colorim>
		ws2812b_set_led_color(2, (uint32_t)(128 - 3 * vector.y));
 8005886:	4642      	mov	r2, r8
 8005888:	464b      	mov	r3, r9
 800588a:	2000      	movs	r0, #0
 800588c:	4918      	ldr	r1, [pc, #96]	; (80058f0 <main+0x190>)
 800588e:	f7fa fd3b 	bl	8000308 <__aeabi_dsub>
 8005892:	f7fb f9b5 	bl	8000c00 <__aeabi_d2uiz>
 8005896:	4601      	mov	r1, r0
 8005898:	2002      	movs	r0, #2
 800589a:	f000 f9b1 	bl	8005c00 <_Z21ws2812b_set_led_colorim>
		ws2812b_set_led_color(3, (uint32_t)(128 + 3 * vector.x));
 800589e:	2200      	movs	r2, #0
 80058a0:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <main+0x190>)
 80058a2:	4620      	mov	r0, r4
 80058a4:	4629      	mov	r1, r5
 80058a6:	f7fa fd31 	bl	800030c <__adddf3>
 80058aa:	f7fb f9a9 	bl	8000c00 <__aeabi_d2uiz>
 80058ae:	4601      	mov	r1, r0
 80058b0:	2003      	movs	r0, #3
 80058b2:	f000 f9a5 	bl	8005c00 <_Z21ws2812b_set_led_colorim>
	bno055_init();
	initNRF24L01();
	controller_init();
	for(;;)
	{
		if (comm_usb_serial_is_active())
 80058b6:	f000 f8b3 	bl	8005a20 <_Z25comm_usb_serial_is_activev>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d08a      	beq.n	80057d4 <main+0x74>
		{
			uint8_t test[20] = "Hello world";
 80058be:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80058c2:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
			chprintf((BaseSequentialStream *)&SDU1, "%s\n", test);
 80058c6:	4652      	mov	r2, sl
 80058c8:	490a      	ldr	r1, [pc, #40]	; (80058f4 <main+0x194>)
 80058ca:	480b      	ldr	r0, [pc, #44]	; (80058f8 <main+0x198>)
	controller_init();
	for(;;)
	{
		if (comm_usb_serial_is_active())
		{
			uint8_t test[20] = "Hello world";
 80058cc:	9607      	str	r6, [sp, #28]
 80058ce:	9608      	str	r6, [sp, #32]
			chprintf((BaseSequentialStream *)&SDU1, "%s\n", test);
 80058d0:	f7ff fd6e 	bl	80053b0 <chprintf>
 80058d4:	e77e      	b.n	80057d4 <main+0x74>
 80058d6:	bf00      	nop
 80058d8:	40020800 	.word	0x40020800
 80058dc:	20001a5c 	.word	0x20001a5c
 80058e0:	40020400 	.word	0x40020400
 80058e4:	20001a8c 	.word	0x20001a8c
 80058e8:	40590000 	.word	0x40590000
 80058ec:	40080000 	.word	0x40080000
 80058f0:	40600000 	.word	0x40600000
 80058f4:	08007c50 	.word	0x08007c50
 80058f8:	2000134c 	.word	0x2000134c
 80058fc:	080078e0 	.word	0x080078e0

08005900 <_ZL14get_descriptorP9USBDriverhht>:
		uint8_t dindex,
		uint16_t lang) {

	(void)usbp;
	(void)lang;
	switch (dtype) {
 8005900:	2902      	cmp	r1, #2
 8005902:	d006      	beq.n	8005912 <_ZL14get_descriptorP9USBDriverhht+0x12>
 8005904:	2903      	cmp	r1, #3
 8005906:	d006      	beq.n	8005916 <_ZL14get_descriptorP9USBDriverhht+0x16>
 8005908:	2901      	cmp	r1, #1
		return &vcom_configuration_descriptor;
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
			return &vcom_strings[dindex];
	}
	return NULL;
 800590a:	4806      	ldr	r0, [pc, #24]	; (8005924 <_ZL14get_descriptorP9USBDriverhht+0x24>)
 800590c:	bf18      	it	ne
 800590e:	2000      	movne	r0, #0
 8005910:	4770      	bx	lr
	(void)lang;
	switch (dtype) {
	case USB_DESCRIPTOR_DEVICE:
		return &vcom_device_descriptor;
	case USB_DESCRIPTOR_CONFIGURATION:
		return &vcom_configuration_descriptor;
 8005912:	4805      	ldr	r0, [pc, #20]	; (8005928 <_ZL14get_descriptorP9USBDriverhht+0x28>)
 8005914:	4770      	bx	lr
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
 8005916:	2a03      	cmp	r2, #3
			return &vcom_strings[dindex];
 8005918:	bf9a      	itte	ls
 800591a:	4b04      	ldrls	r3, [pc, #16]	; (800592c <_ZL14get_descriptorP9USBDriverhht+0x2c>)
 800591c:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
	}
	return NULL;
 8005920:	2000      	movhi	r0, #0
}
 8005922:	4770      	bx	lr
 8005924:	08007ce0 	.word	0x08007ce0
 8005928:	08007da0 	.word	0x08007da0
 800592c:	08007c70 	.word	0x08007c70

08005930 <_ZL11sof_handlerP9USBDriver>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8005930:	b508      	push	{r3, lr}
 8005932:	2320      	movs	r3, #32
 8005934:	f383 8811 	msr	BASEPRI, r3

  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
 8005938:	4803      	ldr	r0, [pc, #12]	; (8005948 <_ZL11sof_handlerP9USBDriver+0x18>)
 800593a:	f7fc fcf1 	bl	8002320 <sduSOFHookI>
 800593e:	2300      	movs	r3, #0
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	bd08      	pop	{r3, pc}
 8005946:	bf00      	nop
 8005948:	2000134c 	.word	0x2000134c
 800594c:	00000000 	.word	0x00000000

08005950 <_ZL9usb_eventP9USBDriver10usbevent_t>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 	extern SerialUSBDriver SDU1;

	switch (event) {
 8005950:	2902      	cmp	r1, #2
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8005952:	b538      	push	{r3, r4, r5, lr}
 8005954:	460c      	mov	r4, r1
 	extern SerialUSBDriver SDU1;

	switch (event) {
 8005956:	d00c      	beq.n	8005972 <_ZL9usb_eventP9USBDriver10usbevent_t+0x22>
 8005958:	2903      	cmp	r1, #3
 800595a:	d109      	bne.n	8005970 <_ZL9usb_eventP9USBDriver10usbevent_t+0x20>
 800595c:	2320      	movs	r3, #32
 800595e:	f383 8811 	msr	BASEPRI, r3
		return;
	case USB_EVENT_SUSPEND:
	    chSysLockFromISR();

	    /* Disconnection event on suspend.*/
	    sduDisconnectI(&SDU1);
 8005962:	480e      	ldr	r0, [pc, #56]	; (800599c <_ZL9usb_eventP9USBDriver10usbevent_t+0x4c>)
 8005964:	f7fc fc8c 	bl	8002280 <sduDisconnectI>
 8005968:	2300      	movs	r3, #0
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	bd38      	pop	{r3, r4, r5, pc}
 8005972:	4605      	mov	r5, r0
 8005974:	2320      	movs	r3, #32
 8005976:	f383 8811 	msr	BASEPRI, r3
		chSysLockFromISR();

		/* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
		usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 800597a:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <_ZL9usb_eventP9USBDriver10usbevent_t+0x50>)
 800597c:	2101      	movs	r1, #1
 800597e:	f7fc fe27 	bl	80025d0 <usbInitEndpointI>
		usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8005982:	4621      	mov	r1, r4
 8005984:	4628      	mov	r0, r5
 8005986:	4a07      	ldr	r2, [pc, #28]	; (80059a4 <_ZL9usb_eventP9USBDriver10usbevent_t+0x54>)
 8005988:	f7fc fe22 	bl	80025d0 <usbInitEndpointI>

		/* Resetting the state of the CDC subsystem.*/
		sduConfigureHookI(&SDU1);
 800598c:	4803      	ldr	r0, [pc, #12]	; (800599c <_ZL9usb_eventP9USBDriver10usbevent_t+0x4c>)
 800598e:	f7fc fc87 	bl	80022a0 <sduConfigureHookI>
 8005992:	2300      	movs	r3, #0
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	bd38      	pop	{r3, r4, r5, pc}
 800599a:	bf00      	nop
 800599c:	2000134c 	.word	0x2000134c
 80059a0:	08007d10 	.word	0x08007d10
 80059a4:	08007db0 	.word	0x08007db0
	...

080059b0 <_Z20comm_usb_serial_initv>:
		USBD1_DATA_REQUEST_EP,
		USBD1_DATA_AVAILABLE_EP,
		USBD1_INTERRUPT_REQUEST_EP
};

void comm_usb_serial_init(void) {
 80059b0:	b570      	push	{r4, r5, r6, lr}
	palSetPadMode(GPIOA, 11, PAL_MODE_ALTERNATE(10));
 80059b2:	4e15      	ldr	r6, [pc, #84]	; (8005a08 <_Z20comm_usb_serial_initv+0x58>)
	palSetPadMode(GPIOA, 12, PAL_MODE_ALTERNATE(10));
	sduObjectInit(&SDU1);
 80059b4:	4d15      	ldr	r5, [pc, #84]	; (8005a0c <_Z20comm_usb_serial_initv+0x5c>)
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 80059b6:	4c16      	ldr	r4, [pc, #88]	; (8005a10 <_Z20comm_usb_serial_initv+0x60>)
		USBD1_DATA_AVAILABLE_EP,
		USBD1_INTERRUPT_REQUEST_EP
};

void comm_usb_serial_init(void) {
	palSetPadMode(GPIOA, 11, PAL_MODE_ALTERNATE(10));
 80059b8:	4630      	mov	r0, r6
 80059ba:	f240 5202 	movw	r2, #1282	; 0x502
 80059be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059c2:	f7fd ffa5 	bl	8003910 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 12, PAL_MODE_ALTERNATE(10));
 80059c6:	f240 5202 	movw	r2, #1282	; 0x502
 80059ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059ce:	4630      	mov	r0, r6
 80059d0:	f7fd ff9e 	bl	8003910 <_pal_lld_setgroupmode>
	sduObjectInit(&SDU1);
 80059d4:	4628      	mov	r0, r5
 80059d6:	f7fc fc03 	bl	80021e0 <sduObjectInit>
	sduStart(&SDU1, &serusbcfg);
 80059da:	490e      	ldr	r1, [pc, #56]	; (8005a14 <_Z20comm_usb_serial_initv+0x64>)
 80059dc:	4628      	mov	r0, r5
 80059de:	f7fc fc2f 	bl	8002240 <sduStart>
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 80059e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80059e4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80059e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80059ea:	6393      	str	r3, [r2, #56]	; 0x38
	chThdSleepMilliseconds(1500);
 80059ec:	f643 2098 	movw	r0, #15000	; 0x3a98
 80059f0:	f7fb fd36 	bl	8001460 <chThdSleep>
	usbStart(serusbcfg.usbp, &usbcfg);
 80059f4:	4620      	mov	r0, r4
 80059f6:	4908      	ldr	r1, [pc, #32]	; (8005a18 <_Z20comm_usb_serial_initv+0x68>)
 80059f8:	f7fc fdd2 	bl	80025a0 <usbStart>
	usbConnectBus(serusbcfg.usbp);
 80059fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80059fe:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a04:	6393      	str	r3, [r2, #56]	; 0x38
 8005a06:	bd70      	pop	{r4, r5, r6, pc}
 8005a08:	40020000 	.word	0x40020000
 8005a0c:	2000134c 	.word	0x2000134c
 8005a10:	20001050 	.word	0x20001050
 8005a14:	08007d40 	.word	0x08007d40
 8005a18:	08007c90 	.word	0x08007c90
 8005a1c:	00000000 	.word	0x00000000

08005a20 <_Z25comm_usb_serial_is_activev>:
}

int comm_usb_serial_is_active(void) {
	return SDU1.config->usbp->state == USB_ACTIVE;
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <_Z25comm_usb_serial_is_activev+0x18>)
 8005a22:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	7818      	ldrb	r0, [r3, #0]
 8005a2a:	f1a0 0004 	sub.w	r0, r0, #4
 8005a2e:	fab0 f080 	clz	r0, r0
 8005a32:	0940      	lsrs	r0, r0, #5
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	2000134c 	.word	0x2000134c
 8005a3c:	00000000 	.word	0x00000000

08005a40 <_Z12ws2812b_initv>:
static uint8_t gamma_table[256];

// Private function prototypes
static uint32_t rgb_to_local(uint32_t color);

void ws2812b_init(void) {
 8005a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a44:	ed2d 8b02 	vpush	{d8}

	// Default LED values
	int i, bit;

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		RGBdata[i] = 0;
 8005a48:	4b61      	ldr	r3, [pc, #388]	; (8005bd0 <_Z12ws2812b_initv+0x190>)
 8005a4a:	4e62      	ldr	r6, [pc, #392]	; (8005bd4 <_Z12ws2812b_initv+0x194>)
 8005a4c:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8005bf4 <_Z12ws2812b_initv+0x1b4>
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	605a      	str	r2, [r3, #4]
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	60da      	str	r2, [r3, #12]
 8005a5a:	611a      	str	r2, [r3, #16]
 8005a5c:	469e      	mov	lr, r3
static uint8_t gamma_table[256];

// Private function prototypes
static uint32_t rgb_to_local(uint32_t color);

void ws2812b_init(void) {
 8005a5e:	b098      	sub	sp, #96	; 0x60

	// Default LED values
	int i, bit;

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		RGBdata[i] = 0;
 8005a60:	4615      	mov	r5, r2
 8005a62:	4611      	mov	r1, r2
 8005a64:	4637      	mov	r7, r6
 8005a66:	4633      	mov	r3, r6

		for (bit = 0;bit < 24;bit++) {
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
 8005a68:	2421      	movs	r4, #33	; 0x21
	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = rgb_to_local(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
 8005a6a:	2042      	movs	r0, #66	; 0x42
static uint32_t rgb_to_local(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
 8005a6c:	f3c1 4207 	ubfx	r2, r1, #16, #8
	g = gamma_table[g];
 8005a70:	f3c1 2807 	ubfx	r8, r1, #8, #8
static uint32_t rgb_to_local(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
 8005a74:	f81c 2002 	ldrb.w	r2, [ip, r2]
	g = gamma_table[g];
 8005a78:	f81c 8008 	ldrb.w	r8, [ip, r8]
	b = gamma_table[b];
 8005a7c:	b2c9      	uxtb	r1, r1

	return (g << 16) | (r << 8) | b;
 8005a7e:	0212      	lsls	r2, r2, #8
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
	g = gamma_table[g];
	b = gamma_table[b];
 8005a80:	f81c 1001 	ldrb.w	r1, [ip, r1]

	return (g << 16) | (r << 8) | b;
 8005a84:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	f103 0130 	add.w	r1, r3, #48	; 0x30

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = rgb_to_local(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
			if(tmp_color & (1 << 23)) {
 8005a8e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
				bitbuffer[bit + i * 24] = WS2812B_ONE;
 8005a92:	bf14      	ite	ne
 8005a94:	8018      	strhne	r0, [r3, #0]
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
 8005a96:	801c      	strheq	r4, [r3, #0]
 8005a98:	3302      	adds	r3, #2
	}

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = rgb_to_local(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
 8005a9a:	428b      	cmp	r3, r1
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
			}
			tmp_color <<= 1;
 8005a9c:	ea4f 0242 	mov.w	r2, r2, lsl #1
	}

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = rgb_to_local(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
 8005aa0:	d1f5      	bne.n	8005a8e <_Z12ws2812b_initv+0x4e>
 8005aa2:	3518      	adds	r5, #24

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		RGBdata[i] = 0;
	}

	for (i = 0; i < LED_BUFFER_LEN; i++) {
 8005aa4:	2d78      	cmp	r5, #120	; 0x78
 8005aa6:	d002      	beq.n	8005aae <_Z12ws2812b_initv+0x6e>
 8005aa8:	f85e 1f04 	ldr.w	r1, [lr, #4]!
 8005aac:	e7de      	b.n	8005a6c <_Z12ws2812b_initv+0x2c>
 8005aae:	4b4a      	ldr	r3, [pc, #296]	; (8005bd8 <_Z12ws2812b_initv+0x198>)
	}

	// Fill the rest of the buffer with zeros to give the LEDs a chance to update
	// after sending all bits
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8005ab6:	f823 1f02 	strh.w	r1, [r3, #2]!
		}
	}

	// Fill the rest of the buffer with zeros to give the LEDs a chance to update
	// after sending all bits
	for (i = 0; i < BITBUFFER_PAD; i++) {
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d1fb      	bne.n	8005ab6 <_Z12ws2812b_initv+0x76>
 8005abe:	4d47      	ldr	r5, [pc, #284]	; (8005bdc <_Z12ws2812b_initv+0x19c>)
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 8005ac0:	ed9f 8a47 	vldr	s16, [pc, #284]	; 8005be0 <_Z12ws2812b_initv+0x1a0>
		}
	}

	// Fill the rest of the buffer with zeros to give the LEDs a chance to update
	// after sending all bits
	for (i = 0; i < BITBUFFER_PAD; i++) {
 8005ac4:	2400      	movs	r4, #0
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 8005ac6:	ee07 4a90 	vmov	s15, r4
 8005aca:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005ace:	eddf 0a45 	vldr	s1, [pc, #276]	; 8005be4 <_Z12ws2812b_initv+0x1a4>
 8005ad2:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8005ad6:	f001 f89b 	bl	8006c10 <powf>
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
 8005ada:	3401      	adds	r4, #1
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 8005adc:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005ae0:	f001 f866 	bl	8006bb0 <roundf>
 8005ae4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
 8005ae8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 8005aec:	ee17 3a90 	vmov	r3, s15
 8005af0:	f805 3f01 	strb.w	r3, [r5, #1]!
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (i = 0; i < 256; i++) {
 8005af4:	d1e7      	bne.n	8005ac6 <_Z12ws2812b_initv+0x86>
	}

	palSetPadMode(GPIOB, 8,
			PAL_MODE_ALTERNATE(GPIO_AF_TIM4) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);
 8005af6:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8005afa:	4621      	mov	r1, r4
 8005afc:	483a      	ldr	r0, [pc, #232]	; (8005be8 <_Z12ws2812b_initv+0x1a8>)
 8005afe:	f7fd ff07 	bl	8003910 <_pal_lld_setgroupmode>

	// DMA clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 8005b02:	2101      	movs	r1, #1
 8005b04:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005b08:	f7ff fd3a 	bl	8005580 <RCC_AHB1PeriphClockCmd>

	DMA_DeInit(DMA1_Stream7);
 8005b0c:	4837      	ldr	r0, [pc, #220]	; (8005bec <_Z12ws2812b_initv+0x1ac>)
 8005b0e:	f7ff fc5f 	bl	80053d0 <DMA_DeInit>
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8005b12:	2240      	movs	r2, #64	; 0x40
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
 8005b14:	23aa      	movs	r3, #170	; 0xaa
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8005b16:	f44f 6180 	mov.w	r1, #1024	; 0x400

	// DMA clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;
 8005b1a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8005bf8 <_Z12ws2812b_initv+0x1b8>

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
 8005b1e:	960b      	str	r6, [sp, #44]	; 0x2c
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
 8005b20:	f04f 6e80 	mov.w	lr, #67108864	; 0x4000000
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8005b24:	2500      	movs	r5, #0
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8005b26:	9412      	str	r4, [sp, #72]	; 0x48
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8005b28:	f44f 6600 	mov.w	r6, #2048	; 0x800
	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8005b2c:	920c      	str	r2, [sp, #48]	; 0x30
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
 8005b2e:	930d      	str	r3, [sp, #52]	; 0x34
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8005b30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8005b34:	2303      	movs	r3, #3
	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8005b36:	910f      	str	r1, [sp, #60]	; 0x3c
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

	DMA_Init(DMA1_Stream7, &DMA_InitStructure);
 8005b38:	482c      	ldr	r0, [pc, #176]	; (8005bec <_Z12ws2812b_initv+0x1ac>)

	// DMA clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;
 8005b3a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

	DMA_Init(DMA1_Stream7, &DMA_InitStructure);
 8005b3e:	a909      	add	r1, sp, #36	; 0x24
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8005b40:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
 8005b44:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8005b48:	9213      	str	r2, [sp, #76]	; 0x4c
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8005b4a:	9315      	str	r3, [sp, #84]	; 0x54
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8005b4c:	9411      	str	r4, [sp, #68]	; 0x44

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8005b4e:	950e      	str	r5, [sp, #56]	; 0x38
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8005b50:	9514      	str	r5, [sp, #80]	; 0x50
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8005b52:	9516      	str	r5, [sp, #88]	; 0x58
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8005b54:	9517      	str	r5, [sp, #92]	; 0x5c
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8005b56:	9610      	str	r6, [sp, #64]	; 0x40
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

	DMA_Init(DMA1_Stream7, &DMA_InitStructure);
 8005b58:	f7ff fcd2 	bl	8005500 <DMA_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	2004      	movs	r0, #4
 8005b60:	f7ff fd1e 	bl	80055a0 <RCC_APB1PeriphClockCmd>

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
 8005b64:	2368      	movs	r3, #104	; 0x68
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8005b66:	a901      	add	r1, sp, #4
 8005b68:	4821      	ldr	r0, [pc, #132]	; (8005bf0 <_Z12ws2812b_initv+0x1b0>)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
 8005b6a:	9302      	str	r3, [sp, #8]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8005b6c:	2401      	movs	r4, #1
	DMA_Init(DMA1_Stream7, &DMA_InitStructure);

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8005b6e:	f8ad 5004 	strh.w	r5, [sp, #4]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8005b72:	f8ad 5006 	strh.w	r5, [sp, #6]
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8005b76:	f8ad 500c 	strh.w	r5, [sp, #12]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8005b7a:	f88d 500e 	strb.w	r5, [sp, #14]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8005b7e:	f7ff fd1f 	bl	80055c0 <TIM_TimeBaseInit>

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8005b82:	2360      	movs	r3, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
 8005b84:	883a      	ldrh	r2, [r7, #0]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 8005b86:	481a      	ldr	r0, [pc, #104]	; (8005bf0 <_Z12ws2812b_initv+0x1b0>)
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8005b88:	f8ad 3010 	strh.w	r3, [sp, #16]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 8005b8c:	a904      	add	r1, sp, #16
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
 8005b8e:	9206      	str	r2, [sp, #24]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8005b90:	f8ad 501c 	strh.w	r5, [sp, #28]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8005b94:	f8ad 4012 	strh.w	r4, [sp, #18]
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 8005b98:	f7ff fd72 	bl	8005680 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8005b9c:	2108      	movs	r1, #8
 8005b9e:	4814      	ldr	r0, [pc, #80]	; (8005bf0 <_Z12ws2812b_initv+0x1b0>)
 8005ba0:	f7ff fdb6 	bl	8005710 <TIM_OC3PreloadConfig>

	// TIM4 counter enable
	TIM_Cmd(TIM4, ENABLE);
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	4812      	ldr	r0, [pc, #72]	; (8005bf0 <_Z12ws2812b_initv+0x1b0>)
 8005ba8:	f7ff fd5a 	bl	8005660 <TIM_Cmd>

	DMA_Cmd(DMA1_Stream7, ENABLE);
 8005bac:	4621      	mov	r1, r4
 8005bae:	480f      	ldr	r0, [pc, #60]	; (8005bec <_Z12ws2812b_initv+0x1ac>)
 8005bb0:	f7ff fcd6 	bl	8005560 <DMA_Cmd>

	// TIM4 Update DMA Request enable
	TIM_DMACmd(TIM4, TIM_DMA_CC3, ENABLE);
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	480d      	ldr	r0, [pc, #52]	; (8005bf0 <_Z12ws2812b_initv+0x1b0>)
 8005bba:	f7ff fdc1 	bl	8005740 <TIM_DMACmd>

	// Main Output Enable
	TIM_CtrlPWMOutputs(TIM4, ENABLE);
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	480b      	ldr	r0, [pc, #44]	; (8005bf0 <_Z12ws2812b_initv+0x1b0>)
 8005bc2:	f7ff fdad 	bl	8005720 <TIM_CtrlPWMOutputs>
}
 8005bc6:	b018      	add	sp, #96	; 0x60
 8005bc8:	ecbd 8b02 	vpop	{d8}
 8005bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd0:	200018f4 	.word	0x200018f4
 8005bd4:	20001908 	.word	0x20001908
 8005bd8:	200019f4 	.word	0x200019f4
 8005bdc:	200017f3 	.word	0x200017f3
 8005be0:	437f0000 	.word	0x437f0000
 8005be4:	400e38e4 	.word	0x400e38e4
 8005be8:	40020400 	.word	0x40020400
 8005bec:	400260b8 	.word	0x400260b8
 8005bf0:	40000800 	.word	0x40000800
 8005bf4:	200017f4 	.word	0x200017f4
 8005bf8:	4000083c 	.word	0x4000083c
 8005bfc:	00000000 	.word	0x00000000

08005c00 <_Z21ws2812b_set_led_colorim>:

void ws2812b_set_led_color(int led, uint32_t color) {
	if (led < WS2812B_LED_NUM) {
 8005c00:	2803      	cmp	r0, #3
 8005c02:	dc24      	bgt.n	8005c4e <_Z21ws2812b_set_led_colorim+0x4e>

	// Main Output Enable
	TIM_CtrlPWMOutputs(TIM4, ENABLE);
}

void ws2812b_set_led_color(int led, uint32_t color) {
 8005c04:	b430      	push	{r4, r5}
	if (led < WS2812B_LED_NUM) {
		RGBdata[led] = color;
 8005c06:	4a12      	ldr	r2, [pc, #72]	; (8005c50 <_Z21ws2812b_set_led_colorim+0x50>)
static uint32_t rgb_to_local(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
 8005c08:	4c12      	ldr	r4, [pc, #72]	; (8005c54 <_Z21ws2812b_set_led_colorim+0x54>)
	TIM_CtrlPWMOutputs(TIM4, ENABLE);
}

void ws2812b_set_led_color(int led, uint32_t color) {
	if (led < WS2812B_LED_NUM) {
		RGBdata[led] = color;
 8005c0a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
static uint32_t rgb_to_local(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
 8005c0e:	f3c1 4207 	ubfx	r2, r1, #16, #8
	g = gamma_table[g];
 8005c12:	f3c1 2507 	ubfx	r5, r1, #8, #8
static uint32_t rgb_to_local(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
 8005c16:	5ca2      	ldrb	r2, [r4, r2]
	g = gamma_table[g];
 8005c18:	5d65      	ldrb	r5, [r4, r5]
 8005c1a:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <_Z21ws2812b_set_led_colorim+0x58>)
	b = gamma_table[b];
 8005c1c:	b2c9      	uxtb	r1, r1
 8005c1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005c22:	5c61      	ldrb	r1, [r4, r1]
 8005c24:	0100      	lsls	r0, r0, #4

	return (g << 16) | (r << 8) | b;
 8005c26:	0212      	lsls	r2, r2, #8
 8005c28:	f100 0430 	add.w	r4, r0, #48	; 0x30
 8005c2c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8005c30:	430a      	orrs	r2, r1
 8005c32:	1919      	adds	r1, r3, r4
 8005c34:	4403      	add	r3, r0
		int bit;
		for (bit = 0;bit < 24;bit++) {
			if(color & (1 << 23)) {
				bitbuffer[bit + led * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + led * 24] = WS2812B_ZERO;
 8005c36:	2421      	movs	r4, #33	; 0x21
		color = rgb_to_local(color);

		int bit;
		for (bit = 0;bit < 24;bit++) {
			if(color & (1 << 23)) {
				bitbuffer[bit + led * 24] = WS2812B_ONE;
 8005c38:	2042      	movs	r0, #66	; 0x42

		color = rgb_to_local(color);

		int bit;
		for (bit = 0;bit < 24;bit++) {
			if(color & (1 << 23)) {
 8005c3a:	0215      	lsls	r5, r2, #8
				bitbuffer[bit + led * 24] = WS2812B_ONE;
 8005c3c:	bf4c      	ite	mi
 8005c3e:	8018      	strhmi	r0, [r3, #0]
			} else {
				bitbuffer[bit + led * 24] = WS2812B_ZERO;
 8005c40:	801c      	strhpl	r4, [r3, #0]
 8005c42:	3302      	adds	r3, #2
		RGBdata[led] = color;

		color = rgb_to_local(color);

		int bit;
		for (bit = 0;bit < 24;bit++) {
 8005c44:	428b      	cmp	r3, r1
			if(color & (1 << 23)) {
				bitbuffer[bit + led * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + led * 24] = WS2812B_ZERO;
			}
			color <<= 1;
 8005c46:	ea4f 0242 	mov.w	r2, r2, lsl #1
		RGBdata[led] = color;

		color = rgb_to_local(color);

		int bit;
		for (bit = 0;bit < 24;bit++) {
 8005c4a:	d1f6      	bne.n	8005c3a <_Z21ws2812b_set_led_colorim+0x3a>
				bitbuffer[bit + led * 24] = WS2812B_ZERO;
			}
			color <<= 1;
		}
	}
}
 8005c4c:	bc30      	pop	{r4, r5}
 8005c4e:	4770      	bx	lr
 8005c50:	200018f4 	.word	0x200018f4
 8005c54:	200017f4 	.word	0x200017f4
 8005c58:	20001908 	.word	0x20001908
 8005c5c:	00000000 	.word	0x00000000

08005c60 <_Z16bno055_read_addrh>:
{
	return bno055_read_addr(BNO055_SYS_ERR_ADDR);
}

uint8_t bno055_read_addr(uint8_t addr)
{
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	b086      	sub	sp, #24
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	uint8_t rxbuf[1];
	txbuf[0] = addr;
	i2cAcquireBus(&I2CD1);
 8005c64:	4c0b      	ldr	r4, [pc, #44]	; (8005c94 <_Z16bno055_read_addrh+0x34>)
uint8_t bno055_read_addr(uint8_t addr)
{
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	uint8_t rxbuf[1];
	txbuf[0] = addr;
 8005c66:	ad06      	add	r5, sp, #24
	i2cAcquireBus(&I2CD1);
	uint8_t stat = i2cMasterTransmitTimeout(&I2CD1, BNO055_ADDR, txbuf, 1, rxbuf, 1, tmo);
 8005c68:	ae05      	add	r6, sp, #20
uint8_t bno055_read_addr(uint8_t addr)
{
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	uint8_t rxbuf[1];
	txbuf[0] = addr;
 8005c6a:	f805 0d08 	strb.w	r0, [r5, #-8]!
	i2cAcquireBus(&I2CD1);
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f7fc f996 	bl	8001fa0 <i2cAcquireBus>
	uint8_t stat = i2cMasterTransmitTimeout(&I2CD1, BNO055_ADDR, txbuf, 1, rxbuf, 1, tmo);
 8005c74:	2128      	movs	r1, #40	; 0x28
 8005c76:	2301      	movs	r3, #1
 8005c78:	462a      	mov	r2, r5
 8005c7a:	9102      	str	r1, [sp, #8]
 8005c7c:	9301      	str	r3, [sp, #4]
 8005c7e:	4620      	mov	r0, r4
 8005c80:	9600      	str	r6, [sp, #0]
 8005c82:	f7fc f96d 	bl	8001f60 <i2cMasterTransmitTimeout>
	i2cReleaseBus(&I2CD1);
 8005c86:	4620      	mov	r0, r4
 8005c88:	f7fc f992 	bl	8001fb0 <i2cReleaseBus>
	return rxbuf[0];
}
 8005c8c:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8005c90:	b006      	add	sp, #24
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	20001018 	.word	0x20001018
	...

08005ca0 <_Z17bno055_get_statusv>:
	return vector;
}

uint8_t bno055_get_status()
{
	return bno055_read_addr(BNO055_SYS_STAT_ADDR);
 8005ca0:	2039      	movs	r0, #57	; 0x39
 8005ca2:	f7ff bfdd 	b.w	8005c60 <_Z16bno055_read_addrh>
 8005ca6:	bf00      	nop
	...

08005cb0 <_Z16bno055_get_errorv>:
}

uint8_t bno055_get_error()
{
	return bno055_read_addr(BNO055_SYS_ERR_ADDR);
 8005cb0:	203a      	movs	r0, #58	; 0x3a
 8005cb2:	f7ff bfd5 	b.w	8005c60 <_Z16bno055_read_addrh>
 8005cb6:	bf00      	nop
	...

08005cc0 <_Z15bno055_read_lenhhPh>:
	i2cReleaseBus(&I2CD1);
	return rxbuf[0];
}

void bno055_read_len(uint8_t addr, uint8_t len, uint8_t *buffer)
{
 8005cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cc2:	b087      	sub	sp, #28
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	txbuf[0] = addr;
	i2cAcquireBus(&I2CD1);
 8005cc4:	4c0b      	ldr	r4, [pc, #44]	; (8005cf4 <_Z15bno055_read_lenhhPh+0x34>)

void bno055_read_len(uint8_t addr, uint8_t len, uint8_t *buffer)
{
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	txbuf[0] = addr;
 8005cc6:	ad06      	add	r5, sp, #24
	i2cReleaseBus(&I2CD1);
	return rxbuf[0];
}

void bno055_read_len(uint8_t addr, uint8_t len, uint8_t *buffer)
{
 8005cc8:	460f      	mov	r7, r1
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	txbuf[0] = addr;
 8005cca:	f805 0d04 	strb.w	r0, [r5, #-4]!
	i2cAcquireBus(&I2CD1);
 8005cce:	4620      	mov	r0, r4
	i2cReleaseBus(&I2CD1);
	return rxbuf[0];
}

void bno055_read_len(uint8_t addr, uint8_t len, uint8_t *buffer)
{
 8005cd0:	4616      	mov	r6, r2
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	txbuf[0] = addr;
	i2cAcquireBus(&I2CD1);
 8005cd2:	f7fc f965 	bl	8001fa0 <i2cAcquireBus>
	uint8_t stat = i2cMasterTransmitTimeout(&I2CD1, BNO055_ADDR, txbuf, 1, buffer, len, tmo);
 8005cd6:	2128      	movs	r1, #40	; 0x28
 8005cd8:	462a      	mov	r2, r5
 8005cda:	9102      	str	r1, [sp, #8]
 8005cdc:	2301      	movs	r3, #1
 8005cde:	9701      	str	r7, [sp, #4]
 8005ce0:	9600      	str	r6, [sp, #0]
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f7fc f93c 	bl	8001f60 <i2cMasterTransmitTimeout>
	i2cReleaseBus(&I2CD1);
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f7fc f961 	bl	8001fb0 <i2cReleaseBus>
}
 8005cee:	b007      	add	sp, #28
 8005cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20001018 	.word	0x20001018
	...

08005d00 <_Z17bno055_get_vectorh>:
	chThdSleepMilliseconds(50);
	return true;
}

vector3 bno055_get_vector(uint8_t addr)
{
 8005d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d02:	ed2d 8b06 	vpush	{d8-d10}
 8005d06:	b08f      	sub	sp, #60	; 0x3c
	vector3 vector;
	uint8_t buffer[6];
	memset (buffer, 0, 6);
 8005d08:	2300      	movs	r3, #0
	bno055_read_len(addr, 6, buffer);
 8005d0a:	aa06      	add	r2, sp, #24
 8005d0c:	2106      	movs	r1, #6
	chThdSleepMilliseconds(50);
	return true;
}

vector3 bno055_get_vector(uint8_t addr)
{
 8005d0e:	4604      	mov	r4, r0
	vector3 vector;
	uint8_t buffer[6];
	memset (buffer, 0, 6);
 8005d10:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005d14:	9306      	str	r3, [sp, #24]
	bno055_read_len(addr, 6, buffer);
 8005d16:	f7ff ffd3 	bl	8005cc0 <_Z15bno055_read_lenhhPh>
	int16_t x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 8005d1a:	f89d 7019 	ldrb.w	r7, [sp, #25]
 8005d1e:	f89d 0018 	ldrb.w	r0, [sp, #24]
	int16_t y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 8005d22:	f89d 501b 	ldrb.w	r5, [sp, #27]
 8005d26:	f89d 101a 	ldrb.w	r1, [sp, #26]
	int16_t z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 8005d2a:	f89d 601d 	ldrb.w	r6, [sp, #29]
 8005d2e:	f89d 201c 	ldrb.w	r2, [sp, #28]
	switch(addr)
 8005d32:	f1a4 0308 	sub.w	r3, r4, #8
{
	vector3 vector;
	uint8_t buffer[6];
	memset (buffer, 0, 6);
	bno055_read_len(addr, 6, buffer);
	int16_t x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 8005d36:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
	int16_t y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 8005d3a:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
	int16_t z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 8005d3e:	ea42 2406 	orr.w	r4, r2, r6, lsl #8
	switch(addr)
 8005d42:	2b26      	cmp	r3, #38	; 0x26
 8005d44:	d830      	bhi.n	8005da8 <_Z17bno055_get_vectorh+0xa8>
 8005d46:	e8df f003 	tbb	[pc, r3]
 8005d4a:	2f14      	.short	0x2f14
 8005d4c:	2f2f2f2f 	.word	0x2f2f2f2f
 8005d50:	2f2f2f77 	.word	0x2f2f2f77
 8005d54:	2f5b2f2f 	.word	0x2f5b2f2f
 8005d58:	2f2f2f2f 	.word	0x2f2f2f2f
 8005d5c:	2f2f2f3f 	.word	0x2f2f2f3f
 8005d60:	2f2f2f2f 	.word	0x2f2f2f2f
 8005d64:	2f2f2f2f 	.word	0x2f2f2f2f
 8005d68:	2f142f2f 	.word	0x2f142f2f
 8005d6c:	2f2f2f2f 	.word	0x2f2f2f2f
 8005d70:	14          	.byte	0x14
 8005d71:	00          	.byte	0x00
		break;
	case VECTOR_ACCELEROMETER:
	case VECTOR_LINEARACCEL:
	case VECTOR_GRAVITY:
		/* 1m/s^2 = 100 LSB */
		vector.x = ((double)x)/100.0;
 8005d72:	b200      	sxth	r0, r0
 8005d74:	f7fa fc16 	bl	80005a4 <__aeabi_i2d>
 8005d78:	2200      	movs	r2, #0
 8005d7a:	4b3d      	ldr	r3, [pc, #244]	; (8005e70 <_Z17bno055_get_vectorh+0x170>)
 8005d7c:	f7fa fda2 	bl	80008c4 <__aeabi_ddiv>
 8005d80:	ec41 0b1a 	vmov	d10, r0, r1
		vector.y = ((double)y)/100.0;
 8005d84:	b228      	sxth	r0, r5
 8005d86:	f7fa fc0d 	bl	80005a4 <__aeabi_i2d>
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	4b38      	ldr	r3, [pc, #224]	; (8005e70 <_Z17bno055_get_vectorh+0x170>)
 8005d8e:	f7fa fd99 	bl	80008c4 <__aeabi_ddiv>
 8005d92:	ec41 0b19 	vmov	d9, r0, r1
		vector.z = ((double)z)/100.0;
 8005d96:	b220      	sxth	r0, r4
 8005d98:	f7fa fc04 	bl	80005a4 <__aeabi_i2d>
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	4b34      	ldr	r3, [pc, #208]	; (8005e70 <_Z17bno055_get_vectorh+0x170>)
 8005da0:	f7fa fd90 	bl	80008c4 <__aeabi_ddiv>
 8005da4:	ec41 0b18 	vmov	d8, r0, r1
		break;
	}

	return vector;
}
 8005da8:	eeb0 0a4a 	vmov.f32	s0, s20
 8005dac:	eef0 0a6a 	vmov.f32	s1, s21
 8005db0:	eeb0 1a49 	vmov.f32	s2, s18
 8005db4:	eef0 1a69 	vmov.f32	s3, s19
 8005db8:	eeb0 2a48 	vmov.f32	s4, s16
 8005dbc:	eef0 2a68 	vmov.f32	s5, s17
 8005dc0:	b00f      	add	sp, #60	; 0x3c
 8005dc2:	ecbd 8b06 	vpop	{d8-d10}
 8005dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		vector.y = ((double)y)/900.0;
		vector.z = ((double)z)/900.0;
		break;
	case VECTOR_EULER:
		/* 1 degree = 16 LSB */
		vector.z = ((double)x)/16.0;
 8005dc8:	b200      	sxth	r0, r0
 8005dca:	f7fa fbeb 	bl	80005a4 <__aeabi_i2d>
 8005dce:	2200      	movs	r2, #0
 8005dd0:	4b28      	ldr	r3, [pc, #160]	; (8005e74 <_Z17bno055_get_vectorh+0x174>)
 8005dd2:	f7fa fc4d 	bl	8000670 <__aeabi_dmul>
 8005dd6:	ec41 0b18 	vmov	d8, r0, r1
		vector.y = ((double)y)/16.0;
 8005dda:	b228      	sxth	r0, r5
 8005ddc:	f7fa fbe2 	bl	80005a4 <__aeabi_i2d>
 8005de0:	2200      	movs	r2, #0
 8005de2:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <_Z17bno055_get_vectorh+0x174>)
 8005de4:	f7fa fc44 	bl	8000670 <__aeabi_dmul>
 8005de8:	ec41 0b19 	vmov	d9, r0, r1
		vector.x = ((double)z)/16.0;
 8005dec:	b220      	sxth	r0, r4
 8005dee:	f7fa fbd9 	bl	80005a4 <__aeabi_i2d>
 8005df2:	2200      	movs	r2, #0
 8005df4:	4b1f      	ldr	r3, [pc, #124]	; (8005e74 <_Z17bno055_get_vectorh+0x174>)
 8005df6:	f7fa fc3b 	bl	8000670 <__aeabi_dmul>
 8005dfa:	ec41 0b1a 	vmov	d10, r0, r1
		break;
 8005dfe:	e7d3      	b.n	8005da8 <_Z17bno055_get_vectorh+0xa8>
		vector.y = ((double)y)/16.0;
		vector.z = ((double)z)/16.0;
		break;
	case VECTOR_GYROSCOPE:
		/* 1rps = 900 LSB */
		vector.x = ((double)x)/900.0;
 8005e00:	b200      	sxth	r0, r0
 8005e02:	f7fa fbcf 	bl	80005a4 <__aeabi_i2d>
 8005e06:	2200      	movs	r2, #0
 8005e08:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <_Z17bno055_get_vectorh+0x178>)
 8005e0a:	f7fa fd5b 	bl	80008c4 <__aeabi_ddiv>
 8005e0e:	ec41 0b1a 	vmov	d10, r0, r1
		vector.y = ((double)y)/900.0;
 8005e12:	b228      	sxth	r0, r5
 8005e14:	f7fa fbc6 	bl	80005a4 <__aeabi_i2d>
 8005e18:	2200      	movs	r2, #0
 8005e1a:	4b17      	ldr	r3, [pc, #92]	; (8005e78 <_Z17bno055_get_vectorh+0x178>)
 8005e1c:	f7fa fd52 	bl	80008c4 <__aeabi_ddiv>
 8005e20:	ec41 0b19 	vmov	d9, r0, r1
		vector.z = ((double)z)/900.0;
 8005e24:	b220      	sxth	r0, r4
 8005e26:	f7fa fbbd 	bl	80005a4 <__aeabi_i2d>
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <_Z17bno055_get_vectorh+0x178>)
 8005e2e:	f7fa fd49 	bl	80008c4 <__aeabi_ddiv>
 8005e32:	ec41 0b18 	vmov	d8, r0, r1
		break;
 8005e36:	e7b7      	b.n	8005da8 <_Z17bno055_get_vectorh+0xa8>
	int16_t z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
	switch(addr)
	{
	case VECTOR_MAGNETOMETER:
		/* 1uT = 16 LSB */
		vector.x = ((double)x)/16.0;
 8005e38:	b200      	sxth	r0, r0
 8005e3a:	f7fa fbb3 	bl	80005a4 <__aeabi_i2d>
 8005e3e:	2200      	movs	r2, #0
 8005e40:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <_Z17bno055_get_vectorh+0x174>)
 8005e42:	f7fa fc15 	bl	8000670 <__aeabi_dmul>
 8005e46:	ec41 0b1a 	vmov	d10, r0, r1
		vector.y = ((double)y)/16.0;
 8005e4a:	b228      	sxth	r0, r5
 8005e4c:	f7fa fbaa 	bl	80005a4 <__aeabi_i2d>
 8005e50:	2200      	movs	r2, #0
 8005e52:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <_Z17bno055_get_vectorh+0x174>)
 8005e54:	f7fa fc0c 	bl	8000670 <__aeabi_dmul>
 8005e58:	ec41 0b19 	vmov	d9, r0, r1
		vector.z = ((double)z)/16.0;
 8005e5c:	b220      	sxth	r0, r4
 8005e5e:	f7fa fba1 	bl	80005a4 <__aeabi_i2d>
 8005e62:	2200      	movs	r2, #0
 8005e64:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <_Z17bno055_get_vectorh+0x174>)
 8005e66:	f7fa fc03 	bl	8000670 <__aeabi_dmul>
 8005e6a:	ec41 0b18 	vmov	d8, r0, r1
		break;
 8005e6e:	e79b      	b.n	8005da8 <_Z17bno055_get_vectorh+0xa8>
 8005e70:	40590000 	.word	0x40590000
 8005e74:	3fb00000 	.word	0x3fb00000
 8005e78:	408c2000 	.word	0x408c2000
 8005e7c:	00000000 	.word	0x00000000

08005e80 <_Z17bno055_write_addrhh>:
	uint8_t stat = i2cMasterTransmitTimeout(&I2CD1, BNO055_ADDR, txbuf, 1, buffer, len, tmo);
	i2cReleaseBus(&I2CD1);
}

void bno055_write_addr(uint8_t addr, uint8_t value)
{
 8005e80:	b510      	push	{r4, lr}
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[2];
	uint8_t rxbuf[1];
	txbuf[0] = addr;
	txbuf[1] = value;
	i2cAcquireBus(&I2CD1);
 8005e82:	4c0c      	ldr	r4, [pc, #48]	; (8005eb4 <_Z17bno055_write_addrhh+0x34>)
	uint8_t stat = i2cMasterTransmitTimeout(&I2CD1, BNO055_ADDR, txbuf, 1, buffer, len, tmo);
	i2cReleaseBus(&I2CD1);
}

void bno055_write_addr(uint8_t addr, uint8_t value)
{
 8005e84:	b086      	sub	sp, #24
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[2];
	uint8_t rxbuf[1];
	txbuf[0] = addr;
 8005e86:	f88d 0014 	strb.w	r0, [sp, #20]
	txbuf[1] = value;
	i2cAcquireBus(&I2CD1);
 8005e8a:	4620      	mov	r0, r4
{
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[2];
	uint8_t rxbuf[1];
	txbuf[0] = addr;
	txbuf[1] = value;
 8005e8c:	f88d 1015 	strb.w	r1, [sp, #21]
	i2cAcquireBus(&I2CD1);
 8005e90:	f7fc f886 	bl	8001fa0 <i2cAcquireBus>
	uint8_t stat = i2cMasterTransmitTimeout(&I2CD1, BNO055_ADDR, txbuf, 2, rxbuf, 0, tmo);
 8005e94:	2128      	movs	r1, #40	; 0x28
 8005e96:	ab04      	add	r3, sp, #16
 8005e98:	2200      	movs	r2, #0
 8005e9a:	9102      	str	r1, [sp, #8]
 8005e9c:	9201      	str	r2, [sp, #4]
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	aa05      	add	r2, sp, #20
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7fc f85b 	bl	8001f60 <i2cMasterTransmitTimeout>
	i2cReleaseBus(&I2CD1);
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f7fc f880 	bl	8001fb0 <i2cReleaseBus>
 8005eb0:	b006      	add	sp, #24
 8005eb2:	bd10      	pop	{r4, pc}
 8005eb4:	20001018 	.word	0x20001018
	...

08005ec0 <_Z11bno055_initv>:
    100000,
    STD_DUTY_CYCLE,
};

bool bno055_init()
{
 8005ec0:	b508      	push	{r3, lr}
	i2cStart(&I2CD1, &i2ccfg);
 8005ec2:	492b      	ldr	r1, [pc, #172]	; (8005f70 <_Z11bno055_initv+0xb0>)
 8005ec4:	482b      	ldr	r0, [pc, #172]	; (8005f74 <_Z11bno055_initv+0xb4>)
 8005ec6:	f7fc f83b 	bl	8001f40 <i2cStart>
	palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN);
 8005eca:	f240 2206 	movw	r2, #518	; 0x206
 8005ece:	2140      	movs	r1, #64	; 0x40
 8005ed0:	4829      	ldr	r0, [pc, #164]	; (8005f78 <_Z11bno055_initv+0xb8>)
 8005ed2:	f7fd fd1d 	bl	8003910 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN);
 8005ed6:	f240 2206 	movw	r2, #518	; 0x206
 8005eda:	2180      	movs	r1, #128	; 0x80
 8005edc:	4826      	ldr	r0, [pc, #152]	; (8005f78 <_Z11bno055_initv+0xb8>)
 8005ede:	f7fd fd17 	bl	8003910 <_pal_lld_setgroupmode>
	uint8_t id = bno055_read_addr(BNO055_CHIP_ID_ADDR);
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	f7ff febc 	bl	8005c60 <_Z16bno055_read_addrh>
	if(id != BNO055_ID)
 8005ee8:	28a0      	cmp	r0, #160	; 0xa0
 8005eea:	d00a      	beq.n	8005f02 <_Z11bno055_initv+0x42>
	{
	    chThdSleepMilliseconds(1000);
 8005eec:	f242 7010 	movw	r0, #10000	; 0x2710
 8005ef0:	f7fb fab6 	bl	8001460 <chThdSleep>
		id = bno055_read_addr(BNO055_CHIP_ID_ADDR);
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	f7ff feb3 	bl	8005c60 <_Z16bno055_read_addrh>
		if(id != BNO055_ID) {
 8005efa:	28a0      	cmp	r0, #160	; 0xa0
 8005efc:	d001      	beq.n	8005f02 <_Z11bno055_initv+0x42>
			return false;
 8005efe:	2000      	movs	r0, #0
	bno055_write_addr(BNO055_SYS_TRIGGER_ADDR, 0x80);
	chThdSleepMilliseconds(10);
	bno055_write_addr(BNO055_OPR_MODE_ADDR, OPERATION_MODE_NDOF);
	chThdSleepMilliseconds(50);
	return true;
}
 8005f00:	bd08      	pop	{r3, pc}
		id = bno055_read_addr(BNO055_CHIP_ID_ADDR);
		if(id != BNO055_ID) {
			return false;
		}
	}
	bno055_write_addr(BNO055_OPR_MODE_ADDR, OPERATION_MODE_CONFIG);
 8005f02:	2100      	movs	r1, #0
 8005f04:	203d      	movs	r0, #61	; 0x3d
 8005f06:	f7ff ffbb 	bl	8005e80 <_Z17bno055_write_addrhh>
	chThdSleepMilliseconds(30);
 8005f0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005f0e:	f7fb faa7 	bl	8001460 <chThdSleep>
	bno055_write_addr(BNO055_SYS_TRIGGER_ADDR, 0x20);
 8005f12:	2120      	movs	r1, #32
 8005f14:	203f      	movs	r0, #63	; 0x3f
 8005f16:	f7ff ffb3 	bl	8005e80 <_Z17bno055_write_addrhh>
 8005f1a:	e001      	b.n	8005f20 <_Z11bno055_initv+0x60>
	while (bno055_read_addr(BNO055_CHIP_ID_ADDR) != BNO055_ID)
	{
		chThdSleepMilliseconds(10);
 8005f1c:	f7fb faa0 	bl	8001460 <chThdSleep>
		}
	}
	bno055_write_addr(BNO055_OPR_MODE_ADDR, OPERATION_MODE_CONFIG);
	chThdSleepMilliseconds(30);
	bno055_write_addr(BNO055_SYS_TRIGGER_ADDR, 0x20);
	while (bno055_read_addr(BNO055_CHIP_ID_ADDR) != BNO055_ID)
 8005f20:	2000      	movs	r0, #0
 8005f22:	f7ff fe9d 	bl	8005c60 <_Z16bno055_read_addrh>
 8005f26:	28a0      	cmp	r0, #160	; 0xa0
	{
		chThdSleepMilliseconds(10);
 8005f28:	f04f 0064 	mov.w	r0, #100	; 0x64
		}
	}
	bno055_write_addr(BNO055_OPR_MODE_ADDR, OPERATION_MODE_CONFIG);
	chThdSleepMilliseconds(30);
	bno055_write_addr(BNO055_SYS_TRIGGER_ADDR, 0x20);
	while (bno055_read_addr(BNO055_CHIP_ID_ADDR) != BNO055_ID)
 8005f2c:	d1f6      	bne.n	8005f1c <_Z11bno055_initv+0x5c>
	{
		chThdSleepMilliseconds(10);
	}
	chThdSleepMilliseconds(50);
 8005f2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f32:	f7fb fa95 	bl	8001460 <chThdSleep>

	/* Set to normal power mode */
	bno055_write_addr(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
 8005f36:	2100      	movs	r1, #0
 8005f38:	203e      	movs	r0, #62	; 0x3e
 8005f3a:	f7ff ffa1 	bl	8005e80 <_Z17bno055_write_addrhh>
	chThdSleepMilliseconds(10);
 8005f3e:	2064      	movs	r0, #100	; 0x64
 8005f40:	f7fb fa8e 	bl	8001460 <chThdSleep>

	bno055_write_addr(BNO055_PAGE_ID_ADDR, 0);
 8005f44:	2100      	movs	r1, #0
 8005f46:	2007      	movs	r0, #7
 8005f48:	f7ff ff9a 	bl	8005e80 <_Z17bno055_write_addrhh>
	bno055_write_addr(BNO055_SYS_TRIGGER_ADDR, 0x80);
 8005f4c:	2180      	movs	r1, #128	; 0x80
 8005f4e:	203f      	movs	r0, #63	; 0x3f
 8005f50:	f7ff ff96 	bl	8005e80 <_Z17bno055_write_addrhh>
	chThdSleepMilliseconds(10);
 8005f54:	2064      	movs	r0, #100	; 0x64
 8005f56:	f7fb fa83 	bl	8001460 <chThdSleep>
	bno055_write_addr(BNO055_OPR_MODE_ADDR, OPERATION_MODE_NDOF);
 8005f5a:	210c      	movs	r1, #12
 8005f5c:	203d      	movs	r0, #61	; 0x3d
 8005f5e:	f7ff ff8f 	bl	8005e80 <_Z17bno055_write_addrhh>
	chThdSleepMilliseconds(50);
 8005f62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f66:	f7fb fa7b 	bl	8001460 <chThdSleep>
	return true;
 8005f6a:	2001      	movs	r0, #1
 8005f6c:	bd08      	pop	{r3, pc}
 8005f6e:	bf00      	nop
 8005f70:	08007e20 	.word	0x08007e20
 8005f74:	20001018 	.word	0x20001018
 8005f78:	40020400 	.word	0x40020400
 8005f7c:	00000000 	.word	0x00000000

08005f80 <_ZL14nrfExtCallbackP9EXTDriverm>:
NRF24L01Driver nrf24l01;
static const uint8_t tx_addr[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
static const uint8_t rx_addr[5] = {0xC1, 0xC1, 0xC1, 0xC1, 0xC1};

static void nrfExtCallback(EXTDriver *extp, expchannel_t channel)
{
 8005f80:	b508      	push	{r3, lr}
 8005f82:	2320      	movs	r3, #32
 8005f84:	f383 8811 	msr	BASEPRI, r3
}

void nrf24l01ExtIRQ(NRF24L01Driver *nrfp)
{
    chSysLockFromISR();
    chEvtBroadcastFlagsI(&nrfp->eventSource, NRF24L01_EVENT_IRQ);
 8005f88:	2101      	movs	r1, #1
 8005f8a:	4803      	ldr	r0, [pc, #12]	; (8005f98 <_ZL14nrfExtCallbackP9EXTDriverm+0x18>)
 8005f8c:	f7fb fc48 	bl	8001820 <chEvtBroadcastFlagsI>
 8005f90:	2300      	movs	r3, #0
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	bd08      	pop	{r3, pc}
 8005f98:	20001b7c 	.word	0x20001b7c
 8005f9c:	00000000 	.word	0x00000000

08005fa0 <_Z19nrf24l01ReadPayloadP14NRF24L01DriverhPhS1_.part.2>:
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_DYNPD);
    reg &= ~(pipes & 0x3F);
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
}

void nrf24l01ReadPayload(NRF24L01Driver *nrfp, uint8_t size, uint8_t *data, uint8_t *pipe)
 8005fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	4604      	mov	r4, r0
{
    if (size > 32)
        return;

    uint8_t op = NRF24L01_CMD_R_RX_PAYLOAD;
 8005fa6:	2561      	movs	r5, #97	; 0x61
    uint8_t status;

    spiSelect(nrfp->config->spip);
 8005fa8:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
void nrf24l01ReadPayload(NRF24L01Driver *nrfp, uint8_t size, uint8_t *data, uint8_t *pipe)
{
    if (size > 32)
        return;

    uint8_t op = NRF24L01_CMD_R_RX_PAYLOAD;
 8005fac:	f88d 5006 	strb.w	r5, [sp, #6]
    uint8_t status;

    spiSelect(nrfp->config->spip);
 8005fb0:	6800      	ldr	r0, [r0, #0]
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_DYNPD);
    reg &= ~(pipes & 0x3F);
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
}

void nrf24l01ReadPayload(NRF24L01Driver *nrfp, uint8_t size, uint8_t *data, uint8_t *pipe)
 8005fb2:	460e      	mov	r6, r1
 8005fb4:	4617      	mov	r7, r2
 8005fb6:	461d      	mov	r5, r3
        return;

    uint8_t op = NRF24L01_CMD_R_RX_PAYLOAD;
    uint8_t status;

    spiSelect(nrfp->config->spip);
 8005fb8:	f7fc fa72 	bl	80024a0 <spiSelect>
    spiExchange(nrfp->config->spip, 1, &op, &status);
 8005fbc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005fc0:	f10d 0307 	add.w	r3, sp, #7
 8005fc4:	6810      	ldr	r0, [r2, #0]
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	f10d 0206 	add.w	r2, sp, #6
 8005fcc:	f7fc fa88 	bl	80024e0 <spiExchange>
    spiReceive(nrfp->config->spip, size, data);
 8005fd0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005fd4:	463a      	mov	r2, r7
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	f7fc fab1 	bl	8002540 <spiReceive>
    spiUnselect(nrfp->config->spip);
 8005fde:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	f7fc fa6c 	bl	80024c0 <spiUnselect>

    *pipe = (status >> 1) & 0x7;
 8005fe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005fec:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005ff0:	702b      	strb	r3, [r5, #0]
}
 8005ff2:	b003      	add	sp, #12
 8005ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff6:	bf00      	nop
	...

08006000 <_Z20nrf24l01WritePayloadP14NRF24L01DriverhPKh.part.3>:

void nrf24l01WritePayload(NRF24L01Driver *nrfp, uint8_t size, const uint8_t *data)
 8006000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006002:	b083      	sub	sp, #12
 8006004:	4604      	mov	r4, r0
{
    if (size > 32)
        return;

    uint8_t op = NRF24L01_CMD_W_TX_PAYLOAD_NO_ACK;
 8006006:	ad02      	add	r5, sp, #8
 8006008:	20b0      	movs	r0, #176	; 0xb0

    spiSelect(nrfp->config->spip);
 800600a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
void nrf24l01WritePayload(NRF24L01Driver *nrfp, uint8_t size, const uint8_t *data)
{
    if (size > 32)
        return;

    uint8_t op = NRF24L01_CMD_W_TX_PAYLOAD_NO_ACK;
 800600e:	f805 0d01 	strb.w	r0, [r5, #-1]!

    spiSelect(nrfp->config->spip);
 8006012:	6818      	ldr	r0, [r3, #0]
    spiUnselect(nrfp->config->spip);

    *pipe = (status >> 1) & 0x7;
}

void nrf24l01WritePayload(NRF24L01Driver *nrfp, uint8_t size, const uint8_t *data)
 8006014:	460e      	mov	r6, r1
 8006016:	4617      	mov	r7, r2
    if (size > 32)
        return;

    uint8_t op = NRF24L01_CMD_W_TX_PAYLOAD_NO_ACK;

    spiSelect(nrfp->config->spip);
 8006018:	f7fc fa42 	bl	80024a0 <spiSelect>
    spiSend(nrfp->config->spip, 1, &op);
 800601c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006020:	462a      	mov	r2, r5
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	2101      	movs	r1, #1
 8006026:	f7fc fa73 	bl	8002510 <spiSend>
    spiSend(nrfp->config->spip, size, data);
 800602a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800602e:	463a      	mov	r2, r7
 8006030:	4631      	mov	r1, r6
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	f7fc fa6c 	bl	8002510 <spiSend>
    spiUnselect(nrfp->config->spip);
 8006038:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	f7fc fa3f 	bl	80024c0 <spiUnselect>
}
 8006042:	b003      	add	sp, #12
 8006044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006046:	bf00      	nop
	...

08006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>:
{
    nrfp->config = config;
}

void nrf24l01WriteRegister(NRF24L01Driver *nrfp, uint8_t reg, uint8_t value)
{
 8006050:	b510      	push	{r4, lr}
    uint8_t op[2] = {NRF24L01_CMD_W_REGISTER | (reg & 0x1F), value};
 8006052:	f001 011f 	and.w	r1, r1, #31
{
    nrfp->config = config;
}

void nrf24l01WriteRegister(NRF24L01Driver *nrfp, uint8_t reg, uint8_t value)
{
 8006056:	b082      	sub	sp, #8
    uint8_t op[2] = {NRF24L01_CMD_W_REGISTER | (reg & 0x1F), value};
 8006058:	f041 0120 	orr.w	r1, r1, #32

    spiSelect(nrfp->config->spip);
 800605c:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    nrfp->config = config;
}

void nrf24l01WriteRegister(NRF24L01Driver *nrfp, uint8_t reg, uint8_t value)
{
    uint8_t op[2] = {NRF24L01_CMD_W_REGISTER | (reg & 0x1F), value};
 8006060:	f88d 1004 	strb.w	r1, [sp, #4]
{
    nrfp->config = config;
}

void nrf24l01WriteRegister(NRF24L01Driver *nrfp, uint8_t reg, uint8_t value)
{
 8006064:	4604      	mov	r4, r0
    uint8_t op[2] = {NRF24L01_CMD_W_REGISTER | (reg & 0x1F), value};
 8006066:	f88d 2005 	strb.w	r2, [sp, #5]

    spiSelect(nrfp->config->spip);
 800606a:	6818      	ldr	r0, [r3, #0]
 800606c:	f7fc fa18 	bl	80024a0 <spiSelect>
    spiSend(nrfp->config->spip, 2, op);
 8006070:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006074:	aa01      	add	r2, sp, #4
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	2102      	movs	r1, #2
 800607a:	f7fc fa49 	bl	8002510 <spiSend>
    spiUnselect(nrfp->config->spip);
 800607e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	f7fc fa1c 	bl	80024c0 <spiUnselect>
}
 8006088:	b002      	add	sp, #8
 800608a:	bd10      	pop	{r4, pc}
 800608c:	0000      	movs	r0, r0
	...

08006090 <_Z20nrf24l01ReadRegisterP14NRF24L01Driverh>:

uint8_t nrf24l01ReadRegister(NRF24L01Driver *nrfp, uint8_t reg)
{
 8006090:	b510      	push	{r4, lr}
 8006092:	b082      	sub	sp, #8
    uint8_t op[2] = {NRF24L01_CMD_R_REGISTER | (reg & 0x1F), 0};
 8006094:	2300      	movs	r3, #0
 8006096:	f001 011f 	and.w	r1, r1, #31
    uint8_t data[2] = {0, 0};

    spiSelect(nrfp->config->spip);
 800609a:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01ReadRegister(NRF24L01Driver *nrfp, uint8_t reg)
{
    uint8_t op[2] = {NRF24L01_CMD_R_REGISTER | (reg & 0x1F), 0};
 800609e:	f8ad 3000 	strh.w	r3, [sp]
    spiSend(nrfp->config->spip, 2, op);
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01ReadRegister(NRF24L01Driver *nrfp, uint8_t reg)
{
 80060a2:	4604      	mov	r4, r0
    uint8_t op[2] = {NRF24L01_CMD_R_REGISTER | (reg & 0x1F), 0};
    uint8_t data[2] = {0, 0};
 80060a4:	f88d 3004 	strb.w	r3, [sp, #4]
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01ReadRegister(NRF24L01Driver *nrfp, uint8_t reg)
{
    uint8_t op[2] = {NRF24L01_CMD_R_REGISTER | (reg & 0x1F), 0};
 80060a8:	f88d 1000 	strb.w	r1, [sp]
    uint8_t data[2] = {0, 0};
 80060ac:	f88d 3005 	strb.w	r3, [sp, #5]

    spiSelect(nrfp->config->spip);
 80060b0:	6810      	ldr	r0, [r2, #0]
 80060b2:	f7fc f9f5 	bl	80024a0 <spiSelect>
    spiExchange(nrfp->config->spip, 2, op, data);
 80060b6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80060ba:	ab01      	add	r3, sp, #4
 80060bc:	6810      	ldr	r0, [r2, #0]
 80060be:	2102      	movs	r1, #2
 80060c0:	466a      	mov	r2, sp
 80060c2:	f7fc fa0d 	bl	80024e0 <spiExchange>
    spiUnselect(nrfp->config->spip);
 80060c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	f7fc f9f8 	bl	80024c0 <spiUnselect>

    return data[1];
}
 80060d0:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80060d4:	b002      	add	sp, #8
 80060d6:	bd10      	pop	{r4, pc}
	...

080060e0 <_Z28nrf24l01WriteAddressRegisterP14NRF24L01DriverhPKh>:

void nrf24l01WriteAddressRegister(NRF24L01Driver *nrfp, uint8_t reg, const uint8_t value[5])
{
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	b082      	sub	sp, #8
    uint8_t op = NRF24L01_CMD_W_REGISTER | (reg & 0x1F);
 80060e4:	ad02      	add	r5, sp, #8
 80060e6:	f001 011f 	and.w	r1, r1, #31
 80060ea:	f041 0120 	orr.w	r1, r1, #32
 80060ee:	f805 1d01 	strb.w	r1, [r5, #-1]!

    spiSelect(nrfp->config->spip);
 80060f2:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124

    return data[1];
}

void nrf24l01WriteAddressRegister(NRF24L01Driver *nrfp, uint8_t reg, const uint8_t value[5])
{
 80060f6:	4604      	mov	r4, r0
    uint8_t op = NRF24L01_CMD_W_REGISTER | (reg & 0x1F);

    spiSelect(nrfp->config->spip);
 80060f8:	6818      	ldr	r0, [r3, #0]

    return data[1];
}

void nrf24l01WriteAddressRegister(NRF24L01Driver *nrfp, uint8_t reg, const uint8_t value[5])
{
 80060fa:	4616      	mov	r6, r2
    uint8_t op = NRF24L01_CMD_W_REGISTER | (reg & 0x1F);

    spiSelect(nrfp->config->spip);
 80060fc:	f7fc f9d0 	bl	80024a0 <spiSelect>
    spiSend(nrfp->config->spip, 1, &op);
 8006100:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006104:	462a      	mov	r2, r5
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	2101      	movs	r1, #1
 800610a:	f7fc fa01 	bl	8002510 <spiSend>
    spiSend(nrfp->config->spip, 5, value);
 800610e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006112:	4632      	mov	r2, r6
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	2105      	movs	r1, #5
 8006118:	f7fc f9fa 	bl	8002510 <spiSend>
    spiUnselect(nrfp->config->spip);
 800611c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	f7fc f9cd 	bl	80024c0 <spiUnselect>
}
 8006126:	b002      	add	sp, #8
 8006128:	bd70      	pop	{r4, r5, r6, pc}
 800612a:	bf00      	nop
 800612c:	0000      	movs	r0, r0
	...

08006130 <_Z17nrf24l01GetStatusP14NRF24L01Driver>:
    spiReceive(nrfp->config->spip, 5, value);
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01GetStatus(NRF24L01Driver *nrfp)
{
 8006130:	b510      	push	{r4, lr}
 8006132:	b082      	sub	sp, #8
    uint8_t op = NRF24L01_CMD_NOP;
 8006134:	22ff      	movs	r2, #255	; 0xff
    uint8_t data;

    spiSelect(nrfp->config->spip);
 8006136:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01GetStatus(NRF24L01Driver *nrfp)
{
    uint8_t op = NRF24L01_CMD_NOP;
 800613a:	f88d 2006 	strb.w	r2, [sp, #6]
    spiReceive(nrfp->config->spip, 5, value);
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01GetStatus(NRF24L01Driver *nrfp)
{
 800613e:	4604      	mov	r4, r0
    uint8_t op = NRF24L01_CMD_NOP;
    uint8_t data;

    spiSelect(nrfp->config->spip);
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	f7fc f9ad 	bl	80024a0 <spiSelect>
    spiExchange(nrfp->config->spip, 1, &op, &data);
 8006146:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800614a:	f10d 0307 	add.w	r3, sp, #7
 800614e:	6810      	ldr	r0, [r2, #0]
 8006150:	2101      	movs	r1, #1
 8006152:	f10d 0206 	add.w	r2, sp, #6
 8006156:	f7fc f9c3 	bl	80024e0 <spiExchange>
    spiUnselect(nrfp->config->spip);
 800615a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	f7fc f9ae 	bl	80024c0 <spiUnselect>

    return data;
}
 8006164:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006168:	b002      	add	sp, #8
 800616a:	bd10      	pop	{r4, pc}
 800616c:	0000      	movs	r0, r0
	...

08006170 <_Z15nrf24l01PowerUpP14NRF24L01Driver>:

void nrf24l01PowerUp(NRF24L01Driver *nrfp)
{
 8006170:	b510      	push	{r4, lr}
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 8006172:	2100      	movs	r1, #0

    return data;
}

void nrf24l01PowerUp(NRF24L01Driver *nrfp)
{
 8006174:	4604      	mov	r4, r0
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 8006176:	f7ff ff8b 	bl	8006090 <_Z20nrf24l01ReadRegisterP14NRF24L01Driverh>
    reg |= NRF24L01_PWR_UP;
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
 800617a:	f040 0202 	orr.w	r2, r0, #2
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	4620      	mov	r0, r4
 8006182:	2100      	movs	r1, #0
}
 8006184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void nrf24l01PowerUp(NRF24L01Driver *nrfp)
{
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
    reg |= NRF24L01_PWR_UP;
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
 8006188:	f7ff bf62 	b.w	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>
 800618c:	0000      	movs	r0, r0
	...

08006190 <_Z29nrf24l01EnableDynamicPipeSizeP14NRF24L01Driverh>:
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_FEATURE, reg);
    }
}

void nrf24l01EnableDynamicPipeSize(NRF24L01Driver *nrfp, uint8_t pipes)
{
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	460c      	mov	r4, r1
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_DYNPD);
 8006194:	211c      	movs	r1, #28
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_FEATURE, reg);
    }
}

void nrf24l01EnableDynamicPipeSize(NRF24L01Driver *nrfp, uint8_t pipes)
{
 8006196:	4605      	mov	r5, r0
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_DYNPD);
 8006198:	f7ff ff7a 	bl	8006090 <_Z20nrf24l01ReadRegisterP14NRF24L01Driverh>
    reg |= pipes & 0x3F;
 800619c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 80061a0:	ea44 0200 	orr.w	r2, r4, r0
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	4628      	mov	r0, r5
 80061a8:	211c      	movs	r1, #28
}
 80061aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void nrf24l01EnableDynamicPipeSize(NRF24L01Driver *nrfp, uint8_t pipes)
{
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_DYNPD);
    reg |= pipes & 0x3F;
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
 80061ae:	f7ff bf4f 	b.w	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>
 80061b2:	bf00      	nop
	...

080061c0 <_Z22nrf24l01ToggleFeaturesP14NRF24L01Driver>:
    spiSend(nrfp->config->spip, size, data);
    spiUnselect(nrfp->config->spip);
}

void nrf24l01ToggleFeatures(NRF24L01Driver *nrfp)
{
 80061c0:	b510      	push	{r4, lr}
    uint8_t op[2] = {NRF24L01_CMD_ACTIVATE, 0x73};
 80061c2:	4a0c      	ldr	r2, [pc, #48]	; (80061f4 <_Z22nrf24l01ToggleFeaturesP14NRF24L01Driver+0x34>)

    spiSelect(nrfp->config->spip);
 80061c4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    spiUnselect(nrfp->config->spip);
}

void nrf24l01ToggleFeatures(NRF24L01Driver *nrfp)
{
    uint8_t op[2] = {NRF24L01_CMD_ACTIVATE, 0x73};
 80061c8:	8812      	ldrh	r2, [r2, #0]
    spiSend(nrfp->config->spip, size, data);
    spiUnselect(nrfp->config->spip);
}

void nrf24l01ToggleFeatures(NRF24L01Driver *nrfp)
{
 80061ca:	b082      	sub	sp, #8
 80061cc:	4604      	mov	r4, r0
    uint8_t op[2] = {NRF24L01_CMD_ACTIVATE, 0x73};
 80061ce:	f8ad 2004 	strh.w	r2, [sp, #4]

    spiSelect(nrfp->config->spip);
 80061d2:	6818      	ldr	r0, [r3, #0]
 80061d4:	f7fc f964 	bl	80024a0 <spiSelect>
    spiSend(nrfp->config->spip, 2, op);
 80061d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80061dc:	aa01      	add	r2, sp, #4
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	2102      	movs	r1, #2
 80061e2:	f7fc f995 	bl	8002510 <spiSend>
    spiUnselect(nrfp->config->spip);
 80061e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	f7fc f968 	bl	80024c0 <spiUnselect>
}
 80061f0:	b002      	add	sp, #8
 80061f2:	bd10      	pop	{r4, pc}
 80061f4:	08007900 	.word	0x08007900
	...

08006200 <_Z25nrf24l01EnableDynamicSizeP14NRF24L01Driver>:
{
    return nrf24l01ReadRegister(nrfp, NRF24L01_REG_FIFO_STATUS);
}

void nrf24l01EnableDynamicSize(NRF24L01Driver *nrfp)
{
 8006200:	b538      	push	{r3, r4, r5, lr}
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_FEATURE);
 8006202:	211d      	movs	r1, #29
{
    return nrf24l01ReadRegister(nrfp, NRF24L01_REG_FIFO_STATUS);
}

void nrf24l01EnableDynamicSize(NRF24L01Driver *nrfp)
{
 8006204:	4604      	mov	r4, r0
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_FEATURE);
 8006206:	f7ff ff43 	bl	8006090 <_Z20nrf24l01ReadRegisterP14NRF24L01Driverh>

    if (reg & NRF24L01_EN_DPL)
 800620a:	0742      	lsls	r2, r0, #29
 800620c:	d500      	bpl.n	8006210 <_Z25nrf24l01EnableDynamicSizeP14NRF24L01Driver+0x10>
 800620e:	bd38      	pop	{r3, r4, r5, pc}
        return;

    reg |= NRF24L01_EN_DPL;
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_FEATURE, reg);
 8006210:	f040 0204 	orr.w	r2, r0, #4
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	211d      	movs	r1, #29
 8006218:	4620      	mov	r0, r4
 800621a:	f7ff ff19 	bl	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>

    reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_FEATURE);
 800621e:	211d      	movs	r1, #29
 8006220:	4620      	mov	r0, r4
 8006222:	f7ff ff35 	bl	8006090 <_Z20nrf24l01ReadRegisterP14NRF24L01Driverh>
    if ((reg & NRF24L01_EN_DPL) == 0)
 8006226:	0743      	lsls	r3, r0, #29
        return;

    reg |= NRF24L01_EN_DPL;
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_FEATURE, reg);

    reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_FEATURE);
 8006228:	4605      	mov	r5, r0
    if ((reg & NRF24L01_EN_DPL) == 0)
 800622a:	d4f0      	bmi.n	800620e <_Z25nrf24l01EnableDynamicSizeP14NRF24L01Driver+0xe>
    {
        nrf24l01ToggleFeatures(nrfp);
 800622c:	4620      	mov	r0, r4
 800622e:	f7ff ffc7 	bl	80061c0 <_Z22nrf24l01ToggleFeaturesP14NRF24L01Driver>
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_FEATURE, reg);
 8006232:	462a      	mov	r2, r5
 8006234:	4620      	mov	r0, r4
 8006236:	211d      	movs	r1, #29
    }
}
 8006238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_FEATURE);
    if ((reg & NRF24L01_EN_DPL) == 0)
    {
        nrf24l01ToggleFeatures(nrfp);
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_FEATURE, reg);
 800623c:	f7ff bf08 	b.w	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>

08006240 <_Z15nrf24l01FlushRXP14NRF24L01Driver>:
    spiSend(nrfp->config->spip, 2, op);
    spiUnselect(nrfp->config->spip);
}

void nrf24l01FlushRX(NRF24L01Driver *nrfp)
{
 8006240:	b530      	push	{r4, r5, lr}
 8006242:	b083      	sub	sp, #12
    uint8_t op = NRF24L01_CMD_FLUSH_RX;
 8006244:	ad02      	add	r5, sp, #8
 8006246:	22e2      	movs	r2, #226	; 0xe2
 8006248:	f805 2d01 	strb.w	r2, [r5, #-1]!

    spiSelect(nrfp->config->spip);
 800624c:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    spiSend(nrfp->config->spip, 2, op);
    spiUnselect(nrfp->config->spip);
}

void nrf24l01FlushRX(NRF24L01Driver *nrfp)
{
 8006250:	4604      	mov	r4, r0
    uint8_t op = NRF24L01_CMD_FLUSH_RX;

    spiSelect(nrfp->config->spip);
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	f7fc f924 	bl	80024a0 <spiSelect>
    spiSend(nrfp->config->spip, 1, &op);
 8006258:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800625c:	462a      	mov	r2, r5
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	2101      	movs	r1, #1
 8006262:	f7fc f955 	bl	8002510 <spiSend>
    spiUnselect(nrfp->config->spip);
 8006266:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	f7fc f928 	bl	80024c0 <spiUnselect>
}
 8006270:	b003      	add	sp, #12
 8006272:	bd30      	pop	{r4, r5, pc}
	...

08006280 <_Z15nrf24l01FlushTXP14NRF24L01Driver>:

void nrf24l01FlushTX(NRF24L01Driver *nrfp)
{
 8006280:	b530      	push	{r4, r5, lr}
 8006282:	b083      	sub	sp, #12
    uint8_t op = NRF24L01_CMD_FLUSH_TX;
 8006284:	ad02      	add	r5, sp, #8
 8006286:	22e1      	movs	r2, #225	; 0xe1
 8006288:	f805 2d01 	strb.w	r2, [r5, #-1]!

    spiSelect(nrfp->config->spip);
 800628c:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    spiSend(nrfp->config->spip, 1, &op);
    spiUnselect(nrfp->config->spip);
}

void nrf24l01FlushTX(NRF24L01Driver *nrfp)
{
 8006290:	4604      	mov	r4, r0
    uint8_t op = NRF24L01_CMD_FLUSH_TX;

    spiSelect(nrfp->config->spip);
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	f7fc f904 	bl	80024a0 <spiSelect>
    spiSend(nrfp->config->spip, 1, &op);
 8006298:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800629c:	462a      	mov	r2, r5
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	2101      	movs	r1, #1
 80062a2:	f7fc f935 	bl	8002510 <spiSend>
    spiUnselect(nrfp->config->spip);
 80062a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	f7fc f908 	bl	80024c0 <spiUnselect>
}
 80062b0:	b003      	add	sp, #12
 80062b2:	bd30      	pop	{r4, r5, pc}
	...

080062c0 <_Z15nrf24l01GetSizeP14NRF24L01Driver>:

uint8_t nrf24l01GetSize(NRF24L01Driver *nrfp)
{
 80062c0:	b510      	push	{r4, lr}
 80062c2:	b082      	sub	sp, #8
    uint8_t op[2] = {NRF24L01_CMD_R_RX_PL_WID, 0};
 80062c4:	2360      	movs	r3, #96	; 0x60
 80062c6:	f88d 3000 	strb.w	r3, [sp]
    uint8_t data[2] = {0, 0};

    spiSelect(nrfp->config->spip);
 80062ca:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01GetSize(NRF24L01Driver *nrfp)
{
    uint8_t op[2] = {NRF24L01_CMD_R_RX_PL_WID, 0};
 80062ce:	2300      	movs	r3, #0
    spiSend(nrfp->config->spip, 1, &op);
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01GetSize(NRF24L01Driver *nrfp)
{
 80062d0:	4604      	mov	r4, r0
    uint8_t op[2] = {NRF24L01_CMD_R_RX_PL_WID, 0};
 80062d2:	f88d 3001 	strb.w	r3, [sp, #1]
    uint8_t data[2] = {0, 0};
 80062d6:	f88d 3004 	strb.w	r3, [sp, #4]
 80062da:	f88d 3005 	strb.w	r3, [sp, #5]

    spiSelect(nrfp->config->spip);
 80062de:	6810      	ldr	r0, [r2, #0]
 80062e0:	f7fc f8de 	bl	80024a0 <spiSelect>
    spiExchange(nrfp->config->spip, 2, op, data);
 80062e4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80062e8:	ab01      	add	r3, sp, #4
 80062ea:	6810      	ldr	r0, [r2, #0]
 80062ec:	2102      	movs	r1, #2
 80062ee:	466a      	mov	r2, sp
 80062f0:	f7fc f8f6 	bl	80024e0 <spiExchange>
    spiUnselect(nrfp->config->spip);
 80062f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	f7fc f8e1 	bl	80024c0 <spiUnselect>

    return data[1];
}
 80062fe:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8006302:	b002      	add	sp, #8
 8006304:	bd10      	pop	{r4, pc}
 8006306:	bf00      	nop
	...

08006310 <_Z15nrf24l01EnterRXP14NRF24L01Driver>:

void nrf24l01EnterRX(NRF24L01Driver *nrfp)
{
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 8006310:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124

    return data[1];
}

void nrf24l01EnterRX(NRF24L01Driver *nrfp)
{
 8006314:	b538      	push	{r3, r4, r5, lr}
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 8006316:	8913      	ldrh	r3, [r2, #8]
 8006318:	6852      	ldr	r2, [r2, #4]
 800631a:	2401      	movs	r4, #1
 800631c:	fa04 f303 	lsl.w	r3, r4, r3
 8006320:	b29b      	uxth	r3, r3
 8006322:	8353      	strh	r3, [r2, #26]

    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 8006324:	2100      	movs	r1, #0

    return data[1];
}

void nrf24l01EnterRX(NRF24L01Driver *nrfp)
{
 8006326:	4605      	mov	r5, r0
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);

    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 8006328:	f7ff feb2 	bl	8006090 <_Z20nrf24l01ReadRegisterP14NRF24L01Driverh>
    reg |= NRF24L01_PRIM_RX;
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
 800632c:	ea40 0204 	orr.w	r2, r0, r4
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	4628      	mov	r0, r5
 8006334:	2100      	movs	r1, #0
 8006336:	f7ff fe8b 	bl	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>
    // nrf24l01ClearIRQ(nrfp, NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT);
    // nrf24l01FlushRX(nrfp);
    // nrf24l01FlushTX(nrfp);

    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
 800633a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800633e:	891a      	ldrh	r2, [r3, #8]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	4094      	lsls	r4, r2
 8006344:	b2a4      	uxth	r4, r4
 8006346:	831c      	strh	r4, [r3, #24]
 8006348:	bd38      	pop	{r3, r4, r5, pc}
 800634a:	bf00      	nop
 800634c:	0000      	movs	r0, r0
	...

08006350 <_ZL5readtPvPhjm>:

    return sended;
}

static size_t readt(void *instance, uint8_t *bp, size_t n, systime_t time)
{
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    event_listener_t nrfListener;
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
 8006354:	6845      	ldr	r5, [r0, #4]

    return sended;
}

static size_t readt(void *instance, uint8_t *bp, size_t n, systime_t time)
{
 8006356:	b087      	sub	sp, #28
    event_listener_t nrfListener;
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;

    nrf24l01EnterRX(nrfp);
 8006358:	4628      	mov	r0, r5

    return sended;
}

static size_t readt(void *instance, uint8_t *bp, size_t n, systime_t time)
{
 800635a:	4698      	mov	r8, r3
 800635c:	468b      	mov	fp, r1
 800635e:	4692      	mov	sl, r2
    event_listener_t nrfListener;
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;

    nrf24l01EnterRX(nrfp);
 8006360:	f7ff ffd6 	bl	8006310 <_Z15nrf24l01EnterRXP14NRF24L01Driver>
    chThdSleepMicroseconds(130);
 8006364:	2002      	movs	r0, #2
 8006366:	f7fb f87b 	bl	8001460 <chThdSleep>
    //     for (uint8_t i = 0; i < len; i++)
    //         bp[received + i] = chp->rxBuf[(32 - chp->rxBufCount) + i];
    //     chp->rxBufCount -= len;
    //     received += len;
    // }
    uint8_t status = nrf24l01GetStatus(nrfp);
 800636a:	4628      	mov	r0, r5
 800636c:	f7ff fee0 	bl	8006130 <_Z17nrf24l01GetStatusP14NRF24L01Driver>
    return nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_PW_P0 + pipe, size);
}

uint8_t nrf24l01GetFIFOStatus(NRF24L01Driver *nrfp)
{
    return nrf24l01ReadRegister(nrfp, NRF24L01_REG_FIFO_STATUS);
 8006370:	2117      	movs	r1, #23
    //     for (uint8_t i = 0; i < len; i++)
    //         bp[received + i] = chp->rxBuf[(32 - chp->rxBufCount) + i];
    //     chp->rxBufCount -= len;
    //     received += len;
    // }
    uint8_t status = nrf24l01GetStatus(nrfp);
 8006372:	4606      	mov	r6, r0
    return nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_PW_P0 + pipe, size);
}

uint8_t nrf24l01GetFIFOStatus(NRF24L01Driver *nrfp)
{
    return nrf24l01ReadRegister(nrfp, NRF24L01_REG_FIFO_STATUS);
 8006374:	4628      	mov	r0, r5
 8006376:	f7ff fe8b 	bl	8006090 <_Z20nrf24l01ReadRegisterP14NRF24L01Driverh>
    uint8_t status = nrf24l01GetStatus(nrfp);
    uint8_t status_reg = nrf24l01GetFIFOStatus(nrfp);
    int count = 0;
    // systime_t start = chVTGetSystemTimeX();
    // systime_t end = start + time;
    while (!((status & NRF24L01_RX_DR) || !(status_reg & NRF24L01_FIFO_RX_EMPTY)))
 800637a:	f006 0340 	and.w	r3, r6, #64	; 0x40
 800637e:	2b00      	cmp	r3, #0
 8006380:	d140      	bne.n	8006404 <_ZL5readtPvPhjm+0xb4>
 8006382:	07c2      	lsls	r2, r0, #31
 8006384:	d53e      	bpl.n	8006404 <_ZL5readtPvPhjm+0xb4>
    {
        status = nrf24l01GetStatus(nrfp);
 8006386:	4628      	mov	r0, r5
 8006388:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 800638c:	f7ff fed0 	bl	8006130 <_Z17nrf24l01GetStatusP14NRF24L01Driver>
    return nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_PW_P0 + pipe, size);
}

uint8_t nrf24l01GetFIFOStatus(NRF24L01Driver *nrfp)
{
    return nrf24l01ReadRegister(nrfp, NRF24L01_REG_FIFO_STATUS);
 8006390:	2117      	movs	r1, #23
    int count = 0;
    // systime_t start = chVTGetSystemTimeX();
    // systime_t end = start + time;
    while (!((status & NRF24L01_RX_DR) || !(status_reg & NRF24L01_FIFO_RX_EMPTY)))
    {
        status = nrf24l01GetStatus(nrfp);
 8006392:	4606      	mov	r6, r0
    return nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_PW_P0 + pipe, size);
}

uint8_t nrf24l01GetFIFOStatus(NRF24L01Driver *nrfp)
{
    return nrf24l01ReadRegister(nrfp, NRF24L01_REG_FIFO_STATUS);
 8006394:	4628      	mov	r0, r5
 8006396:	f7ff fe7b 	bl	8006090 <_Z20nrf24l01ReadRegisterP14NRF24L01Driverh>
    // systime_t end = start + time;
    while (!((status & NRF24L01_RX_DR) || !(status_reg & NRF24L01_FIFO_RX_EMPTY)))
    {
        status = nrf24l01GetStatus(nrfp);
        status_reg = nrf24l01GetFIFOStatus(nrfp);
        if (count++ > ST2MS(time))
 800639a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800639e:	fb03 f308 	mul.w	r3, r3, r8
 80063a2:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80063a6:	4a2a      	ldr	r2, [pc, #168]	; (8006450 <_ZL5readtPvPhjm+0x100>)
 80063a8:	330f      	adds	r3, #15
 80063aa:	fba2 3803 	umull	r3, r8, r2, r3
    return nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_PW_P0 + pipe, size);
}

uint8_t nrf24l01GetFIFOStatus(NRF24L01Driver *nrfp)
{
    return nrf24l01ReadRegister(nrfp, NRF24L01_REG_FIFO_STATUS);
 80063ae:	4607      	mov	r7, r0
    // systime_t end = start + time;
    while (!((status & NRF24L01_RX_DR) || !(status_reg & NRF24L01_FIFO_RX_EMPTY)))
    {
        status = nrf24l01GetStatus(nrfp);
        status_reg = nrf24l01GetFIFOStatus(nrfp);
        if (count++ > ST2MS(time))
 80063b0:	ea4f 3858 	mov.w	r8, r8, lsr #13
        {
            nrf24l01EnterStandby(nrfp);
            chEvtUnregister(&nrfp->eventSource, &nrfListener);
            return 0;
        }
        chThdSleepMilliseconds(1);
 80063b4:	200a      	movs	r0, #10
 80063b6:	f7fb f853 	bl	8001460 <chThdSleep>
    uint8_t status = nrf24l01GetStatus(nrfp);
    uint8_t status_reg = nrf24l01GetFIFOStatus(nrfp);
    int count = 0;
    // systime_t start = chVTGetSystemTimeX();
    // systime_t end = start + time;
    while (!((status & NRF24L01_RX_DR) || !(status_reg & NRF24L01_FIFO_RX_EMPTY)))
 80063ba:	f006 0340 	and.w	r3, r6, #64	; 0x40
 80063be:	3401      	adds	r4, #1
    {
        status = nrf24l01GetStatus(nrfp);
 80063c0:	4628      	mov	r0, r5
    uint8_t status = nrf24l01GetStatus(nrfp);
    uint8_t status_reg = nrf24l01GetFIFOStatus(nrfp);
    int count = 0;
    // systime_t start = chVTGetSystemTimeX();
    // systime_t end = start + time;
    while (!((status & NRF24L01_RX_DR) || !(status_reg & NRF24L01_FIFO_RX_EMPTY)))
 80063c2:	f003 09ff 	and.w	r9, r3, #255	; 0xff
 80063c6:	b9eb      	cbnz	r3, 8006404 <_ZL5readtPvPhjm+0xb4>
 80063c8:	07fb      	lsls	r3, r7, #31
 80063ca:	d51b      	bpl.n	8006404 <_ZL5readtPvPhjm+0xb4>
    {
        status = nrf24l01GetStatus(nrfp);
 80063cc:	f7ff feb0 	bl	8006130 <_Z17nrf24l01GetStatusP14NRF24L01Driver>
    return nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_PW_P0 + pipe, size);
}

uint8_t nrf24l01GetFIFOStatus(NRF24L01Driver *nrfp)
{
    return nrf24l01ReadRegister(nrfp, NRF24L01_REG_FIFO_STATUS);
 80063d0:	2117      	movs	r1, #23
    int count = 0;
    // systime_t start = chVTGetSystemTimeX();
    // systime_t end = start + time;
    while (!((status & NRF24L01_RX_DR) || !(status_reg & NRF24L01_FIFO_RX_EMPTY)))
    {
        status = nrf24l01GetStatus(nrfp);
 80063d2:	4606      	mov	r6, r0
    return nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_PW_P0 + pipe, size);
}

uint8_t nrf24l01GetFIFOStatus(NRF24L01Driver *nrfp)
{
    return nrf24l01ReadRegister(nrfp, NRF24L01_REG_FIFO_STATUS);
 80063d4:	4628      	mov	r0, r5
 80063d6:	f7ff fe5b 	bl	8006090 <_Z20nrf24l01ReadRegisterP14NRF24L01Driverh>
    // systime_t end = start + time;
    while (!((status & NRF24L01_RX_DR) || !(status_reg & NRF24L01_FIFO_RX_EMPTY)))
    {
        status = nrf24l01GetStatus(nrfp);
        status_reg = nrf24l01GetFIFOStatus(nrfp);
        if (count++ > ST2MS(time))
 80063da:	45a0      	cmp	r8, r4
    return nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_PW_P0 + pipe, size);
}

uint8_t nrf24l01GetFIFOStatus(NRF24L01Driver *nrfp)
{
    return nrf24l01ReadRegister(nrfp, NRF24L01_REG_FIFO_STATUS);
 80063dc:	4607      	mov	r7, r0
    // systime_t end = start + time;
    while (!((status & NRF24L01_RX_DR) || !(status_reg & NRF24L01_FIFO_RX_EMPTY)))
    {
        status = nrf24l01GetStatus(nrfp);
        status_reg = nrf24l01GetFIFOStatus(nrfp);
        if (count++ > ST2MS(time))
 80063de:	d2e9      	bcs.n	80063b4 <_ZL5readtPvPhjm+0x64>
void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    // uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
    // reg &= ~NRF24L01_PRIM_RX;
    // nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 80063e0:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 80063e4:	8911      	ldrh	r1, [r2, #8]
 80063e6:	6852      	ldr	r2, [r2, #4]
 80063e8:	2301      	movs	r3, #1
 80063ea:	408b      	lsls	r3, r1
 80063ec:	b29b      	uxth	r3, r3
        status = nrf24l01GetStatus(nrfp);
        status_reg = nrf24l01GetFIFOStatus(nrfp);
        if (count++ > ST2MS(time))
        {
            nrf24l01EnterStandby(nrfp);
            chEvtUnregister(&nrfp->eventSource, &nrfListener);
 80063ee:	f505 7090 	add.w	r0, r5, #288	; 0x120
void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    // uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
    // reg &= ~NRF24L01_PRIM_RX;
    // nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 80063f2:	8353      	strh	r3, [r2, #26]
        status = nrf24l01GetStatus(nrfp);
        status_reg = nrf24l01GetFIFOStatus(nrfp);
        if (count++ > ST2MS(time))
        {
            nrf24l01EnterStandby(nrfp);
            chEvtUnregister(&nrfp->eventSource, &nrfListener);
 80063f4:	a901      	add	r1, sp, #4
 80063f6:	f7fb f9e3 	bl	80017c0 <chEvtUnregister>
            return 0;
 80063fa:	46ca      	mov	sl, r9
    nrf24l01ReadPayload(nrfp, packetSize < n ? packetSize : n, bp, &pipe);

    nrf24l01EnterStandby(nrfp);

    return packetSize < n ? packetSize : n;
}
 80063fc:	4650      	mov	r0, sl
 80063fe:	b007      	add	sp, #28
 8006400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_RF_CH, reg);
}

void nrf24l01ClearIRQ(NRF24L01Driver *nrfp, uint8_t irq)
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_STATUS, irq & (NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT));
 8006404:	2240      	movs	r2, #64	; 0x40
 8006406:	2107      	movs	r1, #7
 8006408:	4628      	mov	r0, r5
 800640a:	f7ff fe21 	bl	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>
            return 0;
        }
        chThdSleepMilliseconds(1);
    }
    nrf24l01ClearIRQ(nrfp, NRF24L01_RX_DR);
    uint8_t pipe = (status >> 1) & 0x7;
 800640e:	f3c6 0642 	ubfx	r6, r6, #1, #3
    uint8_t packetSize = nrf24l01GetSize(nrfp);
 8006412:	4628      	mov	r0, r5
            return 0;
        }
        chThdSleepMilliseconds(1);
    }
    nrf24l01ClearIRQ(nrfp, NRF24L01_RX_DR);
    uint8_t pipe = (status >> 1) & 0x7;
 8006414:	f88d 6004 	strb.w	r6, [sp, #4]
    uint8_t packetSize = nrf24l01GetSize(nrfp);
 8006418:	f7ff ff52 	bl	80062c0 <_Z15nrf24l01GetSizeP14NRF24L01Driver>
    nrf24l01ReadPayload(nrfp, packetSize < n ? packetSize : n, bp, &pipe);
 800641c:	4582      	cmp	sl, r0
 800641e:	bf28      	it	cs
 8006420:	4682      	movcs	sl, r0
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
}

void nrf24l01ReadPayload(NRF24L01Driver *nrfp, uint8_t size, uint8_t *data, uint8_t *pipe)
{
    if (size > 32)
 8006422:	f1ba 0f20 	cmp.w	sl, #32
 8006426:	d90b      	bls.n	8006440 <_ZL5readtPvPhjm+0xf0>
void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    // uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
    // reg &= ~NRF24L01_PRIM_RX;
    // nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 8006428:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 800642c:	8911      	ldrh	r1, [r2, #8]
 800642e:	6852      	ldr	r2, [r2, #4]
 8006430:	2301      	movs	r3, #1
 8006432:	408b      	lsls	r3, r1
 8006434:	b29b      	uxth	r3, r3
    nrf24l01ReadPayload(nrfp, packetSize < n ? packetSize : n, bp, &pipe);

    nrf24l01EnterStandby(nrfp);

    return packetSize < n ? packetSize : n;
}
 8006436:	4650      	mov	r0, sl
void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    // uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
    // reg &= ~NRF24L01_PRIM_RX;
    // nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 8006438:	8353      	strh	r3, [r2, #26]
    nrf24l01ReadPayload(nrfp, packetSize < n ? packetSize : n, bp, &pipe);

    nrf24l01EnterStandby(nrfp);

    return packetSize < n ? packetSize : n;
}
 800643a:	b007      	add	sp, #28
 800643c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006440:	465a      	mov	r2, fp
 8006442:	ab01      	add	r3, sp, #4
 8006444:	fa5f f18a 	uxtb.w	r1, sl
 8006448:	4628      	mov	r0, r5
 800644a:	f7ff fda9 	bl	8005fa0 <_Z19nrf24l01ReadPayloadP14NRF24L01DriverhPhS1_.part.2>
 800644e:	e7eb      	b.n	8006428 <_ZL5readtPvPhjm+0xd8>
 8006450:	d1b71759 	.word	0xd1b71759
	...

08006460 <_ZL4gettPvm>:
        return Q_TIMEOUT;
    return Q_OK;
}

static msg_t gett(void *instance, systime_t time)
{
 8006460:	b510      	push	{r4, lr}
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
 8006462:	6842      	ldr	r2, [r0, #4]
        return Q_TIMEOUT;
    return Q_OK;
}

static msg_t gett(void *instance, systime_t time)
{
 8006464:	b082      	sub	sp, #8
 8006466:	f502 7490 	add.w	r4, r2, #288	; 0x120
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
    struct NRF24L01Channel *chp = NULL;

    for (int i = 0; i < 6; i++)
    {
        if (&nrfp->channels[i] == instance)
 800646a:	4290      	cmp	r0, r2
 800646c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8006470:	d005      	beq.n	800647e <_ZL4gettPvm+0x1e>
static msg_t gett(void *instance, systime_t time)
{
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
    struct NRF24L01Channel *chp = NULL;

    for (int i = 0; i < 6; i++)
 8006472:	42a2      	cmp	r2, r4
 8006474:	d1f9      	bne.n	800646a <_ZL4gettPvm+0xa>
            break;
        }
    }

    if (!chp)
        return Q_RESET;
 8006476:	f06f 0001 	mvn.w	r0, #1
        uint8_t b;
        if (!readt(instance, &b, 1, time))
            return Q_TIMEOUT;
        return b;
    }
}
 800647a:	b002      	add	sp, #8
 800647c:	bd10      	pop	{r4, pc}
    }

    if (!chp)
        return Q_RESET;

    if (chp->rxBufCount)
 800647e:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8006482:	b142      	cbz	r2, 8006496 <_ZL4gettPvm+0x36>
    {
        uint8_t b = chp->rxBuf[32 - chp->rxBufCount];
 8006484:	1a83      	subs	r3, r0, r2
        chp->rxBufCount--;
 8006486:	3a01      	subs	r2, #1
    if (!chp)
        return Q_RESET;

    if (chp->rxBufCount)
    {
        uint8_t b = chp->rxBuf[32 - chp->rxBufCount];
 8006488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        chp->rxBufCount--;
 800648c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        return b;
 8006490:	4618      	mov	r0, r3
        uint8_t b;
        if (!readt(instance, &b, 1, time))
            return Q_TIMEOUT;
        return b;
    }
}
 8006492:	b002      	add	sp, #8
 8006494:	bd10      	pop	{r4, pc}
 8006496:	460b      	mov	r3, r1
        return b;
    }
    else
    {
        uint8_t b;
        if (!readt(instance, &b, 1, time))
 8006498:	2201      	movs	r2, #1
 800649a:	f10d 0107 	add.w	r1, sp, #7
 800649e:	f7ff ff57 	bl	8006350 <_ZL5readtPvPhjm>
 80064a2:	b918      	cbnz	r0, 80064ac <_ZL4gettPvm+0x4c>
            return Q_TIMEOUT;
 80064a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return b;
    }
}
 80064a8:	b002      	add	sp, #8
 80064aa:	bd10      	pop	{r4, pc}
    else
    {
        uint8_t b;
        if (!readt(instance, &b, 1, time))
            return Q_TIMEOUT;
        return b;
 80064ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
    }
}
 80064b0:	b002      	add	sp, #8
 80064b2:	bd10      	pop	{r4, pc}
	...

080064c0 <_ZL3getPv>:
    return putt(instance, b, TIME_INFINITE);
}

static msg_t get(void *instance)
{
    return gett(instance, TIME_INFINITE);
 80064c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80064c4:	f7ff bfcc 	b.w	8006460 <_ZL4gettPvm>
	...

080064d0 <_ZL4readPvPhj>:
    return writet(instance, bp, n, TIME_INFINITE);
}

static size_t read(void *instance, uint8_t *bp, size_t n)
{
    return readt(instance, bp, n, TIME_INFINITE);
 80064d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064d4:	f7ff bf3c 	b.w	8006350 <_ZL5readtPvPhjm>
	...

080064e0 <_Z15nrf24l01EnterTXP14NRF24L01Driver>:
    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnterTX(NRF24L01Driver *nrfp)
{
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 80064e0:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
 80064e4:	8911      	ldrh	r1, [r2, #8]
 80064e6:	6852      	ldr	r2, [r2, #4]
 80064e8:	2301      	movs	r3, #1
 80064ea:	408b      	lsls	r3, r1

    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnterTX(NRF24L01Driver *nrfp)
{
 80064ec:	b510      	push	{r4, lr}
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	8353      	strh	r3, [r2, #26]

    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 80064f2:	2100      	movs	r1, #0

    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnterTX(NRF24L01Driver *nrfp)
{
 80064f4:	4604      	mov	r4, r0
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);

    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 80064f6:	f7ff fdcb 	bl	8006090 <_Z20nrf24l01ReadRegisterP14NRF24L01Driverh>
    reg &= ~NRF24L01_PRIM_RX;
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
 80064fa:	2100      	movs	r1, #0
 80064fc:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8006500:	4620      	mov	r0, r4
}
 8006502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);

    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
    reg &= ~NRF24L01_PRIM_RX;
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
 8006506:	f7ff bda3 	b.w	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>
 800650a:	bf00      	nop
 800650c:	0000      	movs	r0, r0
	...

08006510 <_ZL6writetPvPKhjm>:

    nrf24l01PowerUp(&nrf24l01);
}

static size_t writet(void *instance, const uint8_t *bp, size_t n, systime_t time)
{
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    event_listener_t nrfListener;
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
 8006514:	6845      	ldr	r5, [r0, #4]
    if (instance != &nrfp->channels[0])
 8006516:	42a8      	cmp	r0, r5

    nrf24l01PowerUp(&nrf24l01);
}

static size_t writet(void *instance, const uint8_t *bp, size_t n, systime_t time)
{
 8006518:	b083      	sub	sp, #12
    event_listener_t nrfListener;
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
    if (instance != &nrfp->channels[0])
        return 0;
 800651a:	bf18      	it	ne
 800651c:	f04f 0900 	movne.w	r9, #0

static size_t writet(void *instance, const uint8_t *bp, size_t n, systime_t time)
{
    event_listener_t nrfListener;
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
    if (instance != &nrfp->channels[0])
 8006520:	d003      	beq.n	800652a <_ZL6writetPvPKhjm+0x1a>

    // chEvtBroadcastFlags(&((struct NRF24L01Channel*)instance)->event, CHN_OUTPUT_EMPTY | CHN_TRANSMISSION_END);
    // chEvtUnregister(&nrfp->eventSource, &nrfListener);

    return sended;
}
 8006522:	4648      	mov	r0, r9
 8006524:	b003      	add	sp, #12
 8006526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652a:	461c      	mov	r4, r3
 800652c:	4692      	mov	sl, r2
 800652e:	9101      	str	r1, [sp, #4]
    // {
    //     chEvtUnregister(&nrfp->eventSource, &nrfListener);
    //     return 0;
    // }

    nrf24l01EnterTX(nrfp);
 8006530:	f7ff ffd6 	bl	80064e0 <_Z15nrf24l01EnterTXP14NRF24L01Driver>
        palSetPad(nrfp->config->cePort, nrfp->config->cePad);
 8006534:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8006538:	8911      	ldrh	r1, [r2, #8]
 800653a:	6852      	ldr	r2, [r2, #4]
 800653c:	2301      	movs	r3, #1
 800653e:	408b      	lsls	r3, r1
 8006540:	b29b      	uxth	r3, r3
 8006542:	8313      	strh	r3, [r2, #24]


    while (sended < n)
 8006544:	f1ba 0f00 	cmp.w	sl, #0
 8006548:	d05a      	beq.n	8006600 <_ZL6writetPvPKhjm+0xf0>
        status_reg = nrf24l01GetStatus(nrfp);

        int count = 0;
        // systime_t start = chVTGetSystemTimeX();
        // systime_t end = start + time;
        while (!(status_reg & (NRF24L01_MAX_RT | NRF24L01_TX_DS)) && count++ <= ST2MS(time))
 800654a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800654e:	fb03 f304 	mul.w	r3, r3, r4
 8006552:	4e2c      	ldr	r6, [pc, #176]	; (8006604 <_ZL6writetPvPKhjm+0xf4>)
 8006554:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8006558:	330f      	adds	r3, #15
 800655a:	fba6 2303 	umull	r2, r3, r6, r3
 800655e:	f04f 0900 	mov.w	r9, #0
 8006562:	0b5e      	lsrs	r6, r3, #13
 8006564:	464f      	mov	r7, r9
 8006566:	e00a      	b.n	800657e <_ZL6writetPvPKhjm+0x6e>
            //     return 0;
            // }
            chThdSleepMilliseconds(1);
        }

        if (status_reg & NRF24L01_MAX_RT)
 8006568:	f01b 0f10 	tst.w	fp, #16
 800656c:	d12e      	bne.n	80065cc <_ZL6writetPvPKhjm+0xbc>
            nrf24l01FlushTX(nrfp);
            nrf24l01EnterStandby(nrfp);
            return sended;
        }

        if (status_reg & NRF24L01_TX_DS)
 800656e:	f01b 0f20 	tst.w	fp, #32
 8006572:	d13f      	bne.n	80065f4 <_ZL6writetPvPKhjm+0xe4>
            nrf24l01ClearIRQ(nrfp, NRF24L01_TX_DS);

        sended += psize;
 8006574:	4447      	add	r7, r8
 8006576:	b2bf      	uxth	r7, r7

    nrf24l01EnterTX(nrfp);
        palSetPad(nrfp->config->cePort, nrfp->config->cePad);


    while (sended < n)
 8006578:	4557      	cmp	r7, sl
 800657a:	46b9      	mov	r9, r7
 800657c:	d22e      	bcs.n	80065dc <_ZL6writetPvPKhjm+0xcc>
    {
        uint8_t psize = (n - sended > 32) ? 32 : n - sended;
 800657e:	ebc9 080a 	rsb	r8, r9, sl
 8006582:	f1b8 0f20 	cmp.w	r8, #32
 8006586:	9b01      	ldr	r3, [sp, #4]
 8006588:	bf28      	it	cs
 800658a:	f04f 0820 	movcs.w	r8, #32
 800658e:	fa5f f188 	uxtb.w	r1, r8
 8006592:	eb03 0209 	add.w	r2, r3, r9
 8006596:	4628      	mov	r0, r5
 8006598:	f7ff fd32 	bl	8006000 <_Z20nrf24l01WritePayloadP14NRF24L01DriverhPKh.part.3>
        //     chEvtUnregister(&nrfp->eventSource, &nrfListener);
        //     nrf24l01EnterStandby(nrfp);
        //     return sended;
        // }

        status_reg = nrf24l01GetStatus(nrfp);
 800659c:	4628      	mov	r0, r5
 800659e:	f7ff fdc7 	bl	8006130 <_Z17nrf24l01GetStatusP14NRF24L01Driver>

        int count = 0;
        // systime_t start = chVTGetSystemTimeX();
        // systime_t end = start + time;
        while (!(status_reg & (NRF24L01_MAX_RT | NRF24L01_TX_DS)) && count++ <= ST2MS(time))
 80065a2:	f010 0430 	ands.w	r4, r0, #48	; 0x30
        //     chEvtUnregister(&nrfp->eventSource, &nrfListener);
        //     nrf24l01EnterStandby(nrfp);
        //     return sended;
        // }

        status_reg = nrf24l01GetStatus(nrfp);
 80065a6:	4683      	mov	fp, r0

        int count = 0;
        // systime_t start = chVTGetSystemTimeX();
        // systime_t end = start + time;
        while (!(status_reg & (NRF24L01_MAX_RT | NRF24L01_TX_DS)) && count++ <= ST2MS(time))
 80065a8:	d1de      	bne.n	8006568 <_ZL6writetPvPKhjm+0x58>
        {
            status_reg = nrf24l01GetStatus(nrfp);
 80065aa:	4628      	mov	r0, r5
 80065ac:	f7ff fdc0 	bl	8006130 <_Z17nrf24l01GetStatusP14NRF24L01Driver>
 80065b0:	4683      	mov	fp, r0
            // if (count++ > ST2MS(time))
            // {
            //     nrf24l01EnterStandby(nrfp);
            //     return 0;
            // }
            chThdSleepMilliseconds(1);
 80065b2:	200a      	movs	r0, #10
 80065b4:	f7fa ff54 	bl	8001460 <chThdSleep>
        status_reg = nrf24l01GetStatus(nrfp);

        int count = 0;
        // systime_t start = chVTGetSystemTimeX();
        // systime_t end = start + time;
        while (!(status_reg & (NRF24L01_MAX_RT | NRF24L01_TX_DS)) && count++ <= ST2MS(time))
 80065b8:	f01b 0f30 	tst.w	fp, #48	; 0x30
 80065bc:	f104 0401 	add.w	r4, r4, #1
 80065c0:	d1d2      	bne.n	8006568 <_ZL6writetPvPKhjm+0x58>
 80065c2:	42b4      	cmp	r4, r6
 80065c4:	d9f1      	bls.n	80065aa <_ZL6writetPvPKhjm+0x9a>
            //     return 0;
            // }
            chThdSleepMilliseconds(1);
        }

        if (status_reg & NRF24L01_MAX_RT)
 80065c6:	f01b 0f10 	tst.w	fp, #16
 80065ca:	d0d0      	beq.n	800656e <_ZL6writetPvPKhjm+0x5e>
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_RF_CH, reg);
}

void nrf24l01ClearIRQ(NRF24L01Driver *nrfp, uint8_t irq)
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_STATUS, irq & (NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT));
 80065cc:	4628      	mov	r0, r5
 80065ce:	2210      	movs	r2, #16
 80065d0:	2107      	movs	r1, #7
 80065d2:	f7ff fd3d 	bl	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>

        if (status_reg & NRF24L01_MAX_RT)
        {
            // chEvtUnregister(&nrfp->eventSource, &nrfListener);
            nrf24l01ClearIRQ(nrfp, NRF24L01_MAX_RT);
            nrf24l01FlushTX(nrfp);
 80065d6:	4628      	mov	r0, r5
 80065d8:	f7ff fe52 	bl	8006280 <_Z15nrf24l01FlushTXP14NRF24L01Driver>
void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    // uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
    // reg &= ~NRF24L01_PRIM_RX;
    // nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 80065dc:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 80065e0:	8911      	ldrh	r1, [r2, #8]
 80065e2:	6852      	ldr	r2, [r2, #4]
 80065e4:	2301      	movs	r3, #1
 80065e6:	408b      	lsls	r3, r1
 80065e8:	b29b      	uxth	r3, r3

    // chEvtBroadcastFlags(&((struct NRF24L01Channel*)instance)->event, CHN_OUTPUT_EMPTY | CHN_TRANSMISSION_END);
    // chEvtUnregister(&nrfp->eventSource, &nrfListener);

    return sended;
}
 80065ea:	4648      	mov	r0, r9
void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    // uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
    // reg &= ~NRF24L01_PRIM_RX;
    // nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 80065ec:	8353      	strh	r3, [r2, #26]

    // chEvtBroadcastFlags(&((struct NRF24L01Channel*)instance)->event, CHN_OUTPUT_EMPTY | CHN_TRANSMISSION_END);
    // chEvtUnregister(&nrfp->eventSource, &nrfListener);

    return sended;
}
 80065ee:	b003      	add	sp, #12
 80065f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_RF_CH, reg);
}

void nrf24l01ClearIRQ(NRF24L01Driver *nrfp, uint8_t irq)
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_STATUS, irq & (NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT));
 80065f4:	2220      	movs	r2, #32
 80065f6:	2107      	movs	r1, #7
 80065f8:	4628      	mov	r0, r5
 80065fa:	f7ff fd29 	bl	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>
 80065fe:	e7b9      	b.n	8006574 <_ZL6writetPvPKhjm+0x64>

    nrf24l01EnterTX(nrfp);
        palSetPad(nrfp->config->cePort, nrfp->config->cePad);


    while (sended < n)
 8006600:	46d1      	mov	r9, sl
 8006602:	e7eb      	b.n	80065dc <_ZL6writetPvPKhjm+0xcc>
 8006604:	d1b71759 	.word	0xd1b71759
	...

08006610 <_ZL4puttPvhm>:

    return packetSize < n ? packetSize : n;
}

static msg_t putt(void *instance, uint8_t b, systime_t time)
{
 8006610:	b510      	push	{r4, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	ac02      	add	r4, sp, #8
    if (!writet(instance, &b, 1, time))
 8006616:	4613      	mov	r3, r2

    return packetSize < n ? packetSize : n;
}

static msg_t putt(void *instance, uint8_t b, systime_t time)
{
 8006618:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (!writet(instance, &b, 1, time))
 800661c:	2201      	movs	r2, #1
 800661e:	4621      	mov	r1, r4
 8006620:	f7ff ff76 	bl	8006510 <_ZL6writetPvPKhjm>
 8006624:	fab0 f080 	clz	r0, r0
 8006628:	0940      	lsrs	r0, r0, #5
        return Q_TIMEOUT;
    return Q_OK;
}
 800662a:	4240      	negs	r0, r0
 800662c:	b002      	add	sp, #8
 800662e:	bd10      	pop	{r4, pc}

08006630 <_ZL3putPvh>:
{
    return readt(instance, bp, n, TIME_INFINITE);
}

static msg_t put(void *instance, uint8_t b)
{
 8006630:	b510      	push	{r4, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	ac02      	add	r4, sp, #8
    return packetSize < n ? packetSize : n;
}

static msg_t putt(void *instance, uint8_t b, systime_t time)
{
    if (!writet(instance, &b, 1, time))
 8006636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800663a:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800663e:	2201      	movs	r2, #1
 8006640:	4621      	mov	r1, r4
 8006642:	f7ff ff65 	bl	8006510 <_ZL6writetPvPKhjm>
    return readt(instance, bp, n, TIME_INFINITE);
}

static msg_t put(void *instance, uint8_t b)
{
    return putt(instance, b, TIME_INFINITE);
 8006646:	fab0 f080 	clz	r0, r0
 800664a:	0940      	lsrs	r0, r0, #5
}
 800664c:	4240      	negs	r0, r0
 800664e:	b002      	add	sp, #8
 8006650:	bd10      	pop	{r4, pc}
 8006652:	bf00      	nop
	...

08006660 <_ZL5writePvPKhj>:
    }
}

static size_t write(void *instance, const uint8_t *bp, size_t n)
{
    return writet(instance, bp, n, TIME_INFINITE);
 8006660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006664:	f7ff bf54 	b.w	8006510 <_ZL6writetPvPKhjm>
	...

08006670 <_Z19nrf24l01EnablePipesP14NRF24L01Driverh>:
    // nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnablePipes(NRF24L01Driver *nrfp, uint8_t pipes)
{
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	460c      	mov	r4, r1
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_EN_RXADDR);
 8006674:	2102      	movs	r1, #2
    // nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnablePipes(NRF24L01Driver *nrfp, uint8_t pipes)
{
 8006676:	4605      	mov	r5, r0
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_EN_RXADDR);
 8006678:	f7ff fd0a 	bl	8006090 <_Z20nrf24l01ReadRegisterP14NRF24L01Driverh>
    reg &= ~(pipes & 0x3F);
 800667c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8006680:	ea20 0204 	bic.w	r2, r0, r4
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_EN_RXADDR, reg);
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	4628      	mov	r0, r5
 8006688:	2102      	movs	r1, #2
}
 800668a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void nrf24l01EnablePipes(NRF24L01Driver *nrfp, uint8_t pipes)
{
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_EN_RXADDR);
    reg &= ~(pipes & 0x3F);
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_EN_RXADDR, reg);
 800668e:	f7ff bcdf 	b.w	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>
 8006692:	bf00      	nop
	...

080066a0 <_Z14nrf24l01SetCRCP14NRF24L01Driverb>:
    else
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_EN_AA, 0);
}

void nrf24l01SetCRC(NRF24L01Driver *nrfp, bool enable)
{
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	460c      	mov	r4, r1
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 80066a4:	2100      	movs	r1, #0
    else
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_EN_AA, 0);
}

void nrf24l01SetCRC(NRF24L01Driver *nrfp, bool enable)
{
 80066a6:	4605      	mov	r5, r0
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 80066a8:	f7ff fcf2 	bl	8006090 <_Z20nrf24l01ReadRegisterP14NRF24L01Driverh>
    if (enable)
 80066ac:	b93c      	cbnz	r4, 80066be <_Z14nrf24l01SetCRCP14NRF24L01Driverb+0x1e>
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
    }
    else
    {
        reg &= ~NRF24L01_EN_CRC;
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
 80066ae:	f000 02f7 	and.w	r2, r0, #247	; 0xf7
 80066b2:	4621      	mov	r1, r4
 80066b4:	4628      	mov	r0, r5
    }
}
 80066b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
    }
    else
    {
        reg &= ~NRF24L01_EN_CRC;
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
 80066ba:	f7ff bcc9 	b.w	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>
{
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
    if (enable)
    {
        reg |= NRF24L01_EN_CRC | NRF24L01_CRCO;
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
 80066be:	f040 020c 	orr.w	r2, r0, #12
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	4628      	mov	r0, r5
 80066c6:	2100      	movs	r1, #0
    else
    {
        reg &= ~NRF24L01_EN_CRC;
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
    }
}
 80066c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
    if (enable)
    {
        reg |= NRF24L01_EN_CRC | NRF24L01_CRCO;
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
 80066cc:	f7ff bcc0 	b.w	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>

080066d0 <_Z12initNRF24L01v>:
        {EXT_CH_MODE_DISABLED, NULL}
    }
};

void initNRF24L01(void)
{
 80066d0:	b538      	push	{r3, r4, r5, lr}
    palSetPadMode(GPIOA, GPIOA_LRCK, PAL_MODE_OUTPUT_PUSHPULL);
 80066d2:	4d40      	ldr	r5, [pc, #256]	; (80067d4 <_Z12initNRF24L01v+0x104>)
    palSetPad(GPIOA, GPIOA_LRCK);
    palSetPadMode(GPIOB, GPIOB_PIN1, PAL_MODE_OUTPUT_PUSHPULL);
 80066d4:	4c40      	ldr	r4, [pc, #256]	; (80067d8 <_Z12initNRF24L01v+0x108>)
    }
};

void initNRF24L01(void)
{
    palSetPadMode(GPIOA, GPIOA_LRCK, PAL_MODE_OUTPUT_PUSHPULL);
 80066d6:	4628      	mov	r0, r5
 80066d8:	2201      	movs	r2, #1
 80066da:	2110      	movs	r1, #16
 80066dc:	f7fd f918 	bl	8003910 <_pal_lld_setgroupmode>
    palSetPad(GPIOA, GPIOA_LRCK);
 80066e0:	2310      	movs	r3, #16
 80066e2:	832b      	strh	r3, [r5, #24]
    palSetPadMode(GPIOB, GPIOB_PIN1, PAL_MODE_OUTPUT_PUSHPULL);
 80066e4:	4620      	mov	r0, r4
 80066e6:	2201      	movs	r2, #1
 80066e8:	2102      	movs	r1, #2
 80066ea:	f7fd f911 	bl	8003910 <_pal_lld_setgroupmode>
    palClearPad(GPIOB, GPIOB_PIN1);
 80066ee:	2302      	movs	r3, #2
    palSetPadMode(GPIOC, GPIOC_PIN5, PAL_MODE_INPUT_PULLUP);
 80066f0:	2220      	movs	r2, #32
 80066f2:	4611      	mov	r1, r2
void initNRF24L01(void)
{
    palSetPadMode(GPIOA, GPIOA_LRCK, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPad(GPIOA, GPIOA_LRCK);
    palSetPadMode(GPIOB, GPIOB_PIN1, PAL_MODE_OUTPUT_PUSHPULL);
    palClearPad(GPIOB, GPIOB_PIN1);
 80066f4:	8363      	strh	r3, [r4, #26]
    palSetPadMode(GPIOC, GPIOC_PIN5, PAL_MODE_INPUT_PULLUP);
 80066f6:	4839      	ldr	r0, [pc, #228]	; (80067dc <_Z12initNRF24L01v+0x10c>)
 80066f8:	4d39      	ldr	r5, [pc, #228]	; (80067e0 <_Z12initNRF24L01v+0x110>)
 80066fa:	f7fd f909 	bl	8003910 <_pal_lld_setgroupmode>

    spiStart(&SPID1, &nrf24l01SPI);
 80066fe:	4939      	ldr	r1, [pc, #228]	; (80067e4 <_Z12initNRF24L01v+0x114>)
 8006700:	4839      	ldr	r0, [pc, #228]	; (80067e8 <_Z12initNRF24L01v+0x118>)
 8006702:	f7fb febd 	bl	8002480 <spiStart>
    extStart(&EXTD1, &extcfg);
 8006706:	4939      	ldr	r1, [pc, #228]	; (80067ec <_Z12initNRF24L01v+0x11c>)
 8006708:	4839      	ldr	r0, [pc, #228]	; (80067f0 <_Z12initNRF24L01v+0x120>)
 800670a:	f7fb fbe9 	bl	8001ee0 <extStart>
 800670e:	4b39      	ldr	r3, [pc, #228]	; (80067f4 <_Z12initNRF24L01v+0x124>)
void nrf24l01ObjectInit(NRF24L01Driver *nrfp)
{
    for (int i = 0; i < 6; i++)
    {
        nrfp->channels[i].vmt = &vmt;
        nrfp->channels[i].rxBufCount = 0;
 8006710:	2200      	movs	r2, #0
 8006712:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8006716:	f1a3 012c 	sub.w	r1, r3, #44	; 0x2c

void nrf24l01ObjectInit(NRF24L01Driver *nrfp)
{
    for (int i = 0; i < 6; i++)
    {
        nrfp->channels[i].vmt = &vmt;
 800671a:	f843 5c2c 	str.w	r5, [r3, #-44]
        nrfp->channels[i].rxBufCount = 0;
 800671e:	f803 2c04 	strb.w	r2, [r3, #-4]
        nrfp->channels[i].nrfp = nrfp;
 8006722:	f843 1c28 	str.w	r1, [r3, #-40]
 8006726:	601b      	str	r3, [r3, #0]
 8006728:	3330      	adds	r3, #48	; 0x30
    putt, gett, writet, readt
};

void nrf24l01ObjectInit(NRF24L01Driver *nrfp)
{
    for (int i = 0; i < 6; i++)
 800672a:	4283      	cmp	r3, r0
    {
        nrfp->channels[i].vmt = &vmt;
        nrfp->channels[i].rxBufCount = 0;
        nrfp->channels[i].nrfp = nrfp;
 800672c:	4c32      	ldr	r4, [pc, #200]	; (80067f8 <_Z12initNRF24L01v+0x128>)
    putt, gett, writet, readt
};

void nrf24l01ObjectInit(NRF24L01Driver *nrfp)
{
    for (int i = 0; i < 6; i++)
 800672e:	d1f4      	bne.n	800671a <_Z12initNRF24L01v+0x4a>
 8006730:	f504 7290 	add.w	r2, r4, #288	; 0x120
    chEvtObjectInit(&nrfp->eventSource);
}

void nrf24l01Start(NRF24L01Driver *nrfp, const NRF24L01Config *config)
{
    nrfp->config = config;
 8006734:	4b31      	ldr	r3, [pc, #196]	; (80067fc <_Z12initNRF24L01v+0x12c>)
 8006736:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120

    spiStart(&SPID1, &nrf24l01SPI);
    extStart(&EXTD1, &extcfg);
    nrf24l01ObjectInit(&nrf24l01);
    nrf24l01Start(&nrf24l01, &nrf24l01Config);
    extChannelEnable(&EXTD1, 5);
 800673a:	2105      	movs	r1, #5
 800673c:	482c      	ldr	r0, [pc, #176]	; (80067f0 <_Z12initNRF24L01v+0x120>)
    chEvtObjectInit(&nrfp->eventSource);
}

void nrf24l01Start(NRF24L01Driver *nrfp, const NRF24L01Config *config)
{
    nrfp->config = config;
 800673e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124

    spiStart(&SPID1, &nrf24l01SPI);
    extStart(&EXTD1, &extcfg);
    nrf24l01ObjectInit(&nrf24l01);
    nrf24l01Start(&nrf24l01, &nrf24l01Config);
    extChannelEnable(&EXTD1, 5);
 8006742:	f7fb fbdd 	bl	8001f00 <extChannelEnable>

    nrf24l01EnableDynamicSize(&nrf24l01);
 8006746:	4620      	mov	r0, r4
 8006748:	f7ff fd5a 	bl	8006200 <_Z25nrf24l01EnableDynamicSizeP14NRF24L01Driver>
    nrf24l01EnableDynamicPipeSize(&nrf24l01, 0x3f);
 800674c:	4620      	mov	r0, r4
 800674e:	213f      	movs	r1, #63	; 0x3f
 8006750:	f7ff fd1e 	bl	8006190 <_Z29nrf24l01EnableDynamicPipeSizeP14NRF24L01Driverh>
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_ADDR_P0 + pipe, *addr);
}

void nrf24l01SetTXAddress(NRF24L01Driver *nrfp, const uint8_t addr[5])
{
    return nrf24l01WriteAddressRegister(nrfp, NRF24L01_REG_TX_ADDR, addr);
 8006754:	4620      	mov	r0, r4
 8006756:	4a2a      	ldr	r2, [pc, #168]	; (8006800 <_Z12initNRF24L01v+0x130>)
 8006758:	2110      	movs	r1, #16
 800675a:	f7ff fcc1 	bl	80060e0 <_Z28nrf24l01WriteAddressRegisterP14NRF24L01DriverhPKh>
}

void nrf24l01SetRXAddress(NRF24L01Driver *nrfp, uint8_t pipe, const uint8_t addr[5])
{
    if ((pipe == 0) || (pipe == 1))
        nrf24l01WriteAddressRegister(nrfp, NRF24L01_REG_RX_ADDR_P0 + pipe, addr);
 800675e:	4620      	mov	r0, r4
 8006760:	4a27      	ldr	r2, [pc, #156]	; (8006800 <_Z12initNRF24L01v+0x130>)
 8006762:	210a      	movs	r1, #10
 8006764:	f7ff fcbc 	bl	80060e0 <_Z28nrf24l01WriteAddressRegisterP14NRF24L01DriverhPKh>
 8006768:	4620      	mov	r0, r4
 800676a:	4a26      	ldr	r2, [pc, #152]	; (8006804 <_Z12initNRF24L01v+0x134>)
 800676c:	210b      	movs	r1, #11
 800676e:	f7ff fcb7 	bl	80060e0 <_Z28nrf24l01WriteAddressRegisterP14NRF24L01DriverhPKh>
void nrf24l01SetPayloadSize(NRF24L01Driver *nrfp, uint8_t pipe, uint8_t size)
{
    if ((pipe > 5) || (size > 32))
        return;

    return nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_PW_P0 + pipe, size);
 8006772:	4620      	mov	r0, r4
 8006774:	2220      	movs	r2, #32
 8006776:	2111      	movs	r1, #17
 8006778:	f7ff fc6a 	bl	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>
 800677c:	2220      	movs	r2, #32
 800677e:	4620      	mov	r0, r4
 8006780:	2112      	movs	r1, #18
 8006782:	f7ff fc65 	bl	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>
    nrf24l01SetTXAddress(&nrf24l01, tx_addr);
    nrf24l01SetRXAddress(&nrf24l01, 0, tx_addr);
    nrf24l01SetRXAddress(&nrf24l01, 1, rx_addr);
    nrf24l01SetPayloadSize(&nrf24l01, 0, 32);
    nrf24l01SetPayloadSize(&nrf24l01, 1, 32);
    nrf24l01EnablePipes(&nrf24l01, 0);
 8006786:	4620      	mov	r0, r4
 8006788:	2100      	movs	r1, #0
 800678a:	f7ff ff71 	bl	8006670 <_Z19nrf24l01EnablePipesP14NRF24L01Driverh>
    nrf24l01EnablePipes(&nrf24l01, 1);
 800678e:	4620      	mov	r0, r4
 8006790:	2101      	movs	r1, #1
 8006792:	f7ff ff6d 	bl	8006670 <_Z19nrf24l01EnablePipesP14NRF24L01Driverh>
}

void nrf24l01SetChannel(NRF24L01Driver *nrfp, uint8_t channel)
{
    uint8_t reg = channel & 0x7F;
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_RF_CH, reg);
 8006796:	224c      	movs	r2, #76	; 0x4c
 8006798:	2105      	movs	r1, #5
 800679a:	4620      	mov	r0, r4
 800679c:	f7ff fc58 	bl	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>
    nrf24l01SetPayloadSize(&nrf24l01, 1, 32);
    nrf24l01EnablePipes(&nrf24l01, 0);
    nrf24l01EnablePipes(&nrf24l01, 1);

    nrf24l01SetChannel(&nrf24l01, 76);
    nrf24l01FlushRX(&nrf24l01);
 80067a0:	4620      	mov	r0, r4
 80067a2:	f7ff fd4d 	bl	8006240 <_Z15nrf24l01FlushRXP14NRF24L01Driver>
    nrf24l01FlushTX(&nrf24l01);
 80067a6:	4620      	mov	r0, r4
 80067a8:	f7ff fd6a 	bl	8006280 <_Z15nrf24l01FlushTXP14NRF24L01Driver>
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_RF_CH, reg);
}

void nrf24l01ClearIRQ(NRF24L01Driver *nrfp, uint8_t irq)
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_STATUS, irq & (NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT));
 80067ac:	4620      	mov	r0, r4
 80067ae:	2270      	movs	r2, #112	; 0x70
 80067b0:	2107      	movs	r1, #7
 80067b2:	f7ff fc4d 	bl	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>
}

void nrf24l01SetAutoAck(NRF24L01Driver *nrfp, bool enable)
{
    if (enable)
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_EN_AA, 0b111111);
 80067b6:	4620      	mov	r0, r4
 80067b8:	223f      	movs	r2, #63	; 0x3f
 80067ba:	2101      	movs	r1, #1
 80067bc:	f7ff fc48 	bl	8006050 <_Z21nrf24l01WriteRegisterP14NRF24L01Driverhh>
    nrf24l01SetChannel(&nrf24l01, 76);
    nrf24l01FlushRX(&nrf24l01);
    nrf24l01FlushTX(&nrf24l01);
    nrf24l01ClearIRQ(&nrf24l01, NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT);
    nrf24l01SetAutoAck(&nrf24l01, true);
    nrf24l01SetCRC(&nrf24l01, true);
 80067c0:	4620      	mov	r0, r4
 80067c2:	2101      	movs	r1, #1
 80067c4:	f7ff ff6c 	bl	80066a0 <_Z14nrf24l01SetCRCP14NRF24L01Driverb>

    nrf24l01PowerUp(&nrf24l01);
 80067c8:	4620      	mov	r0, r4
}
 80067ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    nrf24l01FlushTX(&nrf24l01);
    nrf24l01ClearIRQ(&nrf24l01, NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT);
    nrf24l01SetAutoAck(&nrf24l01, true);
    nrf24l01SetCRC(&nrf24l01, true);

    nrf24l01PowerUp(&nrf24l01);
 80067ce:	f7ff bccf 	b.w	8006170 <_Z15nrf24l01PowerUpP14NRF24L01Driver>
 80067d2:	bf00      	nop
 80067d4:	40020000 	.word	0x40020000
 80067d8:	40020400 	.word	0x40020400
 80067dc:	40020800 	.word	0x40020800
 80067e0:	08007f00 	.word	0x08007f00
 80067e4:	08007f30 	.word	0x08007f30
 80067e8:	200012ec 	.word	0x200012ec
 80067ec:	08007e30 	.word	0x08007e30
 80067f0:	20001010 	.word	0x20001010
 80067f4:	20001a88 	.word	0x20001a88
 80067f8:	20001a5c 	.word	0x20001a5c
 80067fc:	08007ef0 	.word	0x08007ef0
 8006800:	08007f20 	.word	0x08007f20
 8006804:	08007f40 	.word	0x08007f40
	...

08006810 <_Z7esc_sethd>:
	palSetPad(GPIOC, 9);

	esc_set_all(0);
}

void esc_set(uint8_t channel, double duty_cycle) {
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	ec57 6b10 	vmov	r6, r7, d0
 8006816:	4604      	mov	r4, r0
	uint32_t cnt_val;
	if (duty_cycle < 0)
 8006818:	2200      	movs	r2, #0
 800681a:	2300      	movs	r3, #0
 800681c:	ee10 0a10 	vmov	r0, s0
 8006820:	4639      	mov	r1, r7
 8006822:	f7fa f99d 	bl	8000b60 <__aeabi_dcmplt>
 8006826:	bb78      	cbnz	r0, 8006888 <_Z7esc_sethd+0x78>
		duty_cycle = 0;
	if (duty_cycle > 1)
 8006828:	2200      	movs	r2, #0
 800682a:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <_Z7esc_sethd+0xb0>)
 800682c:	4630      	mov	r0, r6
 800682e:	4639      	mov	r1, r7
 8006830:	f7fa f9b4 	bl	8000b9c <__aeabi_dcmpgt>
 8006834:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8006838:	b350      	cbz	r0, 8006890 <_Z7esc_sethd+0x80>
		duty_cycle = 1;

	cnt_val = (uint32_t)(duty_cycle * (uint32_t)TIM_CLOCK / (uint32_t)ESC_UPDATE_RATE);

	switch(channel) {
 800683a:	2c02      	cmp	r4, #2
 800683c:	d003      	beq.n	8006846 <_Z7esc_sethd+0x36>
 800683e:	d809      	bhi.n	8006854 <_Z7esc_sethd+0x44>
 8006840:	b10c      	cbz	r4, 8006846 <_Z7esc_sethd+0x36>
 8006842:	2c01      	cmp	r4, #1
 8006844:	d122      	bne.n	800688c <_Z7esc_sethd+0x7c>
	case 2:
		pwmEnableChannel(&PWMD5, 2, cnt_val);
		break;

	case 3:
		pwmEnableChannel(&PWMD5, 3, cnt_val);
 8006846:	462a      	mov	r2, r5
 8006848:	4621      	mov	r1, r4
 800684a:	481e      	ldr	r0, [pc, #120]	; (80068c4 <_Z7esc_sethd+0xb4>)
		break;

	default:
		break;
	}
}
 800684c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	case 2:
		pwmEnableChannel(&PWMD5, 2, cnt_val);
		break;

	case 3:
		pwmEnableChannel(&PWMD5, 3, cnt_val);
 8006850:	f7fb bbde 	b.w	8002010 <pwmEnableChannel>
	if (duty_cycle > 1)
		duty_cycle = 1;

	cnt_val = (uint32_t)(duty_cycle * (uint32_t)TIM_CLOCK / (uint32_t)ESC_UPDATE_RATE);

	switch(channel) {
 8006854:	2c03      	cmp	r4, #3
 8006856:	d0f6      	beq.n	8006846 <_Z7esc_sethd+0x36>
 8006858:	2cff      	cmp	r4, #255	; 0xff
 800685a:	d118      	bne.n	800688e <_Z7esc_sethd+0x7e>
	case 3:
		pwmEnableChannel(&PWMD5, 3, cnt_val);
		break;

	case ALL_CHANNELS:
		pwmEnableChannel(&PWMD5, 0, cnt_val);
 800685c:	462a      	mov	r2, r5
 800685e:	2100      	movs	r1, #0
 8006860:	4818      	ldr	r0, [pc, #96]	; (80068c4 <_Z7esc_sethd+0xb4>)
 8006862:	f7fb fbd5 	bl	8002010 <pwmEnableChannel>
		pwmEnableChannel(&PWMD5, 1, cnt_val);
 8006866:	462a      	mov	r2, r5
 8006868:	2101      	movs	r1, #1
 800686a:	4816      	ldr	r0, [pc, #88]	; (80068c4 <_Z7esc_sethd+0xb4>)
 800686c:	f7fb fbd0 	bl	8002010 <pwmEnableChannel>
		pwmEnableChannel(&PWMD5, 2, cnt_val);
 8006870:	462a      	mov	r2, r5
 8006872:	2102      	movs	r1, #2
 8006874:	4813      	ldr	r0, [pc, #76]	; (80068c4 <_Z7esc_sethd+0xb4>)
 8006876:	f7fb fbcb 	bl	8002010 <pwmEnableChannel>
		pwmEnableChannel(&PWMD5, 3, cnt_val);
 800687a:	462a      	mov	r2, r5
 800687c:	2103      	movs	r1, #3
 800687e:	4811      	ldr	r0, [pc, #68]	; (80068c4 <_Z7esc_sethd+0xb4>)
		break;

	default:
		break;
	}
}
 8006880:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	case ALL_CHANNELS:
		pwmEnableChannel(&PWMD5, 0, cnt_val);
		pwmEnableChannel(&PWMD5, 1, cnt_val);
		pwmEnableChannel(&PWMD5, 2, cnt_val);
		pwmEnableChannel(&PWMD5, 3, cnt_val);
 8006884:	f7fb bbc4 	b.w	8002010 <pwmEnableChannel>
 8006888:	2500      	movs	r5, #0
 800688a:	e7d6      	b.n	800683a <_Z7esc_sethd+0x2a>
 800688c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800688e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006890:	a307      	add	r3, pc, #28	; (adr r3, 80068b0 <_Z7esc_sethd+0xa0>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	4630      	mov	r0, r6
 8006898:	4639      	mov	r1, r7
 800689a:	f7f9 fee9 	bl	8000670 <__aeabi_dmul>
 800689e:	a306      	add	r3, pc, #24	; (adr r3, 80068b8 <_Z7esc_sethd+0xa8>)
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f7fa f80e 	bl	80008c4 <__aeabi_ddiv>
 80068a8:	f7fa f9aa 	bl	8000c00 <__aeabi_d2uiz>
 80068ac:	4605      	mov	r5, r0
 80068ae:	e7c4      	b.n	800683a <_Z7esc_sethd+0x2a>
 80068b0:	00000000 	.word	0x00000000
 80068b4:	416312d0 	.word	0x416312d0
 80068b8:	00000000 	.word	0x00000000
 80068bc:	40d86a00 	.word	0x40d86a00
 80068c0:	3ff00000 	.word	0x3ff00000
 80068c4:	20001320 	.word	0x20001320
	...

080068d0 <_Z8esc_initv>:
		},
		0,
		0
};

void esc_init(void) {
 80068d0:	b538      	push	{r3, r4, r5, lr}
	pwmStart(&PWMD5, &pwmcfg);

	palSetPadMode(GPIOA, 0,
			PAL_MODE_ALTERNATE(GPIO_AF_TIM5) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);
 80068d2:	4d25      	ldr	r5, [pc, #148]	; (8006968 <_Z8esc_initv+0x98>)
		0,
		0
};

void esc_init(void) {
	pwmStart(&PWMD5, &pwmcfg);
 80068d4:	4925      	ldr	r1, [pc, #148]	; (800696c <_Z8esc_initv+0x9c>)
 80068d6:	4826      	ldr	r0, [pc, #152]	; (8006970 <_Z8esc_initv+0xa0>)
			PAL_MODE_ALTERNATE(GPIO_AF_TIM5) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);
	palSetPadMode(GPIOC, 6, PAL_MODE_OUTPUT_PUSHPULL |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_HIGHEST);
 80068d8:	4c26      	ldr	r4, [pc, #152]	; (8006974 <_Z8esc_initv+0xa4>)
		0,
		0
};

void esc_init(void) {
	pwmStart(&PWMD5, &pwmcfg);
 80068da:	f7fb fb81 	bl	8001fe0 <pwmStart>

	palSetPadMode(GPIOA, 0,
			PAL_MODE_ALTERNATE(GPIO_AF_TIM5) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);
 80068de:	4628      	mov	r0, r5
 80068e0:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80068e4:	2101      	movs	r1, #1
 80068e6:	f7fd f813 	bl	8003910 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 1,
			PAL_MODE_ALTERNATE(GPIO_AF_TIM5) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);
 80068ea:	4628      	mov	r0, r5
 80068ec:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80068f0:	2102      	movs	r1, #2
 80068f2:	f7fd f80d 	bl	8003910 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 2,
			PAL_MODE_ALTERNATE(GPIO_AF_TIM5) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);
 80068f6:	4628      	mov	r0, r5
 80068f8:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80068fc:	2104      	movs	r1, #4
 80068fe:	f7fd f807 	bl	8003910 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 3,
			PAL_MODE_ALTERNATE(GPIO_AF_TIM5) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);
 8006902:	4628      	mov	r0, r5
 8006904:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8006908:	2108      	movs	r1, #8
 800690a:	f7fd f801 	bl	8003910 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 6, PAL_MODE_OUTPUT_PUSHPULL |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_HIGHEST);
 800690e:	4620      	mov	r0, r4
 8006910:	2219      	movs	r2, #25
 8006912:	2140      	movs	r1, #64	; 0x40
 8006914:	f7fc fffc 	bl	8003910 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 7, PAL_MODE_OUTPUT_PUSHPULL |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_HIGHEST);
 8006918:	4620      	mov	r0, r4
 800691a:	2219      	movs	r2, #25
 800691c:	2180      	movs	r1, #128	; 0x80
 800691e:	f7fc fff7 	bl	8003910 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 8, PAL_MODE_OUTPUT_PUSHPULL |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_HIGHEST);
 8006922:	4620      	mov	r0, r4
 8006924:	2219      	movs	r2, #25
 8006926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800692a:	f7fc fff1 	bl	8003910 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 9, PAL_MODE_OUTPUT_PUSHPULL |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_HIGHEST);
 800692e:	4620      	mov	r0, r4
 8006930:	2219      	movs	r2, #25
 8006932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006936:	f7fc ffeb 	bl	8003910 <_pal_lld_setgroupmode>
	palSetPad(GPIOC, 6);
 800693a:	2040      	movs	r0, #64	; 0x40
	palSetPad(GPIOC, 7);
	palSetPad(GPIOC, 8);
	palSetPad(GPIOC, 9);
 800693c:	f44f 7300 	mov.w	r3, #512	; 0x200
			PAL_STM32_OSPEED_HIGHEST);
	palSetPadMode(GPIOC, 9, PAL_MODE_OUTPUT_PUSHPULL |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_HIGHEST);
	palSetPad(GPIOC, 6);
	palSetPad(GPIOC, 7);
 8006940:	2180      	movs	r1, #128	; 0x80
	palSetPad(GPIOC, 8);
 8006942:	f44f 7280 	mov.w	r2, #256	; 0x100
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_HIGHEST);
	palSetPadMode(GPIOC, 9, PAL_MODE_OUTPUT_PUSHPULL |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_HIGHEST);
	palSetPad(GPIOC, 6);
 8006946:	8320      	strh	r0, [r4, #24]
	palSetPad(GPIOC, 7);
 8006948:	8321      	strh	r1, [r4, #24]
	palSetPad(GPIOC, 8);
 800694a:	8322      	strh	r2, [r4, #24]
	palSetPad(GPIOC, 9);
 800694c:	8323      	strh	r3, [r4, #24]
		break;
	}
}

void esc_set_all(double duty_cycle) {
	esc_set(ALL_CHANNELS, duty_cycle);
 800694e:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8006960 <_Z8esc_initv+0x90>
 8006952:	20ff      	movs	r0, #255	; 0xff
	palSetPad(GPIOC, 7);
	palSetPad(GPIOC, 8);
	palSetPad(GPIOC, 9);

	esc_set_all(0);
}
 8006954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		break;
	}
}

void esc_set_all(double duty_cycle) {
	esc_set(ALL_CHANNELS, duty_cycle);
 8006958:	f7ff bf5a 	b.w	8006810 <_Z7esc_sethd>
 800695c:	f3af 8000 	nop.w
	...
 8006968:	40020000 	.word	0x40020000
 800696c:	20000808 	.word	0x20000808
 8006970:	20001320 	.word	0x20001320
 8006974:	40020800 	.word	0x40020800
	...

08006980 <_Z15controller_initv>:
vector3 pos_p_gains;
vector3 pos_i_gains;
vector3 pos_d_gains;

void controller_init(void)
{
 8006980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	vel_p_gains.x = 0.01;
 8006984:	a121      	add	r1, pc, #132	; (adr r1, 8006a0c <_Z15controller_initv+0x8c>)
 8006986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800698a:	f8df e088 	ldr.w	lr, [pc, #136]	; 8006a14 <_Z15controller_initv+0x94>
	vel_i_gains.y = 0;
	vel_i_gains.z = 0;
	vel_d_gains.x = 0;
	vel_d_gains.y = 0;
	vel_d_gains.z = 0;
	pos_p_gains.x = -0.01;
 800698e:	4f1a      	ldr	r7, [pc, #104]	; (80069f8 <_Z15controller_initv+0x78>)
void controller_init(void)
{
	vel_p_gains.x = 0.01;
	vel_p_gains.y = 0.01;
	vel_p_gains.z = 0.01;
	vel_i_gains.x = 0;
 8006990:	4e1a      	ldr	r6, [pc, #104]	; (80069fc <_Z15controller_initv+0x7c>)
	vel_i_gains.y = 0;
	vel_i_gains.z = 0;
	vel_d_gains.x = 0;
 8006992:	4d1b      	ldr	r5, [pc, #108]	; (8006a00 <_Z15controller_initv+0x80>)
	vel_d_gains.y = 0;
	vel_d_gains.z = 0;
	pos_p_gains.x = -0.01;
	pos_p_gains.y = -0.01;
	pos_p_gains.z = 0.01;
	pos_i_gains.x = 0;
 8006994:	4c1b      	ldr	r4, [pc, #108]	; (8006a04 <_Z15controller_initv+0x84>)
	vel_i_gains.y = 0;
	vel_i_gains.z = 0;
	vel_d_gains.x = 0;
	vel_d_gains.y = 0;
	vel_d_gains.z = 0;
	pos_p_gains.x = -0.01;
 8006996:	f20f 0958 	addw	r9, pc, #88	; 0x58
 800699a:	e9d9 8900 	ldrd	r8, r9, [r9]
vector3 pos_i_gains;
vector3 pos_d_gains;

void controller_init(void)
{
	vel_p_gains.x = 0.01;
 800699e:	e9ce 0100 	strd	r0, r1, [lr]
	vel_p_gains.y = 0.01;
 80069a2:	e9ce 0102 	strd	r0, r1, [lr, #8]
	vel_p_gains.z = 0.01;
 80069a6:	e9ce 0104 	strd	r0, r1, [lr, #16]
	vel_d_gains.x = 0;
	vel_d_gains.y = 0;
	vel_d_gains.z = 0;
	pos_p_gains.x = -0.01;
	pos_p_gains.y = -0.01;
	pos_p_gains.z = 0.01;
 80069aa:	e9c7 0104 	strd	r0, r1, [r7, #16]
	pos_i_gains.x = 0;
	pos_i_gains.y = 0;
	pos_i_gains.z = 0;
	pos_d_gains.x = 0;
 80069ae:	4916      	ldr	r1, [pc, #88]	; (8006a08 <_Z15controller_initv+0x88>)
void controller_init(void)
{
	vel_p_gains.x = 0.01;
	vel_p_gains.y = 0.01;
	vel_p_gains.z = 0.01;
	vel_i_gains.x = 0;
 80069b0:	2200      	movs	r2, #0
 80069b2:	2300      	movs	r3, #0
	vel_i_gains.y = 0;
	vel_i_gains.z = 0;
	vel_d_gains.x = 0;
	vel_d_gains.y = 0;
	vel_d_gains.z = 0;
	pos_p_gains.x = -0.01;
 80069b4:	e9c7 8900 	strd	r8, r9, [r7]
	pos_p_gains.y = -0.01;
 80069b8:	e9c7 8902 	strd	r8, r9, [r7, #8]
void controller_init(void)
{
	vel_p_gains.x = 0.01;
	vel_p_gains.y = 0.01;
	vel_p_gains.z = 0.01;
	vel_i_gains.x = 0;
 80069bc:	e9c6 2300 	strd	r2, r3, [r6]
	vel_i_gains.y = 0;
 80069c0:	e9c6 2302 	strd	r2, r3, [r6, #8]
	vel_i_gains.z = 0;
 80069c4:	e9c6 2304 	strd	r2, r3, [r6, #16]
	vel_d_gains.x = 0;
 80069c8:	e9c5 2300 	strd	r2, r3, [r5]
	vel_d_gains.y = 0;
 80069cc:	e9c5 2302 	strd	r2, r3, [r5, #8]
	vel_d_gains.z = 0;
 80069d0:	e9c5 2304 	strd	r2, r3, [r5, #16]
	pos_p_gains.x = -0.01;
	pos_p_gains.y = -0.01;
	pos_p_gains.z = 0.01;
	pos_i_gains.x = 0;
 80069d4:	e9c4 2300 	strd	r2, r3, [r4]
	pos_i_gains.y = 0;
 80069d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
	pos_i_gains.z = 0;
 80069dc:	e9c4 2304 	strd	r2, r3, [r4, #16]
	pos_d_gains.x = 0;
 80069e0:	e9c1 2300 	strd	r2, r3, [r1]
	pos_d_gains.y = 0;
 80069e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pos_d_gains.z = 0;
 80069e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80069ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069f0:	47ae147b 	.word	0x47ae147b
 80069f4:	bf847ae1 	.word	0xbf847ae1
 80069f8:	20001bd0 	.word	0x20001bd0
 80069fc:	20001be8 	.word	0x20001be8
 8006a00:	20001b88 	.word	0x20001b88
 8006a04:	20001ba0 	.word	0x20001ba0
 8006a08:	20001c00 	.word	0x20001c00
 8006a0c:	47ae147b 	.word	0x47ae147b
 8006a10:	3f847ae1 	.word	0x3f847ae1
 8006a14:	20001c18 	.word	0x20001c18
	...

08006a20 <_Z20velocity_loop_update7vector3d>:
    setpoint.z = 0.0;//errZ * pos_p_gains.z;
    velocity_loop_update(setpoint, throttle);
}

void velocity_loop_update(vector3 setpoint, double throttle)
{
 8006a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	double errX = setpoint.x - rotation.x; // pitch error
 8006a24:	4d37      	ldr	r5, [pc, #220]	; (8006b04 <_Z20velocity_loop_update7vector3d+0xe4>)
	double errY = setpoint.y - rotation.y; // roll error
	double errZ = setpoint.z - rotation.z; // yaw error
	double pitchOut = errX * vel_p_gains.x;
 8006a26:	4c38      	ldr	r4, [pc, #224]	; (8006b08 <_Z20velocity_loop_update7vector3d+0xe8>)
    setpoint.z = 0.0;//errZ * pos_p_gains.z;
    velocity_loop_update(setpoint, throttle);
}

void velocity_loop_update(vector3 setpoint, double throttle)
{
 8006a28:	b08b      	sub	sp, #44	; 0x2c
	double errX = setpoint.x - rotation.x; // pitch error
	double errY = setpoint.y - rotation.y; // roll error
	double errZ = setpoint.z - rotation.z; // yaw error
	double pitchOut = errX * vel_p_gains.x;
 8006a2a:	ec51 0b10 	vmov	r0, r1, d0
 8006a2e:	e9d5 2300 	ldrd	r2, r3, [r5]
    setpoint.z = 0.0;//errZ * pos_p_gains.z;
    velocity_loop_update(setpoint, throttle);
}

void velocity_loop_update(vector3 setpoint, double throttle)
{
 8006a32:	ec57 6b13 	vmov	r6, r7, d3
 8006a36:	ed8d 2b00 	vstr	d2, [sp]
 8006a3a:	ed8d 1b02 	vstr	d1, [sp, #8]
	double errX = setpoint.x - rotation.x; // pitch error
	double errY = setpoint.y - rotation.y; // roll error
	double errZ = setpoint.z - rotation.z; // yaw error
	double pitchOut = errX * vel_p_gains.x;
 8006a3e:	f7f9 fc63 	bl	8000308 <__aeabi_dsub>
 8006a42:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a46:	f7f9 fe13 	bl	8000670 <__aeabi_dmul>
	double rollOut = errY * vel_p_gains.y;
 8006a4a:	ed9d 1b02 	vldr	d1, [sp, #8]
void velocity_loop_update(vector3 setpoint, double throttle)
{
	double errX = setpoint.x - rotation.x; // pitch error
	double errY = setpoint.y - rotation.y; // roll error
	double errZ = setpoint.z - rotation.z; // yaw error
	double pitchOut = errX * vel_p_gains.x;
 8006a4e:	4682      	mov	sl, r0
 8006a50:	468b      	mov	fp, r1
	double rollOut = errY * vel_p_gains.y;
 8006a52:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8006a56:	ec51 0b11 	vmov	r0, r1, d1
 8006a5a:	f7f9 fc55 	bl	8000308 <__aeabi_dsub>
 8006a5e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8006a62:	f7f9 fe05 	bl	8000670 <__aeabi_dmul>
	double yawOut = errZ * vel_p_gains.z;
 8006a66:	ed9d 2b00 	vldr	d2, [sp]
{
	double errX = setpoint.x - rotation.x; // pitch error
	double errY = setpoint.y - rotation.y; // roll error
	double errZ = setpoint.z - rotation.z; // yaw error
	double pitchOut = errX * vel_p_gains.x;
	double rollOut = errY * vel_p_gains.y;
 8006a6a:	4680      	mov	r8, r0
 8006a6c:	4689      	mov	r9, r1
	double yawOut = errZ * vel_p_gains.z;
 8006a6e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8006a72:	ec51 0b12 	vmov	r0, r1, d2
 8006a76:	f7f9 fc47 	bl	8000308 <__aeabi_dsub>
 8006a7a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8006a7e:	f7f9 fdf7 	bl	8000670 <__aeabi_dmul>
	esc_set(0, throttle + pitchOut - yawOut);
 8006a82:	4632      	mov	r2, r6
	double errX = setpoint.x - rotation.x; // pitch error
	double errY = setpoint.y - rotation.y; // roll error
	double errZ = setpoint.z - rotation.z; // yaw error
	double pitchOut = errX * vel_p_gains.x;
	double rollOut = errY * vel_p_gains.y;
	double yawOut = errZ * vel_p_gains.z;
 8006a84:	4604      	mov	r4, r0
 8006a86:	460d      	mov	r5, r1
	esc_set(0, throttle + pitchOut - yawOut);
 8006a88:	463b      	mov	r3, r7
 8006a8a:	4650      	mov	r0, sl
 8006a8c:	4659      	mov	r1, fp
 8006a8e:	f7f9 fc3d 	bl	800030c <__adddf3>
 8006a92:	4622      	mov	r2, r4
 8006a94:	462b      	mov	r3, r5
 8006a96:	f7f9 fc37 	bl	8000308 <__aeabi_dsub>
 8006a9a:	ec41 0b10 	vmov	d0, r0, r1
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	f7ff feb6 	bl	8006810 <_Z7esc_sethd>
	esc_set(1, throttle - rollOut + yawOut);
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	4639      	mov	r1, r7
 8006aac:	f7f9 fc2c 	bl	8000308 <__aeabi_dsub>
 8006ab0:	4622      	mov	r2, r4
 8006ab2:	462b      	mov	r3, r5
 8006ab4:	f7f9 fc2a 	bl	800030c <__adddf3>
 8006ab8:	ec41 0b10 	vmov	d0, r0, r1
 8006abc:	2001      	movs	r0, #1
 8006abe:	f7ff fea7 	bl	8006810 <_Z7esc_sethd>
	esc_set(2, throttle - pitchOut - yawOut);
 8006ac2:	4652      	mov	r2, sl
 8006ac4:	465b      	mov	r3, fp
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	4639      	mov	r1, r7
 8006aca:	f7f9 fc1d 	bl	8000308 <__aeabi_dsub>
 8006ace:	4622      	mov	r2, r4
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	f7f9 fc19 	bl	8000308 <__aeabi_dsub>
 8006ad6:	ec41 0b10 	vmov	d0, r0, r1
 8006ada:	2002      	movs	r0, #2
 8006adc:	f7ff fe98 	bl	8006810 <_Z7esc_sethd>
	esc_set(3, throttle + rollOut + yawOut);
 8006ae0:	4632      	mov	r2, r6
 8006ae2:	463b      	mov	r3, r7
 8006ae4:	4640      	mov	r0, r8
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	f7f9 fc10 	bl	800030c <__adddf3>
 8006aec:	4622      	mov	r2, r4
 8006aee:	462b      	mov	r3, r5
 8006af0:	f7f9 fc0c 	bl	800030c <__adddf3>
 8006af4:	ec41 0b10 	vmov	d0, r0, r1
 8006af8:	2003      	movs	r0, #3
}
 8006afa:	b00b      	add	sp, #44	; 0x2c
 8006afc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	double rollOut = errY * vel_p_gains.y;
	double yawOut = errZ * vel_p_gains.z;
	esc_set(0, throttle + pitchOut - yawOut);
	esc_set(1, throttle - rollOut + yawOut);
	esc_set(2, throttle - pitchOut - yawOut);
	esc_set(3, throttle + rollOut + yawOut);
 8006b00:	f7ff be86 	b.w	8006810 <_Z7esc_sethd>
 8006b04:	20001c30 	.word	0x20001c30
 8006b08:	20001c18 	.word	0x20001c18
 8006b0c:	00000000 	.word	0x00000000

08006b10 <_Z17controller_updated>:
	pos_d_gains.y = 0;
	pos_d_gains.z = 0;
}

void controller_update(double throttle)
{
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	ed2d 8b02 	vpush	{d8}
 8006b16:	eeb0 8a40 	vmov.f32	s16, s0
 8006b1a:	eef0 8a60 	vmov.f32	s17, s1
 8006b1e:	b088      	sub	sp, #32
	orientation = bno055_get_vector(VECTOR_EULER);
 8006b20:	201a      	movs	r0, #26
 8006b22:	f7ff f8ed 	bl	8005d00 <_Z17bno055_get_vectorh>
 8006b26:	4c1e      	ldr	r4, [pc, #120]	; (8006ba0 <_Z17controller_updated+0x90>)
    rotation = bno055_get_vector(VECTOR_GYROSCOPE);
 8006b28:	4d1e      	ldr	r5, [pc, #120]	; (8006ba4 <_Z17controller_updated+0x94>)
    setpoint.z = 0.0;
    double errX = setpoint.x - orientation.x; // pitch error
	double errY = setpoint.y - orientation.y; // roll error
	double errZ = setpoint.z - orientation.z; // yaw error
    setpoint.x = errX * pos_p_gains.x;
    setpoint.y = errY * pos_p_gains.y;
 8006b2a:	4e1f      	ldr	r6, [pc, #124]	; (8006ba8 <_Z17controller_updated+0x98>)
}

void controller_update(double throttle)
{
	orientation = bno055_get_vector(VECTOR_EULER);
    rotation = bno055_get_vector(VECTOR_GYROSCOPE);
 8006b2c:	2014      	movs	r0, #20
	pos_d_gains.z = 0;
}

void controller_update(double throttle)
{
	orientation = bno055_get_vector(VECTOR_EULER);
 8006b2e:	ed84 0b00 	vstr	d0, [r4]
 8006b32:	ed84 1b02 	vstr	d1, [r4, #8]
 8006b36:	ed84 2b04 	vstr	d2, [r4, #16]
    rotation = bno055_get_vector(VECTOR_GYROSCOPE);
 8006b3a:	f7ff f8e1 	bl	8005d00 <_Z17bno055_get_vectorh>
    setpoint.z = 0.0;
    double errX = setpoint.x - orientation.x; // pitch error
	double errY = setpoint.y - orientation.y; // roll error
	double errZ = setpoint.z - orientation.z; // yaw error
    setpoint.x = errX * pos_p_gains.x;
    setpoint.y = errY * pos_p_gains.y;
 8006b3e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8006b42:	2000      	movs	r0, #0
 8006b44:	2100      	movs	r1, #0
}

void controller_update(double throttle)
{
	orientation = bno055_get_vector(VECTOR_EULER);
    rotation = bno055_get_vector(VECTOR_GYROSCOPE);
 8006b46:	ed85 0b00 	vstr	d0, [r5]
 8006b4a:	ed85 1b02 	vstr	d1, [r5, #8]
 8006b4e:	ed85 2b04 	vstr	d2, [r5, #16]
    setpoint.z = 0.0;
    double errX = setpoint.x - orientation.x; // pitch error
	double errY = setpoint.y - orientation.y; // roll error
	double errZ = setpoint.z - orientation.z; // yaw error
    setpoint.x = errX * pos_p_gains.x;
    setpoint.y = errY * pos_p_gains.y;
 8006b52:	f7f9 fbd9 	bl	8000308 <__aeabi_dsub>
 8006b56:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8006b5a:	f7f9 fd89 	bl	8000670 <__aeabi_dmul>
    setpoint.z = 0.0;//errZ * pos_p_gains.z;
    velocity_loop_update(setpoint, throttle);
 8006b5e:	e9d4 2300 	ldrd	r2, r3, [r4]
    setpoint.z = 0.0;
    double errX = setpoint.x - orientation.x; // pitch error
	double errY = setpoint.y - orientation.y; // roll error
	double errZ = setpoint.z - orientation.z; // yaw error
    setpoint.x = errX * pos_p_gains.x;
    setpoint.y = errY * pos_p_gains.y;
 8006b62:	e9cd 0100 	strd	r0, r1, [sp]
    setpoint.z = 0.0;//errZ * pos_p_gains.z;
    velocity_loop_update(setpoint, throttle);
 8006b66:	2000      	movs	r0, #0
 8006b68:	2100      	movs	r1, #0
 8006b6a:	f7f9 fbcd 	bl	8000308 <__aeabi_dsub>
 8006b6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b72:	f7f9 fd7d 	bl	8000670 <__aeabi_dmul>
 8006b76:	eeb0 3a48 	vmov.f32	s6, s16
 8006b7a:	eef0 3a68 	vmov.f32	s7, s17
 8006b7e:	ec41 0b10 	vmov	d0, r0, r1
 8006b82:	ed9d 1b00 	vldr	d1, [sp]
 8006b86:	ed9f 2b04 	vldr	d2, [pc, #16]	; 8006b98 <_Z17controller_updated+0x88>
 8006b8a:	f7ff ff49 	bl	8006a20 <_Z20velocity_loop_update7vector3d>
}
 8006b8e:	b008      	add	sp, #32
 8006b90:	ecbd 8b02 	vpop	{d8}
 8006b94:	bd70      	pop	{r4, r5, r6, pc}
 8006b96:	bf00      	nop
	...
 8006ba0:	20001bb8 	.word	0x20001bb8
 8006ba4:	20001c30 	.word	0x20001c30
 8006ba8:	20001bd0 	.word	0x20001bd0
 8006bac:	00000000 	.word	0x00000000

08006bb0 <roundf>:
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006bb6:	9901      	ldr	r1, [sp, #4]
 8006bb8:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 8006bbc:	3b7f      	subs	r3, #127	; 0x7f
 8006bbe:	2b16      	cmp	r3, #22
 8006bc0:	dc10      	bgt.n	8006be4 <roundf+0x34>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	db1a      	blt.n	8006bfc <roundf+0x4c>
 8006bc6:	4a11      	ldr	r2, [pc, #68]	; (8006c0c <roundf+0x5c>)
 8006bc8:	fa42 f003 	asr.w	r0, r2, r3
 8006bcc:	4201      	tst	r1, r0
 8006bce:	d00b      	beq.n	8006be8 <roundf+0x38>
 8006bd0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006bd4:	411a      	asrs	r2, r3
 8006bd6:	440a      	add	r2, r1
 8006bd8:	ea22 0200 	bic.w	r2, r2, r0
 8006bdc:	ee00 2a10 	vmov	s0, r2
 8006be0:	b002      	add	sp, #8
 8006be2:	4770      	bx	lr
 8006be4:	2b80      	cmp	r3, #128	; 0x80
 8006be6:	d003      	beq.n	8006bf0 <roundf+0x40>
 8006be8:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006bec:	b002      	add	sp, #8
 8006bee:	4770      	bx	lr
 8006bf0:	eddd 7a01 	vldr	s15, [sp, #4]
 8006bf4:	ee37 0aa7 	vadd.f32	s0, s15, s15
 8006bf8:	b002      	add	sp, #8
 8006bfa:	4770      	bx	lr
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006c02:	d1eb      	bne.n	8006bdc <roundf+0x2c>
 8006c04:	f042 527e 	orr.w	r2, r2, #1065353216	; 0x3f800000
 8006c08:	e7e8      	b.n	8006bdc <roundf+0x2c>
 8006c0a:	bf00      	nop
 8006c0c:	007fffff 	.word	0x007fffff

08006c10 <powf>:
 8006c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c12:	ed2d 8b04 	vpush	{d8-d9}
 8006c16:	4caf      	ldr	r4, [pc, #700]	; (8006ed4 <powf+0x2c4>)
 8006c18:	b08b      	sub	sp, #44	; 0x2c
 8006c1a:	eeb0 9a40 	vmov.f32	s18, s0
 8006c1e:	eef0 8a60 	vmov.f32	s17, s1
 8006c22:	f000 f9a5 	bl	8006f70 <__ieee754_powf>
 8006c26:	f994 3000 	ldrsb.w	r3, [r4]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	eeb0 8a40 	vmov.f32	s16, s0
 8006c30:	d004      	beq.n	8006c3c <powf+0x2c>
 8006c32:	eeb0 0a68 	vmov.f32	s0, s17
 8006c36:	f000 fdab 	bl	8007790 <__fpclassifyf>
 8006c3a:	b928      	cbnz	r0, 8006c48 <powf+0x38>
 8006c3c:	eeb0 0a48 	vmov.f32	s0, s16
 8006c40:	b00b      	add	sp, #44	; 0x2c
 8006c42:	ecbd 8b04 	vpop	{d8-d9}
 8006c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c48:	eeb0 0a49 	vmov.f32	s0, s18
 8006c4c:	f000 fda0 	bl	8007790 <__fpclassifyf>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d132      	bne.n	8006cba <powf+0xaa>
 8006c54:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5c:	d1ee      	bne.n	8006c3c <powf+0x2c>
 8006c5e:	4b9e      	ldr	r3, [pc, #632]	; (8006ed8 <powf+0x2c8>)
 8006c60:	9008      	str	r0, [sp, #32]
 8006c62:	2201      	movs	r2, #1
 8006c64:	ee19 0a10 	vmov	r0, s18
 8006c68:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006c6c:	f7f9 fcac 	bl	80005c8 <__aeabi_f2d>
 8006c70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c74:	ee18 0a90 	vmov	r0, s17
 8006c78:	f7f9 fca6 	bl	80005c8 <__aeabi_f2d>
 8006c7c:	f994 3000 	ldrsb.w	r3, [r4]
 8006c80:	4f96      	ldr	r7, [pc, #600]	; (8006edc <powf+0x2cc>)
 8006c82:	2600      	movs	r6, #0
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006c8e:	d038      	beq.n	8006d02 <powf+0xf2>
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d036      	beq.n	8006d02 <powf+0xf2>
 8006c94:	4668      	mov	r0, sp
 8006c96:	f000 fcc3 	bl	8007620 <matherr>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	f000 809f 	beq.w	8006dde <powf+0x1ce>
 8006ca0:	9b08      	ldr	r3, [sp, #32]
 8006ca2:	b11b      	cbz	r3, 8006cac <powf+0x9c>
 8006ca4:	f000 fe14 	bl	80078d0 <__errno>
 8006ca8:	9b08      	ldr	r3, [sp, #32]
 8006caa:	6003      	str	r3, [r0, #0]
 8006cac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cb0:	f7f9 ffc6 	bl	8000c40 <__aeabi_d2f>
 8006cb4:	ee00 0a10 	vmov	s0, r0
 8006cb8:	e7c2      	b.n	8006c40 <powf+0x30>
 8006cba:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc2:	d121      	bne.n	8006d08 <powf+0xf8>
 8006cc4:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ccc:	d157      	bne.n	8006d7e <powf+0x16e>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	4a81      	ldr	r2, [pc, #516]	; (8006ed8 <powf+0x2c8>)
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	ee19 0a10 	vmov	r0, s18
 8006cd8:	2300      	movs	r3, #0
 8006cda:	9308      	str	r3, [sp, #32]
 8006cdc:	9201      	str	r2, [sp, #4]
 8006cde:	f7f9 fc73 	bl	80005c8 <__aeabi_f2d>
 8006ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce6:	ee18 0a90 	vmov	r0, s17
 8006cea:	f7f9 fc6d 	bl	80005c8 <__aeabi_f2d>
 8006cee:	f994 3000 	ldrsb.w	r3, [r4]
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	2700      	movs	r7, #0
 8006cf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cfa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0c8      	beq.n	8006c94 <powf+0x84>
 8006d02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006d06:	e79b      	b.n	8006c40 <powf+0x30>
 8006d08:	eeb0 0a48 	vmov.f32	s0, s16
 8006d0c:	f000 fd30 	bl	8007770 <finitef>
 8006d10:	4605      	mov	r5, r0
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d068      	beq.n	8006de8 <powf+0x1d8>
 8006d16:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1e:	d18d      	bne.n	8006c3c <powf+0x2c>
 8006d20:	eeb0 0a49 	vmov.f32	s0, s18
 8006d24:	f000 fd24 	bl	8007770 <finitef>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d087      	beq.n	8006c3c <powf+0x2c>
 8006d2c:	eeb0 0a68 	vmov.f32	s0, s17
 8006d30:	f000 fd1e 	bl	8007770 <finitef>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d081      	beq.n	8006c3c <powf+0x2c>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	4a67      	ldr	r2, [pc, #412]	; (8006ed8 <powf+0x2c8>)
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	ee19 0a10 	vmov	r0, s18
 8006d42:	2300      	movs	r3, #0
 8006d44:	9308      	str	r3, [sp, #32]
 8006d46:	9201      	str	r2, [sp, #4]
 8006d48:	f7f9 fc3e 	bl	80005c8 <__aeabi_f2d>
 8006d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d50:	ee18 0a90 	vmov	r0, s17
 8006d54:	f7f9 fc38 	bl	80005c8 <__aeabi_f2d>
 8006d58:	f994 3000 	ldrsb.w	r3, [r4]
 8006d5c:	2600      	movs	r6, #0
 8006d5e:	2700      	movs	r7, #0
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d66:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006d6a:	d06e      	beq.n	8006e4a <powf+0x23a>
 8006d6c:	4668      	mov	r0, sp
 8006d6e:	f000 fc57 	bl	8007620 <matherr>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d069      	beq.n	8006e4a <powf+0x23a>
 8006d76:	9b08      	ldr	r3, [sp, #32]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d097      	beq.n	8006cac <powf+0x9c>
 8006d7c:	e792      	b.n	8006ca4 <powf+0x94>
 8006d7e:	eeb0 0a68 	vmov.f32	s0, s17
 8006d82:	f000 fcf5 	bl	8007770 <finitef>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	f43f af58 	beq.w	8006c3c <powf+0x2c>
 8006d8c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8006d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d94:	f57f af52 	bpl.w	8006c3c <powf+0x2c>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	4a4f      	ldr	r2, [pc, #316]	; (8006ed8 <powf+0x2c8>)
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	ee19 0a10 	vmov	r0, s18
 8006da2:	2300      	movs	r3, #0
 8006da4:	9308      	str	r3, [sp, #32]
 8006da6:	9201      	str	r2, [sp, #4]
 8006da8:	f7f9 fc0e 	bl	80005c8 <__aeabi_f2d>
 8006dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006db0:	ee18 0a90 	vmov	r0, s17
 8006db4:	f7f9 fc08 	bl	80005c8 <__aeabi_f2d>
 8006db8:	7823      	ldrb	r3, [r4, #0]
 8006dba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d13c      	bne.n	8006e3c <powf+0x22c>
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006dca:	4668      	mov	r0, sp
 8006dcc:	f000 fc28 	bl	8007620 <matherr>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d1d0      	bne.n	8006d76 <powf+0x166>
 8006dd4:	f000 fd7c 	bl	80078d0 <__errno>
 8006dd8:	2321      	movs	r3, #33	; 0x21
 8006dda:	6003      	str	r3, [r0, #0]
 8006ddc:	e7cb      	b.n	8006d76 <powf+0x166>
 8006dde:	f000 fd77 	bl	80078d0 <__errno>
 8006de2:	2321      	movs	r3, #33	; 0x21
 8006de4:	6003      	str	r3, [r0, #0]
 8006de6:	e75b      	b.n	8006ca0 <powf+0x90>
 8006de8:	eeb0 0a49 	vmov.f32	s0, s18
 8006dec:	f000 fcc0 	bl	8007770 <finitef>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d090      	beq.n	8006d16 <powf+0x106>
 8006df4:	eeb0 0a68 	vmov.f32	s0, s17
 8006df8:	f000 fcba 	bl	8007770 <finitef>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d08a      	beq.n	8006d16 <powf+0x106>
 8006e00:	eeb0 0a48 	vmov.f32	s0, s16
 8006e04:	f000 fcc4 	bl	8007790 <__fpclassifyf>
 8006e08:	bb20      	cbnz	r0, 8006e54 <powf+0x244>
 8006e0a:	4b33      	ldr	r3, [pc, #204]	; (8006ed8 <powf+0x2c8>)
 8006e0c:	9008      	str	r0, [sp, #32]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	ee19 0a10 	vmov	r0, s18
 8006e14:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006e18:	f7f9 fbd6 	bl	80005c8 <__aeabi_f2d>
 8006e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e20:	ee18 0a90 	vmov	r0, s17
 8006e24:	f7f9 fbd0 	bl	80005c8 <__aeabi_f2d>
 8006e28:	7824      	ldrb	r4, [r4, #0]
 8006e2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2300      	movs	r3, #0
 8006e32:	2c00      	cmp	r4, #0
 8006e34:	d137      	bne.n	8006ea6 <powf+0x296>
 8006e36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e3a:	e7c6      	b.n	8006dca <powf+0x1ba>
 8006e3c:	4928      	ldr	r1, [pc, #160]	; (8006ee0 <powf+0x2d0>)
 8006e3e:	2000      	movs	r0, #0
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e46:	d0c5      	beq.n	8006dd4 <powf+0x1c4>
 8006e48:	e7bf      	b.n	8006dca <powf+0x1ba>
 8006e4a:	f000 fd41 	bl	80078d0 <__errno>
 8006e4e:	2322      	movs	r3, #34	; 0x22
 8006e50:	6003      	str	r3, [r0, #0]
 8006e52:	e790      	b.n	8006d76 <powf+0x166>
 8006e54:	4b20      	ldr	r3, [pc, #128]	; (8006ed8 <powf+0x2c8>)
 8006e56:	9508      	str	r5, [sp, #32]
 8006e58:	2203      	movs	r2, #3
 8006e5a:	ee19 0a10 	vmov	r0, s18
 8006e5e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006e62:	f7f9 fbb1 	bl	80005c8 <__aeabi_f2d>
 8006e66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e6a:	ee18 0a90 	vmov	r0, s17
 8006e6e:	f7f9 fbab 	bl	80005c8 <__aeabi_f2d>
 8006e72:	f994 3000 	ldrsb.w	r3, [r4]
 8006e76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e7a:	b9eb      	cbnz	r3, 8006eb8 <powf+0x2a8>
 8006e7c:	4b19      	ldr	r3, [pc, #100]	; (8006ee4 <powf+0x2d4>)
 8006e7e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8006e82:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e8e:	d42d      	bmi.n	8006eec <powf+0x2dc>
 8006e90:	4668      	mov	r0, sp
 8006e92:	f000 fbc5 	bl	8007620 <matherr>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f47f af02 	bne.w	8006ca0 <powf+0x90>
 8006e9c:	f000 fd18 	bl	80078d0 <__errno>
 8006ea0:	2322      	movs	r3, #34	; 0x22
 8006ea2:	6003      	str	r3, [r0, #0]
 8006ea4:	e6fc      	b.n	8006ca0 <powf+0x90>
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	f7f9 fd0b 	bl	80008c4 <__aeabi_ddiv>
 8006eae:	2c02      	cmp	r4, #2
 8006eb0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006eb4:	d08e      	beq.n	8006dd4 <powf+0x1c4>
 8006eb6:	e788      	b.n	8006dca <powf+0x1ba>
 8006eb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <powf+0x2d8>)
 8006eba:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ec8:	d42c      	bmi.n	8006f24 <powf+0x314>
 8006eca:	f994 3000 	ldrsb.w	r3, [r4]
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d1de      	bne.n	8006e90 <powf+0x280>
 8006ed2:	e7e3      	b.n	8006e9c <powf+0x28c>
 8006ed4:	2000083c 	.word	0x2000083c
 8006ed8:	08007f50 	.word	0x08007f50
 8006edc:	3ff00000 	.word	0x3ff00000
 8006ee0:	fff00000 	.word	0xfff00000
 8006ee4:	47efffff 	.word	0x47efffff
 8006ee8:	7ff00000 	.word	0x7ff00000
 8006eec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006ef0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006ef4:	ee17 0a90 	vmov	r0, s15
 8006ef8:	f7f9 fb66 	bl	80005c8 <__aeabi_f2d>
 8006efc:	4606      	mov	r6, r0
 8006efe:	460f      	mov	r7, r1
 8006f00:	ec47 6b10 	vmov	d0, r6, r7
 8006f04:	f000 fb94 	bl	8007630 <rint>
 8006f08:	4630      	mov	r0, r6
 8006f0a:	ec53 2b10 	vmov	r2, r3, d0
 8006f0e:	4639      	mov	r1, r7
 8006f10:	f7f9 fe1c 	bl	8000b4c <__aeabi_dcmpeq>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d1d8      	bne.n	8006eca <powf+0x2ba>
 8006f18:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <powf+0x34c>)
 8006f1a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006f1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f22:	e7d2      	b.n	8006eca <powf+0x2ba>
 8006f24:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006f28:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006f2c:	ee17 0a90 	vmov	r0, s15
 8006f30:	f7f9 fb4a 	bl	80005c8 <__aeabi_f2d>
 8006f34:	4606      	mov	r6, r0
 8006f36:	460f      	mov	r7, r1
 8006f38:	ec47 6b10 	vmov	d0, r6, r7
 8006f3c:	f000 fb78 	bl	8007630 <rint>
 8006f40:	4630      	mov	r0, r6
 8006f42:	ec53 2b10 	vmov	r2, r3, d0
 8006f46:	4639      	mov	r1, r7
 8006f48:	f7f9 fe00 	bl	8000b4c <__aeabi_dcmpeq>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d1bc      	bne.n	8006eca <powf+0x2ba>
 8006f50:	4b03      	ldr	r3, [pc, #12]	; (8006f60 <powf+0x350>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f58:	e7b7      	b.n	8006eca <powf+0x2ba>
 8006f5a:	bf00      	nop
 8006f5c:	c7efffff 	.word	0xc7efffff
 8006f60:	fff00000 	.word	0xfff00000
	...

08006f70 <__ieee754_powf>:
 8006f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f74:	ed2d 8b02 	vpush	{d8}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	edcd 0a00 	vstr	s1, [sp]
 8006f7e:	9c00      	ldr	r4, [sp, #0]
 8006f80:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006f84:	f034 4600 	bics.w	r6, r4, #2147483648	; 0x80000000
 8006f88:	d014      	beq.n	8006fb4 <__ieee754_powf+0x44>
 8006f8a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006f8e:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
 8006f92:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006f96:	dd07      	ble.n	8006fa8 <__ieee754_powf+0x38>
 8006f98:	4858      	ldr	r0, [pc, #352]	; (80070fc <__ieee754_powf+0x18c>)
 8006f9a:	b002      	add	sp, #8
 8006f9c:	ecbd 8b02 	vpop	{d8}
 8006fa0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa4:	f000 bc14 	b.w	80077d0 <nanf>
 8006fa8:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006fac:	dd09      	ble.n	8006fc2 <__ieee754_powf+0x52>
 8006fae:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006fb2:	d1f1      	bne.n	8006f98 <__ieee754_powf+0x28>
 8006fb4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006fb8:	b002      	add	sp, #8
 8006fba:	ecbd 8b02 	vpop	{d8}
 8006fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc2:	f1b8 0f00 	cmp.w	r8, #0
 8006fc6:	db4d      	blt.n	8007064 <__ieee754_powf+0xf4>
 8006fc8:	f04f 0a00 	mov.w	sl, #0
 8006fcc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006fd0:	d03f      	beq.n	8007052 <__ieee754_powf+0xe2>
 8006fd2:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006fd6:	d058      	beq.n	800708a <__ieee754_powf+0x11a>
 8006fd8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8006fdc:	d06e      	beq.n	80070bc <__ieee754_powf+0x14c>
 8006fde:	9d01      	ldr	r5, [sp, #4]
 8006fe0:	f8dd 9000 	ldr.w	r9, [sp]
 8006fe4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006fe8:	ee00 5a10 	vmov	s0, r5
 8006fec:	d01c      	beq.n	8007028 <__ieee754_powf+0xb8>
 8006fee:	f000 fbb7 	bl	8007760 <fabsf>
 8006ff2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006ff6:	d04d      	beq.n	8007094 <__ieee754_powf+0x124>
 8006ff8:	2f00      	cmp	r7, #0
 8006ffa:	d04b      	beq.n	8007094 <__ieee754_powf+0x124>
 8006ffc:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007000:	d048      	beq.n	8007094 <__ieee754_powf+0x124>
 8007002:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8007006:	3b01      	subs	r3, #1
 8007008:	ea5a 0203 	orrs.w	r2, sl, r3
 800700c:	d06e      	beq.n	80070ec <__ieee754_powf+0x17c>
 800700e:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
 8007012:	dd7b      	ble.n	800710c <__ieee754_powf+0x19c>
 8007014:	4a3a      	ldr	r2, [pc, #232]	; (8007100 <__ieee754_powf+0x190>)
 8007016:	4297      	cmp	r7, r2
 8007018:	f300 81d1 	bgt.w	80073be <__ieee754_powf+0x44e>
 800701c:	2c00      	cmp	r4, #0
 800701e:	f2c0 81d4 	blt.w	80073ca <__ieee754_powf+0x45a>
 8007022:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8007104 <__ieee754_powf+0x194>
 8007026:	e7c7      	b.n	8006fb8 <__ieee754_powf+0x48>
 8007028:	f1b8 0f00 	cmp.w	r8, #0
 800702c:	da4b      	bge.n	80070c6 <__ieee754_powf+0x156>
 800702e:	f000 fb97 	bl	8007760 <fabsf>
 8007032:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007036:	d001      	beq.n	800703c <__ieee754_powf+0xcc>
 8007038:	2f00      	cmp	r7, #0
 800703a:	d1df      	bne.n	8006ffc <__ieee754_powf+0x8c>
 800703c:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
 8007040:	ea57 030a 	orrs.w	r3, r7, sl
 8007044:	d04d      	beq.n	80070e2 <__ieee754_powf+0x172>
 8007046:	f1ba 0f01 	cmp.w	sl, #1
 800704a:	d1b5      	bne.n	8006fb8 <__ieee754_powf+0x48>
 800704c:	eeb1 0a40 	vneg.f32	s0, s0
 8007050:	e7b2      	b.n	8006fb8 <__ieee754_powf+0x48>
 8007052:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007056:	d0ad      	beq.n	8006fb4 <__ieee754_powf+0x44>
 8007058:	dd29      	ble.n	80070ae <__ieee754_powf+0x13e>
 800705a:	2c00      	cmp	r4, #0
 800705c:	dbe1      	blt.n	8007022 <__ieee754_powf+0xb2>
 800705e:	ed9d 0a00 	vldr	s0, [sp]
 8007062:	e7a9      	b.n	8006fb8 <__ieee754_powf+0x48>
 8007064:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
 8007068:	da1e      	bge.n	80070a8 <__ieee754_powf+0x138>
 800706a:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800706e:	db09      	blt.n	8007084 <__ieee754_powf+0x114>
 8007070:	15f3      	asrs	r3, r6, #23
 8007072:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007076:	fa46 f203 	asr.w	r2, r6, r3
 800707a:	fa02 f303 	lsl.w	r3, r2, r3
 800707e:	429e      	cmp	r6, r3
 8007080:	f000 8198 	beq.w	80073b4 <__ieee754_powf+0x444>
 8007084:	f04f 0a00 	mov.w	sl, #0
 8007088:	e7a3      	b.n	8006fd2 <__ieee754_powf+0x62>
 800708a:	2c00      	cmp	r4, #0
 800708c:	db22      	blt.n	80070d4 <__ieee754_powf+0x164>
 800708e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007092:	e791      	b.n	8006fb8 <__ieee754_powf+0x48>
 8007094:	2c00      	cmp	r4, #0
 8007096:	bfbc      	itt	lt
 8007098:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800709c:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80070a0:	f1b8 0f00 	cmp.w	r8, #0
 80070a4:	da88      	bge.n	8006fb8 <__ieee754_powf+0x48>
 80070a6:	e7c9      	b.n	800703c <__ieee754_powf+0xcc>
 80070a8:	f04f 0a02 	mov.w	sl, #2
 80070ac:	e78e      	b.n	8006fcc <__ieee754_powf+0x5c>
 80070ae:	2c00      	cmp	r4, #0
 80070b0:	dab7      	bge.n	8007022 <__ieee754_powf+0xb2>
 80070b2:	eddd 7a00 	vldr	s15, [sp]
 80070b6:	eeb1 0a67 	vneg.f32	s0, s15
 80070ba:	e77d      	b.n	8006fb8 <__ieee754_powf+0x48>
 80070bc:	eddd 7a01 	vldr	s15, [sp, #4]
 80070c0:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80070c4:	e778      	b.n	8006fb8 <__ieee754_powf+0x48>
 80070c6:	b002      	add	sp, #8
 80070c8:	ecbd 8b02 	vpop	{d8}
 80070cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d0:	f000 ba4e 	b.w	8007570 <__ieee754_sqrtf>
 80070d4:	ed9d 7a01 	vldr	s14, [sp, #4]
 80070d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80070dc:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80070e0:	e76a      	b.n	8006fb8 <__ieee754_powf+0x48>
 80070e2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80070e6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80070ea:	e765      	b.n	8006fb8 <__ieee754_powf+0x48>
 80070ec:	ee07 5a90 	vmov	s15, r5
 80070f0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80070f4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80070f8:	e75e      	b.n	8006fb8 <__ieee754_powf+0x48>
 80070fa:	bf00      	nop
 80070fc:	08007994 	.word	0x08007994
 8007100:	3f7ffff7 	.word	0x3f7ffff7
 8007104:	00000000 	.word	0x00000000
 8007108:	4b800000 	.word	0x4b800000
 800710c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 8007110:	f280 8168 	bge.w	80073e4 <__ieee754_powf+0x474>
 8007114:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 8007108 <__ieee754_powf+0x198>
 8007118:	ee60 7a27 	vmul.f32	s15, s0, s15
 800711c:	f06f 0217 	mvn.w	r2, #23
 8007120:	ee17 7a90 	vmov	r7, s15
 8007124:	48f2      	ldr	r0, [pc, #968]	; (80074f0 <__ieee754_powf+0x580>)
 8007126:	15f9      	asrs	r1, r7, #23
 8007128:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800712c:	397f      	subs	r1, #127	; 0x7f
 800712e:	4287      	cmp	r7, r0
 8007130:	440a      	add	r2, r1
 8007132:	f047 517e 	orr.w	r1, r7, #1065353216	; 0x3f800000
 8007136:	f340 814d 	ble.w	80073d4 <__ieee754_powf+0x464>
 800713a:	48ee      	ldr	r0, [pc, #952]	; (80074f4 <__ieee754_powf+0x584>)
 800713c:	4287      	cmp	r7, r0
 800713e:	f340 819b 	ble.w	8007478 <__ieee754_powf+0x508>
 8007142:	ed9f 4aed 	vldr	s8, [pc, #948]	; 80074f8 <__ieee754_powf+0x588>
 8007146:	3201      	adds	r2, #1
 8007148:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800714c:	eeb0 3a44 	vmov.f32	s6, s8
 8007150:	2000      	movs	r0, #0
 8007152:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007156:	ee07 1a10 	vmov	s14, r1
 800715a:	ee77 7a06 	vadd.f32	s15, s14, s12
 800715e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007162:	eec6 5aa7 	vdiv.f32	s11, s13, s15
 8007166:	1049      	asrs	r1, r1, #1
 8007168:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800716c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007170:	4401      	add	r1, r0
 8007172:	ee77 6a46 	vsub.f32	s13, s14, s12
 8007176:	ee02 1a10 	vmov	s4, r1
 800717a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800717e:	ee72 4a46 	vsub.f32	s9, s4, s12
 8007182:	eddf 8ade 	vldr	s17, [pc, #888]	; 80074fc <__ieee754_powf+0x58c>
 8007186:	ed9f 8ade 	vldr	s16, [pc, #888]	; 8007500 <__ieee754_powf+0x590>
 800718a:	eddf 1ade 	vldr	s3, [pc, #888]	; 8007504 <__ieee754_powf+0x594>
 800718e:	ed9f 0ade 	vldr	s0, [pc, #888]	; 8007508 <__ieee754_powf+0x598>
 8007192:	eddf 0ade 	vldr	s1, [pc, #888]	; 800750c <__ieee754_powf+0x59c>
 8007196:	ed9f 1ade 	vldr	s2, [pc, #888]	; 8007510 <__ieee754_powf+0x5a0>
 800719a:	eddf 7ade 	vldr	s15, [pc, #888]	; 8007514 <__ieee754_powf+0x5a4>
 800719e:	eddf 2ade 	vldr	s5, [pc, #888]	; 8007518 <__ieee754_powf+0x5a8>
 80071a2:	ee23 6aa3 	vmul.f32	s12, s7, s7
 80071a6:	ee13 1a90 	vmov	r1, s7
 80071aa:	eea6 8a28 	vfma.f32	s16, s12, s17
 80071ae:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80071b2:	f021 010f 	bic.w	r1, r1, #15
 80071b6:	ee37 7a64 	vsub.f32	s14, s14, s9
 80071ba:	eef0 4a61 	vmov.f32	s9, s3
 80071be:	ee05 1a10 	vmov	s10, r1
 80071c2:	eee6 4a08 	vfma.f32	s9, s12, s16
 80071c6:	eef1 1a45 	vneg.f32	s3, s10
 80071ca:	eee1 6a82 	vfma.f32	s13, s3, s4
 80071ce:	eea6 0a24 	vfma.f32	s0, s12, s9
 80071d2:	eee1 6a87 	vfma.f32	s13, s3, s14
 80071d6:	eee6 0a00 	vfma.f32	s1, s12, s0
 80071da:	ee66 5aa5 	vmul.f32	s11, s13, s11
 80071de:	eef0 6a41 	vmov.f32	s13, s2
 80071e2:	eee6 6a20 	vfma.f32	s13, s12, s1
 80071e6:	ee33 7a85 	vadd.f32	s14, s7, s10
 80071ea:	ee26 6a06 	vmul.f32	s12, s12, s12
 80071ee:	ee27 7a25 	vmul.f32	s14, s14, s11
 80071f2:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 80071f6:	eea6 7a26 	vfma.f32	s14, s12, s13
 80071fa:	eef0 6a64 	vmov.f32	s13, s9
 80071fe:	eee5 6a05 	vfma.f32	s13, s10, s10
 8007202:	ed9f 2ac6 	vldr	s4, [pc, #792]	; 800751c <__ieee754_powf+0x5ac>
 8007206:	ee36 6a87 	vadd.f32	s12, s13, s14
 800720a:	ee06 2a90 	vmov	s13, r2
 800720e:	ee16 2a10 	vmov	r2, s12
 8007212:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8007216:	f022 020f 	bic.w	r2, r2, #15
 800721a:	ee06 2a10 	vmov	s12, r2
 800721e:	ee76 4a64 	vsub.f32	s9, s12, s9
 8007222:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007226:	eee1 4a85 	vfma.f32	s9, s3, s10
 800722a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800722e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007232:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007236:	eef0 5a47 	vmov.f32	s11, s14
 800723a:	eee5 5a06 	vfma.f32	s11, s10, s12
 800723e:	ee15 2a90 	vmov	r2, s11
 8007242:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8007246:	f022 020f 	bic.w	r2, r2, #15
 800724a:	ee05 2a10 	vmov	s10, r2
 800724e:	eea1 5a86 	vfma.f32	s10, s3, s12
 8007252:	ee05 2a90 	vmov	s11, r2
 8007256:	ee37 7a45 	vsub.f32	s14, s14, s10
 800725a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725e:	eee5 7aa2 	vfma.f32	s15, s11, s5
 8007262:	ee77 7a83 	vadd.f32	s15, s15, s6
 8007266:	eeb0 7a67 	vmov.f32	s14, s15
 800726a:	eea5 7a82 	vfma.f32	s14, s11, s4
 800726e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8007272:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007276:	ee17 2a10 	vmov	r2, s14
 800727a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800727e:	f022 020f 	bic.w	r2, r2, #15
 8007282:	ee07 2a10 	vmov	s14, r2
 8007286:	ee77 6a66 	vsub.f32	s13, s14, s13
 800728a:	ee36 7ac4 	vsub.f32	s14, s13, s8
 800728e:	eea5 7ac2 	vfms.f32	s14, s11, s4
 8007292:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007296:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800729a:	f024 040f 	bic.w	r4, r4, #15
 800729e:	ee07 9a90 	vmov	s15, r9
 80072a2:	ee06 4a90 	vmov	s13, r4
 80072a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80072aa:	ee06 4a10 	vmov	s12, r4
 80072ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80072b2:	ee06 2a90 	vmov	s13, r2
 80072b6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80072ba:	ee06 2a10 	vmov	s12, r2
 80072be:	eea6 7a27 	vfma.f32	s14, s12, s15
 80072c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80072c6:	ea5a 0303 	orrs.w	r3, sl, r3
 80072ca:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80072ce:	ee37 6a26 	vadd.f32	s12, s14, s13
 80072d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80072d6:	ee16 2a10 	vmov	r2, s12
 80072da:	bf14      	ite	ne
 80072dc:	eeb0 8a67 	vmovne.f32	s16, s15
 80072e0:	eeb0 8a40 	vmoveq.f32	s16, s0
 80072e4:	2a00      	cmp	r2, #0
 80072e6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80072ea:	f340 80b2 	ble.w	8007452 <__ieee754_powf+0x4e2>
 80072ee:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80072f2:	f300 8084 	bgt.w	80073fe <__ieee754_powf+0x48e>
 80072f6:	d077      	beq.n	80073e8 <__ieee754_powf+0x478>
 80072f8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80072fc:	f300 8086 	bgt.w	800740c <__ieee754_powf+0x49c>
 8007300:	2300      	movs	r3, #0
 8007302:	4618      	mov	r0, r3
 8007304:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8007308:	f022 020f 	bic.w	r2, r2, #15
 800730c:	ee05 2a90 	vmov	s11, r2
 8007310:	ed9f 6a83 	vldr	s12, [pc, #524]	; 8007520 <__ieee754_powf+0x5b0>
 8007314:	eddf 7a83 	vldr	s15, [pc, #524]	; 8007524 <__ieee754_powf+0x5b4>
 8007318:	eddf 2a83 	vldr	s5, [pc, #524]	; 8007528 <__ieee754_powf+0x5b8>
 800731c:	ed9f 3a83 	vldr	s6, [pc, #524]	; 800752c <__ieee754_powf+0x5bc>
 8007320:	ed9f 2a83 	vldr	s4, [pc, #524]	; 8007530 <__ieee754_powf+0x5c0>
 8007324:	eddf 3a83 	vldr	s7, [pc, #524]	; 8007534 <__ieee754_powf+0x5c4>
 8007328:	ed9f 4a83 	vldr	s8, [pc, #524]	; 8007538 <__ieee754_powf+0x5c8>
 800732c:	eddf 4a83 	vldr	s9, [pc, #524]	; 800753c <__ieee754_powf+0x5cc>
 8007330:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8007334:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8007338:	ee37 7a66 	vsub.f32	s14, s14, s13
 800733c:	ee65 6a86 	vmul.f32	s13, s11, s12
 8007340:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8007344:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007348:	eeb0 7a66 	vmov.f32	s14, s13
 800734c:	eee5 6aa2 	vfma.f32	s13, s11, s5
 8007350:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8007354:	eef0 1a66 	vmov.f32	s3, s13
 8007358:	eee5 1ae2 	vfms.f32	s3, s11, s5
 800735c:	eef0 5a43 	vmov.f32	s11, s6
 8007360:	eee7 5a82 	vfma.f32	s11, s15, s4
 8007364:	ee37 7a61 	vsub.f32	s14, s14, s3
 8007368:	eee7 3aa5 	vfma.f32	s7, s15, s11
 800736c:	eea6 7a87 	vfma.f32	s14, s13, s14
 8007370:	eea7 4aa3 	vfma.f32	s8, s15, s7
 8007374:	eee7 4a84 	vfma.f32	s9, s15, s8
 8007378:	eef0 5a64 	vmov.f32	s11, s9
 800737c:	eef0 4a66 	vmov.f32	s9, s13
 8007380:	eee7 4ae5 	vfms.f32	s9, s15, s11
 8007384:	ee66 5aa4 	vmul.f32	s11, s13, s9
 8007388:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800738c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007390:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007394:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007398:	ee35 0a66 	vsub.f32	s0, s10, s13
 800739c:	ee10 2a10 	vmov	r2, s0
 80073a0:	4413      	add	r3, r2
 80073a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073a6:	f2c0 809f 	blt.w	80074e8 <__ieee754_powf+0x578>
 80073aa:	ee00 3a10 	vmov	s0, r3
 80073ae:	ee20 0a08 	vmul.f32	s0, s0, s16
 80073b2:	e601      	b.n	8006fb8 <__ieee754_powf+0x48>
 80073b4:	f002 0201 	and.w	r2, r2, #1
 80073b8:	f1c2 0a02 	rsb	sl, r2, #2
 80073bc:	e609      	b.n	8006fd2 <__ieee754_powf+0x62>
 80073be:	4a60      	ldr	r2, [pc, #384]	; (8007540 <__ieee754_powf+0x5d0>)
 80073c0:	4297      	cmp	r7, r2
 80073c2:	dd62      	ble.n	800748a <__ieee754_powf+0x51a>
 80073c4:	2c00      	cmp	r4, #0
 80073c6:	f77f ae2c 	ble.w	8007022 <__ieee754_powf+0xb2>
 80073ca:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8007544 <__ieee754_powf+0x5d4>
 80073ce:	ee20 0a00 	vmul.f32	s0, s0, s0
 80073d2:	e5f1      	b.n	8006fb8 <__ieee754_powf+0x48>
 80073d4:	ed9f 4a48 	vldr	s8, [pc, #288]	; 80074f8 <__ieee754_powf+0x588>
 80073d8:	2000      	movs	r0, #0
 80073da:	eeb0 3a44 	vmov.f32	s6, s8
 80073de:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80073e2:	e6b8      	b.n	8007156 <__ieee754_powf+0x1e6>
 80073e4:	2200      	movs	r2, #0
 80073e6:	e69d      	b.n	8007124 <__ieee754_powf+0x1b4>
 80073e8:	eddf 7a57 	vldr	s15, [pc, #348]	; 8007548 <__ieee754_powf+0x5d8>
 80073ec:	ee36 6a66 	vsub.f32	s12, s12, s13
 80073f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073f4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80073f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fc:	dd06      	ble.n	800740c <__ieee754_powf+0x49c>
 80073fe:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8007544 <__ieee754_powf+0x5d4>
 8007402:	ee68 7a00 	vmul.f32	s15, s16, s0
 8007406:	ee27 0a80 	vmul.f32	s0, s15, s0
 800740a:	e5d5      	b.n	8006fb8 <__ieee754_powf+0x48>
 800740c:	15db      	asrs	r3, r3, #23
 800740e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8007412:	3b7e      	subs	r3, #126	; 0x7e
 8007414:	fa41 f303 	asr.w	r3, r1, r3
 8007418:	1899      	adds	r1, r3, r2
 800741a:	f3c1 50c7 	ubfx	r0, r1, #23, #8
 800741e:	4c4b      	ldr	r4, [pc, #300]	; (800754c <__ieee754_powf+0x5dc>)
 8007420:	387f      	subs	r0, #127	; 0x7f
 8007422:	4104      	asrs	r4, r0
 8007424:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8007428:	ea21 0104 	bic.w	r1, r1, r4
 800742c:	ee07 1a90 	vmov	s15, r1
 8007430:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007438:	f1c0 0017 	rsb	r0, r0, #23
 800743c:	fa43 f000 	asr.w	r0, r3, r0
 8007440:	2a00      	cmp	r2, #0
 8007442:	ee77 7a26 	vadd.f32	s15, s14, s13
 8007446:	bfb8      	it	lt
 8007448:	4240      	neglt	r0, r0
 800744a:	05c3      	lsls	r3, r0, #23
 800744c:	ee17 2a90 	vmov	r2, s15
 8007450:	e758      	b.n	8007304 <__ieee754_powf+0x394>
 8007452:	493f      	ldr	r1, [pc, #252]	; (8007550 <__ieee754_powf+0x5e0>)
 8007454:	428b      	cmp	r3, r1
 8007456:	dc08      	bgt.n	800746a <__ieee754_powf+0x4fa>
 8007458:	f47f af4e 	bne.w	80072f8 <__ieee754_powf+0x388>
 800745c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007460:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8007464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007468:	d8d0      	bhi.n	800740c <__ieee754_powf+0x49c>
 800746a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8007554 <__ieee754_powf+0x5e4>
 800746e:	ee68 7a00 	vmul.f32	s15, s16, s0
 8007472:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007476:	e59f      	b.n	8006fb8 <__ieee754_powf+0x48>
 8007478:	ed9f 4a37 	vldr	s8, [pc, #220]	; 8007558 <__ieee754_powf+0x5e8>
 800747c:	ed9f 3a37 	vldr	s6, [pc, #220]	; 800755c <__ieee754_powf+0x5ec>
 8007480:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007484:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8007488:	e665      	b.n	8007156 <__ieee754_powf+0x1e6>
 800748a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800748e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007492:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8007508 <__ieee754_powf+0x598>
 8007496:	eddf 7a32 	vldr	s15, [pc, #200]	; 8007560 <__ieee754_powf+0x5f0>
 800749a:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8007564 <__ieee754_powf+0x5f4>
 800749e:	eddf 5a32 	vldr	s11, [pc, #200]	; 8007568 <__ieee754_powf+0x5f8>
 80074a2:	eef1 6a40 	vneg.f32	s13, s0
 80074a6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80074aa:	eea6 6a87 	vfma.f32	s12, s13, s14
 80074ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80074b2:	eea6 7a86 	vfma.f32	s14, s13, s12
 80074b6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80074ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80074be:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80074c2:	eee0 7a05 	vfma.f32	s15, s0, s10
 80074c6:	eeb0 7a67 	vmov.f32	s14, s15
 80074ca:	eea0 7a25 	vfma.f32	s14, s0, s11
 80074ce:	ee17 2a10 	vmov	r2, s14
 80074d2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80074d6:	f022 020f 	bic.w	r2, r2, #15
 80074da:	ee07 2a10 	vmov	s14, r2
 80074de:	eea6 7aa5 	vfma.f32	s14, s13, s11
 80074e2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80074e6:	e6d6      	b.n	8007296 <__ieee754_powf+0x326>
 80074e8:	f000 f97a 	bl	80077e0 <scalbnf>
 80074ec:	e75f      	b.n	80073ae <__ieee754_powf+0x43e>
 80074ee:	bf00      	nop
 80074f0:	001cc471 	.word	0x001cc471
 80074f4:	005db3d6 	.word	0x005db3d6
 80074f8:	00000000 	.word	0x00000000
 80074fc:	3e53f142 	.word	0x3e53f142
 8007500:	3e6c3255 	.word	0x3e6c3255
 8007504:	3e8ba305 	.word	0x3e8ba305
 8007508:	3eaaaaab 	.word	0x3eaaaaab
 800750c:	3edb6db7 	.word	0x3edb6db7
 8007510:	3f19999a 	.word	0x3f19999a
 8007514:	3f76384f 	.word	0x3f76384f
 8007518:	369dc3a0 	.word	0x369dc3a0
 800751c:	3f763800 	.word	0x3f763800
 8007520:	35bfbe8c 	.word	0x35bfbe8c
 8007524:	3f317218 	.word	0x3f317218
 8007528:	3f317200 	.word	0x3f317200
 800752c:	b5ddea0e 	.word	0xb5ddea0e
 8007530:	3331bb4c 	.word	0x3331bb4c
 8007534:	388ab355 	.word	0x388ab355
 8007538:	bb360b61 	.word	0xbb360b61
 800753c:	3e2aaaab 	.word	0x3e2aaaab
 8007540:	3f800007 	.word	0x3f800007
 8007544:	7149f2ca 	.word	0x7149f2ca
 8007548:	3338aa3c 	.word	0x3338aa3c
 800754c:	007fffff 	.word	0x007fffff
 8007550:	43160000 	.word	0x43160000
 8007554:	0da24260 	.word	0x0da24260
 8007558:	3f15c000 	.word	0x3f15c000
 800755c:	35d1cfdc 	.word	0x35d1cfdc
 8007560:	3fb8aa3b 	.word	0x3fb8aa3b
 8007564:	36eca570 	.word	0x36eca570
 8007568:	3fb8aa00 	.word	0x3fb8aa00
 800756c:	00000000 	.word	0x00000000

08007570 <__ieee754_sqrtf>:
 8007570:	ee10 3a10 	vmov	r3, s0
 8007574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007578:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800757c:	b470      	push	{r4, r5, r6}
 800757e:	d230      	bcs.n	80075e2 <__ieee754_sqrtf+0x72>
 8007580:	b36a      	cbz	r2, 80075de <__ieee754_sqrtf+0x6e>
 8007582:	2b00      	cmp	r3, #0
 8007584:	db3d      	blt.n	8007602 <__ieee754_sqrtf+0x92>
 8007586:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800758a:	ea4f 50e3 	mov.w	r0, r3, asr #23
 800758e:	d32c      	bcc.n	80075ea <__ieee754_sqrtf+0x7a>
 8007590:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
 8007594:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007598:	07d1      	lsls	r1, r2, #31
 800759a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800759e:	bf48      	it	mi
 80075a0:	005b      	lslmi	r3, r3, #1
 80075a2:	2400      	movs	r4, #0
 80075a4:	1056      	asrs	r6, r2, #1
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	4625      	mov	r5, r4
 80075aa:	2119      	movs	r1, #25
 80075ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075b0:	18a8      	adds	r0, r5, r2
 80075b2:	4298      	cmp	r0, r3
 80075b4:	dc02      	bgt.n	80075bc <__ieee754_sqrtf+0x4c>
 80075b6:	1a1b      	subs	r3, r3, r0
 80075b8:	1885      	adds	r5, r0, r2
 80075ba:	4414      	add	r4, r2
 80075bc:	3901      	subs	r1, #1
 80075be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80075c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80075c6:	d1f3      	bne.n	80075b0 <__ieee754_sqrtf+0x40>
 80075c8:	b113      	cbz	r3, 80075d0 <__ieee754_sqrtf+0x60>
 80075ca:	f004 0301 	and.w	r3, r4, #1
 80075ce:	441c      	add	r4, r3
 80075d0:	1064      	asrs	r4, r4, #1
 80075d2:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80075d6:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 80075da:	ee00 3a10 	vmov	s0, r3
 80075de:	bc70      	pop	{r4, r5, r6}
 80075e0:	4770      	bx	lr
 80075e2:	eea0 0a00 	vfma.f32	s0, s0, s0
 80075e6:	bc70      	pop	{r4, r5, r6}
 80075e8:	4770      	bx	lr
 80075ea:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
 80075ee:	d001      	beq.n	80075f4 <__ieee754_sqrtf+0x84>
 80075f0:	e00c      	b.n	800760c <__ieee754_sqrtf+0x9c>
 80075f2:	460a      	mov	r2, r1
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	021c      	lsls	r4, r3, #8
 80075f8:	f102 0101 	add.w	r1, r2, #1
 80075fc:	d5f9      	bpl.n	80075f2 <__ieee754_sqrtf+0x82>
 80075fe:	1a80      	subs	r0, r0, r2
 8007600:	e7c6      	b.n	8007590 <__ieee754_sqrtf+0x20>
 8007602:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007606:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800760a:	e7e8      	b.n	80075de <__ieee754_sqrtf+0x6e>
 800760c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007610:	e7f5      	b.n	80075fe <__ieee754_sqrtf+0x8e>
 8007612:	bf00      	nop
	...

08007620 <matherr>:
 8007620:	2000      	movs	r0, #0
 8007622:	4770      	bx	lr
	...

08007630 <rint>:
 8007630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007632:	ec53 2b10 	vmov	r2, r3, d0
 8007636:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800763a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
 800763e:	2813      	cmp	r0, #19
 8007640:	b083      	sub	sp, #12
 8007642:	4619      	mov	r1, r3
 8007644:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8007648:	ee10 5a10 	vmov	r5, s0
 800764c:	dc2f      	bgt.n	80076ae <rint+0x7e>
 800764e:	2800      	cmp	r0, #0
 8007650:	db49      	blt.n	80076e6 <rint+0xb6>
 8007652:	4e3f      	ldr	r6, [pc, #252]	; (8007750 <rint+0x120>)
 8007654:	4106      	asrs	r6, r0
 8007656:	ea03 0706 	and.w	r7, r3, r6
 800765a:	4317      	orrs	r7, r2
 800765c:	d02c      	beq.n	80076b8 <rint+0x88>
 800765e:	0876      	lsrs	r6, r6, #1
 8007660:	4033      	ands	r3, r6
 8007662:	431d      	orrs	r5, r3
 8007664:	d00c      	beq.n	8007680 <rint+0x50>
 8007666:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800766a:	2813      	cmp	r0, #19
 800766c:	ea21 0606 	bic.w	r6, r1, r6
 8007670:	fa43 f100 	asr.w	r1, r3, r0
 8007674:	ea41 0106 	orr.w	r1, r1, r6
 8007678:	bf0c      	ite	eq
 800767a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800767e:	2500      	movne	r5, #0
 8007680:	4834      	ldr	r0, [pc, #208]	; (8007754 <rint+0x124>)
 8007682:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8007686:	462a      	mov	r2, r5
 8007688:	e9d4 4500 	ldrd	r4, r5, [r4]
 800768c:	4610      	mov	r0, r2
 800768e:	462b      	mov	r3, r5
 8007690:	4622      	mov	r2, r4
 8007692:	f7f8 fe3b 	bl	800030c <__adddf3>
 8007696:	e9cd 0100 	strd	r0, r1, [sp]
 800769a:	4622      	mov	r2, r4
 800769c:	462b      	mov	r3, r5
 800769e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076a2:	f7f8 fe31 	bl	8000308 <__aeabi_dsub>
 80076a6:	ec41 0b10 	vmov	d0, r0, r1
 80076aa:	b003      	add	sp, #12
 80076ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ae:	2833      	cmp	r0, #51	; 0x33
 80076b0:	dd06      	ble.n	80076c0 <rint+0x90>
 80076b2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80076b6:	d042      	beq.n	800773e <rint+0x10e>
 80076b8:	ec43 2b10 	vmov	d0, r2, r3
 80076bc:	b003      	add	sp, #12
 80076be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c0:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c8:	40f0      	lsrs	r0, r6
 80076ca:	4202      	tst	r2, r0
 80076cc:	d0f4      	beq.n	80076b8 <rint+0x88>
 80076ce:	0840      	lsrs	r0, r0, #1
 80076d0:	4202      	tst	r2, r0
 80076d2:	d0d5      	beq.n	8007680 <rint+0x50>
 80076d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076d8:	ea25 0000 	bic.w	r0, r5, r0
 80076dc:	fa43 f606 	asr.w	r6, r3, r6
 80076e0:	ea46 0500 	orr.w	r5, r6, r0
 80076e4:	e7cc      	b.n	8007680 <rint+0x50>
 80076e6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80076ea:	4310      	orrs	r0, r2
 80076ec:	ee10 7a10 	vmov	r7, s0
 80076f0:	d0e2      	beq.n	80076b8 <rint+0x88>
 80076f2:	f3c3 0013 	ubfx	r0, r3, #0, #20
 80076f6:	4307      	orrs	r7, r0
 80076f8:	4278      	negs	r0, r7
 80076fa:	4307      	orrs	r7, r0
 80076fc:	4815      	ldr	r0, [pc, #84]	; (8007754 <rint+0x124>)
 80076fe:	0c59      	lsrs	r1, r3, #17
 8007700:	0b3f      	lsrs	r7, r7, #12
 8007702:	0449      	lsls	r1, r1, #17
 8007704:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
 8007708:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800770c:	ea47 0301 	orr.w	r3, r7, r1
 8007710:	e9d0 6700 	ldrd	r6, r7, [r0]
 8007714:	4619      	mov	r1, r3
 8007716:	4610      	mov	r0, r2
 8007718:	463b      	mov	r3, r7
 800771a:	4632      	mov	r2, r6
 800771c:	f7f8 fdf6 	bl	800030c <__adddf3>
 8007720:	e9cd 0100 	strd	r0, r1, [sp]
 8007724:	463b      	mov	r3, r7
 8007726:	4632      	mov	r2, r6
 8007728:	e9dd 0100 	ldrd	r0, r1, [sp]
 800772c:	f7f8 fdec 	bl	8000308 <__aeabi_dsub>
 8007730:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007734:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8007738:	ec41 0b10 	vmov	d0, r0, r1
 800773c:	e7be      	b.n	80076bc <rint+0x8c>
 800773e:	ee10 0a10 	vmov	r0, s0
 8007742:	4619      	mov	r1, r3
 8007744:	f7f8 fde2 	bl	800030c <__adddf3>
 8007748:	ec41 0b10 	vmov	d0, r0, r1
 800774c:	e7b6      	b.n	80076bc <rint+0x8c>
 800774e:	bf00      	nop
 8007750:	000fffff 	.word	0x000fffff
 8007754:	08007f60 	.word	0x08007f60
	...

08007760 <fabsf>:
 8007760:	ee10 3a10 	vmov	r3, s0
 8007764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007768:	ee00 3a10 	vmov	s0, r3
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop

08007770 <finitef>:
 8007770:	ee10 3a10 	vmov	r3, s0
 8007774:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8007778:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800777c:	bfac      	ite	ge
 800777e:	2000      	movge	r0, #0
 8007780:	2001      	movlt	r0, #1
 8007782:	4770      	bx	lr
	...

08007790 <__fpclassifyf>:
 8007790:	ee10 3a10 	vmov	r3, s0
 8007794:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8007798:	d101      	bne.n	800779e <__fpclassifyf+0xe>
 800779a:	2002      	movs	r0, #2
 800779c:	4770      	bx	lr
 800779e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80077a2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80077a6:	d201      	bcs.n	80077ac <__fpclassifyf+0x1c>
 80077a8:	2004      	movs	r0, #4
 80077aa:	4770      	bx	lr
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <__fpclassifyf+0x34>)
 80077ae:	1e42      	subs	r2, r0, #1
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d801      	bhi.n	80077b8 <__fpclassifyf+0x28>
 80077b4:	2003      	movs	r0, #3
 80077b6:	4770      	bx	lr
 80077b8:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 80077bc:	fab0 f080 	clz	r0, r0
 80077c0:	0940      	lsrs	r0, r0, #5
 80077c2:	4770      	bx	lr
 80077c4:	007ffffe 	.word	0x007ffffe
	...

080077d0 <nanf>:
 80077d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80077d8 <nanf+0x8>
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	7fc00000 	.word	0x7fc00000
 80077dc:	00000000 	.word	0x00000000

080077e0 <scalbnf>:
 80077e0:	b508      	push	{r3, lr}
 80077e2:	ee10 3a10 	vmov	r3, s0
 80077e6:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80077ea:	ed2d 8b02 	vpush	{d8}
 80077ee:	d011      	beq.n	8007814 <scalbnf+0x34>
 80077f0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80077f4:	d211      	bcs.n	800781a <scalbnf+0x3a>
 80077f6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80077fa:	d313      	bcc.n	8007824 <scalbnf+0x44>
 80077fc:	0dd2      	lsrs	r2, r2, #23
 80077fe:	4402      	add	r2, r0
 8007800:	2afe      	cmp	r2, #254	; 0xfe
 8007802:	dc2e      	bgt.n	8007862 <scalbnf+0x82>
 8007804:	2a00      	cmp	r2, #0
 8007806:	dd1a      	ble.n	800783e <scalbnf+0x5e>
 8007808:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800780c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007810:	ee00 3a10 	vmov	s0, r3
 8007814:	ecbd 8b02 	vpop	{d8}
 8007818:	bd08      	pop	{r3, pc}
 800781a:	ecbd 8b02 	vpop	{d8}
 800781e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007822:	bd08      	pop	{r3, pc}
 8007824:	4b1d      	ldr	r3, [pc, #116]	; (800789c <scalbnf+0xbc>)
 8007826:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80078a0 <scalbnf+0xc0>
 800782a:	4298      	cmp	r0, r3
 800782c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007830:	db22      	blt.n	8007878 <scalbnf+0x98>
 8007832:	ee10 3a10 	vmov	r3, s0
 8007836:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800783a:	3a19      	subs	r2, #25
 800783c:	e7df      	b.n	80077fe <scalbnf+0x1e>
 800783e:	f112 0f16 	cmn.w	r2, #22
 8007842:	da1e      	bge.n	8007882 <scalbnf+0xa2>
 8007844:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007848:	4298      	cmp	r0, r3
 800784a:	dc0a      	bgt.n	8007862 <scalbnf+0x82>
 800784c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 80078a4 <scalbnf+0xc4>
 8007850:	eef0 0a40 	vmov.f32	s1, s0
 8007854:	eeb0 0a48 	vmov.f32	s0, s16
 8007858:	f000 f82a 	bl	80078b0 <copysignf>
 800785c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007860:	e7d8      	b.n	8007814 <scalbnf+0x34>
 8007862:	ed9f 8a11 	vldr	s16, [pc, #68]	; 80078a8 <scalbnf+0xc8>
 8007866:	eef0 0a40 	vmov.f32	s1, s0
 800786a:	eeb0 0a48 	vmov.f32	s0, s16
 800786e:	f000 f81f 	bl	80078b0 <copysignf>
 8007872:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007876:	e7cd      	b.n	8007814 <scalbnf+0x34>
 8007878:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80078a4 <scalbnf+0xc4>
 800787c:	ee20 0a20 	vmul.f32	s0, s0, s1
 8007880:	e7c8      	b.n	8007814 <scalbnf+0x34>
 8007882:	3219      	adds	r2, #25
 8007884:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007888:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800788c:	eddf 7a07 	vldr	s15, [pc, #28]	; 80078ac <scalbnf+0xcc>
 8007890:	ee00 3a10 	vmov	s0, r3
 8007894:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007898:	e7bc      	b.n	8007814 <scalbnf+0x34>
 800789a:	bf00      	nop
 800789c:	ffff3cb0 	.word	0xffff3cb0
 80078a0:	4c000000 	.word	0x4c000000
 80078a4:	0da24260 	.word	0x0da24260
 80078a8:	7149f2ca 	.word	0x7149f2ca
 80078ac:	33000000 	.word	0x33000000

080078b0 <copysignf>:
 80078b0:	ee10 3a10 	vmov	r3, s0
 80078b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078b8:	ee10 3a90 	vmov	r3, s1
 80078bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078c0:	4313      	orrs	r3, r2
 80078c2:	ee00 3a10 	vmov	s0, r3
 80078c6:	4770      	bx	lr
	...

080078d0 <__errno>:
 80078d0:	4b01      	ldr	r3, [pc, #4]	; (80078d8 <__errno+0x8>)
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	20000c68 	.word	0x20000c68
 80078dc:	00000000 	.word	0x00000000
 80078e0:	6c6c6548 	.word	0x6c6c6548
 80078e4:	6f77206f 	.word	0x6f77206f
 80078e8:	00646c72 	.word	0x00646c72
	...
 8007900:	00007350 	.word	0x00007350
	...

08007910 <ram_areas>:
 8007910:	080083e4 20001c48 20001c48 20001c48     ....H.. H.. H.. 
 8007920:	080083e4 20000000 20000000 20000000     ....... ... ... 
 8007930:	080083e4 2001c000 2001c000 2001c000     ....... ... ... 
 8007940:	080083e4 00000000 00000000 00000000     ................
 8007950:	080083e4 00000000 00000000 00000000     ................
 8007960:	080083e4 00000000 00000000 00000000     ................
 8007970:	080083e4 00000000 00000000 00000000     ................
 8007980:	080083e4 00000000 00000000 00000000     ................
 8007990:	656c6469 00000000 00000000 00000000     idle............

080079a0 <ch_debug>:
 80079a0:	6e69616d 18431600 08480404 1814100c     main..C...H.....
 80079b0:	1e1d1c00 0000201f 00000000 00000000     ..... ..........

080079c0 <vmt>:
 80079c0:	080021b1 08002191 08002171 08002131     .!...!..q!..1!..
 80079d0:	08002151 08002111 080020f1 080020d1     Q!...!... ... ..

080079e0 <zero_status>:
	...

080079f0 <active_status>:
	...

08007a00 <halted_status>:
 8007a00:	00000001 00000000 00000000 00000000     ................

08007a10 <_stm32_dma_streams>:
 8007a10:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8007a20:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8007a30:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8007a40:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8007a50:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8007a60:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8007a70:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8007a80:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8007a90:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8007aa0:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8007ab0:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8007ac0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.
 8007ad0:	20414d44 6c696166 00657275 00000000     DMA failure.....

08007ae0 <fsparams>:
 8007ae0:	00000080 00000140 00000003 00000000     ....@...........
 8007af0:	5f627375 5f646c6c 706d7570 00000000     usb_lld_pump....

08007b00 <ep0config>:
 8007b00:	00000000 080026c1 08002a11 08002ad1     .....&...*...*..
 8007b10:	00400040 200012d0 200012d0 00000001     @.@.... ... ....
 8007b20:	200012e0 00000000 00000000 00000000     ... ............

08007b30 <pal_default_config>:
 8007b30:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 8007b40:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 8007b50:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 8007b60:	04000000 00000040 02208001 00000000     ....@..... .....
 8007b70:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8007b80:	00060600 55000100 00000000 ffffffff     .......U........
 8007b90:	00555055 00000fff 00000000 00000000     UPU.............
 8007ba0:	00000040 00000000 ffffffff 00000000     @...............
 8007bb0:	0000ffff 00000000 00000000 00000000     ................
 8007bc0:	00000000 ffffffff 00000000 0000ffff     ................
	...
 8007be0:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8007bfc:	ffffffff 00000000 0000ffff 00000000     ................
 8007c0c:	00000000 6c756e28 0000296c 00000000     ....(null)......
 8007c1c:	00000000                                ....

08007c20 <pow10>:
 8007c20:	0000000a 00000064 000003e8 00002710     ....d........'..
 8007c30:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 8007c40:	3b9aca00 00000000 00000000 00000000     ...;............
 8007c50:	000a7325 00000000 00000000 00000000     %s..............

08007c60 <_ZL12vcom_string3>:
 8007c60:	00330308 00330031 00000000 00000000     ..3.1.3.........

08007c70 <_ZL12vcom_strings>:
 8007c70:	00000004 08007de0 00000026 08007df0     .....}..&....}..
 8007c80:	00000038 08007ca0 00000008 08007c60     8....|......`|..

08007c90 <_ZL6usbcfg>:
 8007c90:	08005951 08005901 080022e1 08005931     QY...Y..."..1Y..

08007ca0 <_ZL12vcom_string2>:
 8007ca0:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 8007cb0:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 8007cc0:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 8007cd0:	006f0050 00740072 00000000 00000000     P.o.r.t.........

08007ce0 <_ZL22vcom_device_descriptor>:
 8007ce0:	00000012 08007cf0 00000000 00000000     .....|..........

08007cf0 <_ZL27vcom_device_descriptor_data>:
 8007cf0:	01100112 40000002 57400483 02010200     .......@..@W....
 8007d00:	00000103 00000000 00000000 00000000     ................

08007d10 <_ZL9ep1config>:
 8007d10:	00000002 00000000 08002371 080023f1     ........q#...#..
 8007d20:	00400040 200017e4 200017d4 00000002     @.@.... ... ....
	...

08007d40 <_ZL9serusbcfg>:
 8007d40:	20001050 00020101 00000000 00000000     P.. ............

08007d50 <_ZL34vcom_configuration_descriptor_data>:
 8007d50:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8007d60:	24050001 05011000 01000124 02022404     ...$....$....$..
 8007d70:	00062405 82050701 ff000803 00010409     .$..............
 8007d80:	00000a02 01050700 00004002 02810507     .........@......
 8007d90:	00000040 00000000 00000000 00000000     @...............

08007da0 <_ZL29vcom_configuration_descriptor>:
 8007da0:	00000043 08007d50 00000000 00000000     C...P}..........

08007db0 <_ZL9ep2config>:
 8007db0:	00000003 00000000 08002451 00000000     ........Q$......
 8007dc0:	00000010 2000133c 00000000 00000001     ....<.. ........
	...

08007de0 <_ZL12vcom_string0>:
 8007de0:	04090304 00000000 00000000 00000000     ................

08007df0 <_ZL12vcom_string1>:
 8007df0:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8007e00:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8007e10:	00630069 00000073 00000000 00000000     i.c.s...........

08007e20 <_ZL6i2ccfg>:
 8007e20:	00000001 000186a0 00000001 00000000     ................

08007e30 <_ZL6extcfg>:
	...
 8007e58:	00000026 08005f81 00000000 00000000     &...._..........
	...

08007ef0 <_ZL14nrf24l01Config>:
 8007ef0:	200012ec 40020400 00000001 00000000     ... ...@........

08007f00 <_ZL3vmt>:
 8007f00:	08006661 080064d1 08006631 080064c1     af...d..1f...d..
 8007f10:	08006611 08006461 08006511 08006351     .f..ad...e..Qc..

08007f20 <_ZL7tx_addr>:
 8007f20:	e7e7e7e7 000000e7 00000000 00000000     ................

08007f30 <_ZL11nrf24l01SPI>:
 8007f30:	00000000 40020000 00080004 00000000     .......@........

08007f40 <_ZL7rx_addr>:
 8007f40:	c1c1c1c1 000000c1 00000000 00000000     ................
 8007f50:	66776f70 00000000 00000000 00000000     powf............

08007f60 <TWO52>:
 8007f60:	00000000 43300000 00000000 c3300000     ......0C......0.
 8007f70:	00000043                                C...
